// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package internal

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/kuroweb/price-monitoring/volumes/bff/graph/model"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	IosysCrawlSetting() IosysCrawlSettingResolver
	JanparaCrawlSetting() JanparaCrawlSettingResolver
	MercariCrawlSetting() MercariCrawlSettingResolver
	Mutation() MutationResolver
	PcKoubouCrawlSetting() PcKoubouCrawlSettingResolver
	Product() ProductResolver
	Query() QueryResolver
	YahooAuctionCrawlSetting() YahooAuctionCrawlSettingResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	CreateIosysCrawlSettingExcludeKeywordResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	CreateIosysCrawlSettingExcludeKeywordResultSuccess struct {
		IosysCrawlSettingExcludeKeyword func(childComplexity int) int
		Ok                              func(childComplexity int) int
	}

	CreateIosysCrawlSettingExcludeKeywordResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	CreateIosysCrawlSettingExcludeProductResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	CreateIosysCrawlSettingExcludeProductResultSuccess struct {
		IosysCrawlSettingExcludeProduct func(childComplexity int) int
		Ok                              func(childComplexity int) int
	}

	CreateIosysCrawlSettingExcludeProductResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	CreateIosysCrawlSettingRequiredKeywordResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	CreateIosysCrawlSettingRequiredKeywordResultSuccess struct {
		IosysCrawlSettingRequiredKeyword func(childComplexity int) int
		Ok                               func(childComplexity int) int
	}

	CreateIosysCrawlSettingRequiredKeywordResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	CreateJanparaCrawlSettingExcludeKeywordResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	CreateJanparaCrawlSettingExcludeKeywordResultSuccess struct {
		JanparaCrawlSettingExcludeKeyword func(childComplexity int) int
		Ok                                func(childComplexity int) int
	}

	CreateJanparaCrawlSettingExcludeKeywordResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	CreateJanparaCrawlSettingExcludeProductResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	CreateJanparaCrawlSettingExcludeProductResultSuccess struct {
		JanparaCrawlSettingExcludeProduct func(childComplexity int) int
		Ok                                func(childComplexity int) int
	}

	CreateJanparaCrawlSettingExcludeProductResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	CreateJanparaCrawlSettingRequiredKeywordResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	CreateJanparaCrawlSettingRequiredKeywordResultSuccess struct {
		JanparaCrawlSettingRequiredKeyword func(childComplexity int) int
		Ok                                 func(childComplexity int) int
	}

	CreateJanparaCrawlSettingRequiredKeywordResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	CreateMercariCrawlSettingExcludeKeywordResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	CreateMercariCrawlSettingExcludeKeywordResultSuccess struct {
		MercariCrawlSettingExcludeKeyword func(childComplexity int) int
		Ok                                func(childComplexity int) int
	}

	CreateMercariCrawlSettingExcludeKeywordResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	CreateMercariCrawlSettingExcludeProductResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	CreateMercariCrawlSettingExcludeProductResultSuccess struct {
		MercariCrawlSettingExcludeProduct func(childComplexity int) int
		Ok                                func(childComplexity int) int
	}

	CreateMercariCrawlSettingExcludeProductResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	CreateMercariCrawlSettingRequiredKeywordResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	CreateMercariCrawlSettingRequiredKeywordResultSuccess struct {
		MercariCrawlSettingRequiredKeyword func(childComplexity int) int
		Ok                                 func(childComplexity int) int
	}

	CreateMercariCrawlSettingRequiredKeywordResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	CreatePcKoubouCrawlSettingExcludeKeywordResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	CreatePcKoubouCrawlSettingExcludeKeywordResultSuccess struct {
		Ok                                 func(childComplexity int) int
		PcKoubouCrawlSettingExcludeKeyword func(childComplexity int) int
	}

	CreatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	CreatePcKoubouCrawlSettingExcludeProductResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	CreatePcKoubouCrawlSettingExcludeProductResultSuccess struct {
		Ok                                 func(childComplexity int) int
		PcKoubouCrawlSettingExcludeProduct func(childComplexity int) int
	}

	CreatePcKoubouCrawlSettingExcludeProductResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	CreatePcKoubouCrawlSettingRequiredKeywordResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	CreatePcKoubouCrawlSettingRequiredKeywordResultSuccess struct {
		Ok                                  func(childComplexity int) int
		PcKoubouCrawlSettingRequiredKeyword func(childComplexity int) int
	}

	CreatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	CreateProductResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	CreateProductResultSuccess struct {
		Ok      func(childComplexity int) int
		Product func(childComplexity int) int
	}

	CreateProductResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	CreateYahooAuctionCrawlSettingExcludeKeywordResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess struct {
		Ok                                     func(childComplexity int) int
		YahooAuctionCrawlSettingExcludeKeyword func(childComplexity int) int
	}

	CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	CreateYahooAuctionCrawlSettingExcludeProductResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	CreateYahooAuctionCrawlSettingExcludeProductResultSuccess struct {
		Ok                                     func(childComplexity int) int
		YahooAuctionCrawlSettingExcludeProduct func(childComplexity int) int
	}

	CreateYahooAuctionCrawlSettingExcludeProductResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	CreateYahooAuctionCrawlSettingRequiredKeywordResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess struct {
		Ok                                      func(childComplexity int) int
		YahooAuctionCrawlSettingRequiredKeyword func(childComplexity int) int
	}

	CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	DeleteIosysCrawlSettingExcludeKeywordResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	DeleteIosysCrawlSettingExcludeKeywordResultSuccess struct {
		Ok func(childComplexity int) int
	}

	DeleteIosysCrawlSettingExcludeKeywordResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	DeleteIosysCrawlSettingExcludeProductResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	DeleteIosysCrawlSettingExcludeProductResultSuccess struct {
		Ok func(childComplexity int) int
	}

	DeleteIosysCrawlSettingExcludeProductResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	DeleteIosysCrawlSettingRequiredKeywordResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	DeleteIosysCrawlSettingRequiredKeywordResultSuccess struct {
		Ok func(childComplexity int) int
	}

	DeleteIosysCrawlSettingRequiredKeywordResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	DeleteJanparaCrawlSettingExcludeKeywordResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	DeleteJanparaCrawlSettingExcludeKeywordResultSuccess struct {
		Ok func(childComplexity int) int
	}

	DeleteJanparaCrawlSettingExcludeKeywordResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	DeleteJanparaCrawlSettingExcludeProductResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	DeleteJanparaCrawlSettingExcludeProductResultSuccess struct {
		Ok func(childComplexity int) int
	}

	DeleteJanparaCrawlSettingExcludeProductResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	DeleteJanparaCrawlSettingRequiredKeywordResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	DeleteJanparaCrawlSettingRequiredKeywordResultSuccess struct {
		Ok func(childComplexity int) int
	}

	DeleteJanparaCrawlSettingRequiredKeywordResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	DeleteMercariCrawlSettingExcludeKeywordResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	DeleteMercariCrawlSettingExcludeKeywordResultSuccess struct {
		Ok func(childComplexity int) int
	}

	DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	DeleteMercariCrawlSettingExcludeProductResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	DeleteMercariCrawlSettingExcludeProductResultSuccess struct {
		Ok func(childComplexity int) int
	}

	DeleteMercariCrawlSettingExcludeProductResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	DeleteMercariCrawlSettingRequiredKeywordResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	DeleteMercariCrawlSettingRequiredKeywordResultSuccess struct {
		Ok func(childComplexity int) int
	}

	DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	DeletePcKoubouCrawlSettingExcludeKeywordResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	DeletePcKoubouCrawlSettingExcludeKeywordResultSuccess struct {
		Ok func(childComplexity int) int
	}

	DeletePcKoubouCrawlSettingExcludeKeywordResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	DeletePcKoubouCrawlSettingExcludeProductResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	DeletePcKoubouCrawlSettingExcludeProductResultSuccess struct {
		Ok func(childComplexity int) int
	}

	DeletePcKoubouCrawlSettingExcludeProductResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	DeletePcKoubouCrawlSettingRequiredKeywordResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	DeletePcKoubouCrawlSettingRequiredKeywordResultSuccess struct {
		Ok func(childComplexity int) int
	}

	DeletePcKoubouCrawlSettingRequiredKeywordResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	DeleteProductResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	DeleteProductResultSuccess struct {
		Ok func(childComplexity int) int
	}

	DeleteProductResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	DeleteYahooAuctionCrawlSettingExcludeKeywordResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	DeleteYahooAuctionCrawlSettingExcludeKeywordResultSuccess struct {
		Ok func(childComplexity int) int
	}

	DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	DeleteYahooAuctionCrawlSettingExcludeProductResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	DeleteYahooAuctionCrawlSettingExcludeProductResultSuccess struct {
		Ok func(childComplexity int) int
	}

	DeleteYahooAuctionCrawlSettingExcludeProductResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	DeleteYahooAuctionCrawlSettingRequiredKeywordResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	DeleteYahooAuctionCrawlSettingRequiredKeywordResultSuccess struct {
		Ok func(childComplexity int) int
	}

	DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	ErrorDetail struct {
		Field   func(childComplexity int) int
		Message func(childComplexity int) int
	}

	IosysCrawlSetting struct {
		CreatedAt                         func(childComplexity int) int
		Enabled                           func(childComplexity int) int
		ID                                func(childComplexity int) int
		IosysCrawlSettingExcludeKeywords  func(childComplexity int) int
		IosysCrawlSettingExcludeProducts  func(childComplexity int) int
		IosysCrawlSettingRequiredKeywords func(childComplexity int) int
		Keyword                           func(childComplexity int) int
		MaxPrice                          func(childComplexity int) int
		MinPrice                          func(childComplexity int) int
		ProductID                         func(childComplexity int) int
		UpdatedAt                         func(childComplexity int) int
	}

	IosysCrawlSettingExcludeKeyword struct {
		CreatedAt           func(childComplexity int) int
		ID                  func(childComplexity int) int
		IosysCrawlSettingID func(childComplexity int) int
		Keyword             func(childComplexity int) int
		UpdatedAt           func(childComplexity int) int
	}

	IosysCrawlSettingExcludeProduct struct {
		CreatedAt           func(childComplexity int) int
		ExternalID          func(childComplexity int) int
		ID                  func(childComplexity int) int
		IosysCrawlSettingID func(childComplexity int) int
		UpdatedAt           func(childComplexity int) int
	}

	IosysCrawlSettingRequiredKeyword struct {
		CreatedAt           func(childComplexity int) int
		ID                  func(childComplexity int) int
		IosysCrawlSettingID func(childComplexity int) int
		Keyword             func(childComplexity int) int
		UpdatedAt           func(childComplexity int) int
	}

	JanparaCrawlSetting struct {
		CreatedAt                           func(childComplexity int) int
		Enabled                             func(childComplexity int) int
		ID                                  func(childComplexity int) int
		JanparaCrawlSettingExcludeKeywords  func(childComplexity int) int
		JanparaCrawlSettingExcludeProducts  func(childComplexity int) int
		JanparaCrawlSettingRequiredKeywords func(childComplexity int) int
		Keyword                             func(childComplexity int) int
		MaxPrice                            func(childComplexity int) int
		MinPrice                            func(childComplexity int) int
		ProductID                           func(childComplexity int) int
		UpdatedAt                           func(childComplexity int) int
	}

	JanparaCrawlSettingExcludeKeyword struct {
		CreatedAt             func(childComplexity int) int
		ID                    func(childComplexity int) int
		JanparaCrawlSettingID func(childComplexity int) int
		Keyword               func(childComplexity int) int
		UpdatedAt             func(childComplexity int) int
	}

	JanparaCrawlSettingExcludeProduct struct {
		CreatedAt             func(childComplexity int) int
		ExternalID            func(childComplexity int) int
		ID                    func(childComplexity int) int
		JanparaCrawlSettingID func(childComplexity int) int
		UpdatedAt             func(childComplexity int) int
	}

	JanparaCrawlSettingRequiredKeyword struct {
		CreatedAt             func(childComplexity int) int
		ID                    func(childComplexity int) int
		JanparaCrawlSettingID func(childComplexity int) int
		Keyword               func(childComplexity int) int
		UpdatedAt             func(childComplexity int) int
	}

	MercariCrawlSetting struct {
		CategoryID                          func(childComplexity int) int
		CreatedAt                           func(childComplexity int) int
		Enabled                             func(childComplexity int) int
		ID                                  func(childComplexity int) int
		Keyword                             func(childComplexity int) int
		MaxPrice                            func(childComplexity int) int
		MercariCrawlSettingExcludeKeywords  func(childComplexity int) int
		MercariCrawlSettingExcludeProducts  func(childComplexity int) int
		MercariCrawlSettingRequiredKeywords func(childComplexity int) int
		MinPrice                            func(childComplexity int) int
		ProductID                           func(childComplexity int) int
		UpdatedAt                           func(childComplexity int) int
	}

	MercariCrawlSettingExcludeKeyword struct {
		CreatedAt             func(childComplexity int) int
		ID                    func(childComplexity int) int
		Keyword               func(childComplexity int) int
		MercariCrawlSettingID func(childComplexity int) int
		UpdatedAt             func(childComplexity int) int
	}

	MercariCrawlSettingExcludeProduct struct {
		CreatedAt             func(childComplexity int) int
		ExternalID            func(childComplexity int) int
		ID                    func(childComplexity int) int
		MercariCrawlSettingID func(childComplexity int) int
		UpdatedAt             func(childComplexity int) int
	}

	MercariCrawlSettingRequiredKeyword struct {
		CreatedAt             func(childComplexity int) int
		ID                    func(childComplexity int) int
		Keyword               func(childComplexity int) int
		MercariCrawlSettingID func(childComplexity int) int
		UpdatedAt             func(childComplexity int) int
	}

	MercariDailyPurchaseSummary struct {
		AveragePurchasePrice func(childComplexity int) int
		CreatedAt            func(childComplexity int) int
		Date                 func(childComplexity int) int
		ID                   func(childComplexity int) int
		ProductID            func(childComplexity int) int
		PurchaseCount        func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
	}

	MercariProduct struct {
		BoughtDate   func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		ID           func(childComplexity int) int
		MercariID    func(childComplexity int) int
		Name         func(childComplexity int) int
		Price        func(childComplexity int) int
		ProductID    func(childComplexity int) int
		Published    func(childComplexity int) int
		ThumbnailURL func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
	}

	Mutation struct {
		CreateIosysCrawlSettingExcludeKeyword         func(childComplexity int, input model.CreateIosysCrawlSettingExcludeKeywordInput) int
		CreateIosysCrawlSettingExcludeProduct         func(childComplexity int, input model.CreateIosysCrawlSettingExcludeProductInput) int
		CreateIosysCrawlSettingRequiredKeyword        func(childComplexity int, input model.CreateIosysCrawlSettingRequiredKeywordInput) int
		CreateJanparaCrawlSettingExcludeKeyword       func(childComplexity int, input model.CreateJanparaCrawlSettingExcludeKeywordInput) int
		CreateJanparaCrawlSettingExcludeProduct       func(childComplexity int, input model.CreateJanparaCrawlSettingExcludeProductInput) int
		CreateJanparaCrawlSettingRequiredKeyword      func(childComplexity int, input model.CreateJanparaCrawlSettingRequiredKeywordInput) int
		CreateMercariCrawlSettingExcludeKeyword       func(childComplexity int, input model.CreateMercariCrawlSettingExcludeKeywordInput) int
		CreateMercariCrawlSettingExcludeProduct       func(childComplexity int, input model.CreateMercariCrawlSettingExcludeProductInput) int
		CreateMercariCrawlSettingRequiredKeyword      func(childComplexity int, input model.CreateMercariCrawlSettingRequiredKeywordInput) int
		CreatePcKoubouCrawlSettingExcludeKeyword      func(childComplexity int, input model.CreatePcKoubouCrawlSettingExcludeKeywordInput) int
		CreatePcKoubouCrawlSettingExcludeProduct      func(childComplexity int, input model.CreatePcKoubouCrawlSettingExcludeProductInput) int
		CreatePcKoubouCrawlSettingRequiredKeyword     func(childComplexity int, input model.CreatePcKoubouCrawlSettingRequiredKeywordInput) int
		CreateProduct                                 func(childComplexity int, input model.CreateProductInput) int
		CreateYahooAuctionCrawlSettingExcludeKeyword  func(childComplexity int, input model.CreateYahooAuctionCrawlSettingExcludeKeywordInput) int
		CreateYahooAuctionCrawlSettingExcludeProduct  func(childComplexity int, input model.CreateYahooAuctionCrawlSettingExcludeProductInput) int
		CreateYahooAuctionCrawlSettingRequiredKeyword func(childComplexity int, input model.CreateYahooAuctionCrawlSettingRequiredKeywordInput) int
		DeleteIosysCrawlSettingExcludeKeyword         func(childComplexity int, id string, productID string) int
		DeleteIosysCrawlSettingExcludeProduct         func(childComplexity int, id string, productID string) int
		DeleteIosysCrawlSettingRequiredKeyword        func(childComplexity int, id string, productID string) int
		DeleteJanparaCrawlSettingExcludeKeyword       func(childComplexity int, id string, productID string) int
		DeleteJanparaCrawlSettingExcludeProduct       func(childComplexity int, id string, productID string) int
		DeleteJanparaCrawlSettingRequiredKeyword      func(childComplexity int, id string, productID string) int
		DeleteMercariCrawlSettingExcludeKeyword       func(childComplexity int, id string, productID string) int
		DeleteMercariCrawlSettingExcludeProduct       func(childComplexity int, id string, productID string) int
		DeleteMercariCrawlSettingRequiredKeyword      func(childComplexity int, id string, productID string) int
		DeletePcKoubouCrawlSettingExcludeKeyword      func(childComplexity int, id string, productID string) int
		DeletePcKoubouCrawlSettingExcludeProduct      func(childComplexity int, id string, productID string) int
		DeletePcKoubouCrawlSettingRequiredKeyword     func(childComplexity int, id string, productID string) int
		DeleteProduct                                 func(childComplexity int, id string) int
		DeleteYahooAuctionCrawlSettingExcludeKeyword  func(childComplexity int, id string, productID string) int
		DeleteYahooAuctionCrawlSettingExcludeProduct  func(childComplexity int, id string, productID string) int
		DeleteYahooAuctionCrawlSettingRequiredKeyword func(childComplexity int, id string, productID string) int
		UpdateIosysCrawlSettingExcludeKeyword         func(childComplexity int, input model.UpdateIosysCrawlSettingExcludeKeywordInput) int
		UpdateIosysCrawlSettingExcludeProduct         func(childComplexity int, input model.UpdateIosysCrawlSettingExcludeProductInput) int
		UpdateIosysCrawlSettingRequiredKeyword        func(childComplexity int, input model.UpdateIosysCrawlSettingRequiredKeywordInput) int
		UpdateJanparaCrawlSettingExcludeKeyword       func(childComplexity int, input model.UpdateJanparaCrawlSettingExcludeKeywordInput) int
		UpdateJanparaCrawlSettingExcludeProduct       func(childComplexity int, input model.UpdateJanparaCrawlSettingExcludeProductInput) int
		UpdateJanparaCrawlSettingRequiredKeyword      func(childComplexity int, input model.UpdateJanparaCrawlSettingRequiredKeywordInput) int
		UpdateMercariCrawlSettingExcludeKeyword       func(childComplexity int, input model.UpdateMercariCrawlSettingExcludeKeywordInput) int
		UpdateMercariCrawlSettingExcludeProduct       func(childComplexity int, input model.UpdateMercariCrawlSettingExcludeProductInput) int
		UpdateMercariCrawlSettingRequiredKeyword      func(childComplexity int, input model.UpdateMercariCrawlSettingRequiredKeywordInput) int
		UpdatePcKoubouCrawlSettingExcludeKeyword      func(childComplexity int, input model.UpdatePcKoubouCrawlSettingExcludeKeywordInput) int
		UpdatePcKoubouCrawlSettingExcludeProduct      func(childComplexity int, input model.UpdatePcKoubouCrawlSettingExcludeProductInput) int
		UpdatePcKoubouCrawlSettingRequiredKeyword     func(childComplexity int, input model.UpdatePcKoubouCrawlSettingRequiredKeywordInput) int
		UpdateProduct                                 func(childComplexity int, id string, input model.UpdateProductInput) int
		UpdateYahooAuctionCrawlSettingExcludeKeyword  func(childComplexity int, input model.UpdateYahooAuctionCrawlSettingExcludeKeywordInput) int
		UpdateYahooAuctionCrawlSettingExcludeProduct  func(childComplexity int, input model.UpdateYahooAuctionCrawlSettingExcludeProductInput) int
		UpdateYahooAuctionCrawlSettingRequiredKeyword func(childComplexity int, input model.UpdateYahooAuctionCrawlSettingRequiredKeywordInput) int
	}

	PcKoubouCrawlSetting struct {
		CreatedAt                            func(childComplexity int) int
		Enabled                              func(childComplexity int) int
		ID                                   func(childComplexity int) int
		Keyword                              func(childComplexity int) int
		MaxPrice                             func(childComplexity int) int
		MinPrice                             func(childComplexity int) int
		PcKoubouCrawlSettingExcludeKeywords  func(childComplexity int) int
		PcKoubouCrawlSettingExcludeProducts  func(childComplexity int) int
		PcKoubouCrawlSettingRequiredKeywords func(childComplexity int) int
		ProductID                            func(childComplexity int) int
		UpdatedAt                            func(childComplexity int) int
	}

	PcKoubouCrawlSettingExcludeKeyword struct {
		CreatedAt              func(childComplexity int) int
		ID                     func(childComplexity int) int
		Keyword                func(childComplexity int) int
		PcKoubouCrawlSettingID func(childComplexity int) int
		UpdatedAt              func(childComplexity int) int
	}

	PcKoubouCrawlSettingExcludeProduct struct {
		CreatedAt              func(childComplexity int) int
		ExternalID             func(childComplexity int) int
		ID                     func(childComplexity int) int
		PcKoubouCrawlSettingID func(childComplexity int) int
		UpdatedAt              func(childComplexity int) int
	}

	PcKoubouCrawlSettingRequiredKeyword struct {
		CreatedAt              func(childComplexity int) int
		ID                     func(childComplexity int) int
		Keyword                func(childComplexity int) int
		PcKoubouCrawlSettingID func(childComplexity int) int
		UpdatedAt              func(childComplexity int) int
	}

	Product struct {
		ID                                    func(childComplexity int) int
		IosysCrawlSetting                     func(childComplexity int) int
		JanparaCrawlSetting                   func(childComplexity int) int
		MercariCrawlSetting                   func(childComplexity int) int
		MercariDailyPurchaseSummaries         func(childComplexity int) int
		MercariProducts                       func(childComplexity int, published *bool, sort *string, order *string) int
		Name                                  func(childComplexity int) int
		PcKoubouCrawlSetting                  func(childComplexity int) int
		RelatedProducts                       func(childComplexity int, platformMask string, page *int, per *int, sort *string, order *string) int
		YahooAuctionCrawlSetting              func(childComplexity int) int
		YahooAuctionDailyPurchaseSummaries    func(childComplexity int) int
		YahooAuctionProducts                  func(childComplexity int, published *bool, sort *string, order *string) int
		YahooFleamarketDailyPurchaseSummaries func(childComplexity int) int
	}

	Query struct {
		Node     func(childComplexity int, id string) int
		Product  func(childComplexity int, id string) int
		Products func(childComplexity int, id *string, name *string) int
	}

	RelatedProduct struct {
		BoughtDate   func(childComplexity int) int
		BuyoutPrice  func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		EndDate      func(childComplexity int) int
		ExternalID   func(childComplexity int) int
		Name         func(childComplexity int) int
		Platform     func(childComplexity int) int
		Price        func(childComplexity int) int
		ProductID    func(childComplexity int) int
		Published    func(childComplexity int) int
		ThumbnailURL func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
	}

	UpdateIosysCrawlSettingExcludeKeywordResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	UpdateIosysCrawlSettingExcludeKeywordResultSuccess struct {
		IosysCrawlSettingExcludeKeyword func(childComplexity int) int
		Ok                              func(childComplexity int) int
	}

	UpdateIosysCrawlSettingExcludeKeywordResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	UpdateIosysCrawlSettingExcludeProductResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	UpdateIosysCrawlSettingExcludeProductResultSuccess struct {
		IosysCrawlSettingExcludeProduct func(childComplexity int) int
		Ok                              func(childComplexity int) int
	}

	UpdateIosysCrawlSettingExcludeProductResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	UpdateIosysCrawlSettingRequiredKeywordResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	UpdateIosysCrawlSettingRequiredKeywordResultSuccess struct {
		IosysCrawlSettingRequiredKeyword func(childComplexity int) int
		Ok                               func(childComplexity int) int
	}

	UpdateIosysCrawlSettingRequiredKeywordResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	UpdateJanparaCrawlSettingExcludeKeywordResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	UpdateJanparaCrawlSettingExcludeKeywordResultSuccess struct {
		JanparaCrawlSettingExcludeKeyword func(childComplexity int) int
		Ok                                func(childComplexity int) int
	}

	UpdateJanparaCrawlSettingExcludeKeywordResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	UpdateJanparaCrawlSettingExcludeProductResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	UpdateJanparaCrawlSettingExcludeProductResultSuccess struct {
		JanparaCrawlSettingExcludeProduct func(childComplexity int) int
		Ok                                func(childComplexity int) int
	}

	UpdateJanparaCrawlSettingExcludeProductResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	UpdateJanparaCrawlSettingRequiredKeywordResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	UpdateJanparaCrawlSettingRequiredKeywordResultSuccess struct {
		JanparaCrawlSettingRequiredKeyword func(childComplexity int) int
		Ok                                 func(childComplexity int) int
	}

	UpdateJanparaCrawlSettingRequiredKeywordResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	UpdateMercariCrawlSettingExcludeKeywordResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	UpdateMercariCrawlSettingExcludeKeywordResultSuccess struct {
		MercariCrawlSettingExcludeKeyword func(childComplexity int) int
		Ok                                func(childComplexity int) int
	}

	UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	UpdateMercariCrawlSettingExcludeProductResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	UpdateMercariCrawlSettingExcludeProductResultSuccess struct {
		MercariCrawlSettingExcludeProduct func(childComplexity int) int
		Ok                                func(childComplexity int) int
	}

	UpdateMercariCrawlSettingExcludeProductResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	UpdateMercariCrawlSettingRequiredKeywordResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	UpdateMercariCrawlSettingRequiredKeywordResultSuccess struct {
		MercariCrawlSettingRequiredKeyword func(childComplexity int) int
		Ok                                 func(childComplexity int) int
	}

	UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	UpdatePcKoubouCrawlSettingExcludeKeywordResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	UpdatePcKoubouCrawlSettingExcludeKeywordResultSuccess struct {
		Ok                                 func(childComplexity int) int
		PcKoubouCrawlSettingExcludeKeyword func(childComplexity int) int
	}

	UpdatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	UpdatePcKoubouCrawlSettingExcludeProductResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	UpdatePcKoubouCrawlSettingExcludeProductResultSuccess struct {
		Ok                                 func(childComplexity int) int
		PcKoubouCrawlSettingExcludeProduct func(childComplexity int) int
	}

	UpdatePcKoubouCrawlSettingExcludeProductResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	UpdatePcKoubouCrawlSettingRequiredKeywordResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	UpdatePcKoubouCrawlSettingRequiredKeywordResultSuccess struct {
		Ok                                  func(childComplexity int) int
		PcKoubouCrawlSettingRequiredKeyword func(childComplexity int) int
	}

	UpdatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	UpdateProductResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	UpdateProductResultSuccess struct {
		Ok      func(childComplexity int) int
		Product func(childComplexity int) int
	}

	UpdateProductResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	UpdateYahooAuctionCrawlSettingExcludeKeywordResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess struct {
		Ok                                     func(childComplexity int) int
		YahooAuctionCrawlSettingExcludeKeyword func(childComplexity int) int
	}

	UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	UpdateYahooAuctionCrawlSettingExcludeProductResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	UpdateYahooAuctionCrawlSettingExcludeProductResultSuccess struct {
		Ok                                     func(childComplexity int) int
		YahooAuctionCrawlSettingExcludeProduct func(childComplexity int) int
	}

	UpdateYahooAuctionCrawlSettingExcludeProductResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	UpdateYahooAuctionCrawlSettingRequiredKeywordResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess struct {
		Ok                                      func(childComplexity int) int
		YahooAuctionCrawlSettingRequiredKeyword func(childComplexity int) int
	}

	UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	YahooAuctionCrawlSetting struct {
		CategoryID                               func(childComplexity int) int
		CreatedAt                                func(childComplexity int) int
		Enabled                                  func(childComplexity int) int
		ID                                       func(childComplexity int) int
		Keyword                                  func(childComplexity int) int
		MaxPrice                                 func(childComplexity int) int
		MinPrice                                 func(childComplexity int) int
		ProductID                                func(childComplexity int) int
		UpdatedAt                                func(childComplexity int) int
		YahooAuctionCrawlSettingExcludeKeywords  func(childComplexity int) int
		YahooAuctionCrawlSettingExcludeProducts  func(childComplexity int) int
		YahooAuctionCrawlSettingRequiredKeywords func(childComplexity int) int
	}

	YahooAuctionCrawlSettingExcludeKeyword struct {
		CreatedAt                  func(childComplexity int) int
		ID                         func(childComplexity int) int
		Keyword                    func(childComplexity int) int
		UpdatedAt                  func(childComplexity int) int
		YahooAuctionCrawlSettingID func(childComplexity int) int
	}

	YahooAuctionCrawlSettingExcludeProduct struct {
		CreatedAt                  func(childComplexity int) int
		ExternalID                 func(childComplexity int) int
		ID                         func(childComplexity int) int
		UpdatedAt                  func(childComplexity int) int
		YahooAuctionCrawlSettingID func(childComplexity int) int
	}

	YahooAuctionCrawlSettingRequiredKeyword struct {
		CreatedAt                  func(childComplexity int) int
		ID                         func(childComplexity int) int
		Keyword                    func(childComplexity int) int
		UpdatedAt                  func(childComplexity int) int
		YahooAuctionCrawlSettingID func(childComplexity int) int
	}

	YahooAuctionDailyPurchaseSummary struct {
		AveragePurchasePrice func(childComplexity int) int
		CreatedAt            func(childComplexity int) int
		Date                 func(childComplexity int) int
		ID                   func(childComplexity int) int
		ProductID            func(childComplexity int) int
		PurchaseCount        func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
	}

	YahooAuctionProduct struct {
		BoughtDate     func(childComplexity int) int
		CreatedAt      func(childComplexity int) int
		ID             func(childComplexity int) int
		Name           func(childComplexity int) int
		Price          func(childComplexity int) int
		ProductID      func(childComplexity int) int
		Published      func(childComplexity int) int
		ThumbnailURL   func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
		YahooAuctionID func(childComplexity int) int
	}

	YahooFleamarketDailyPurchaseSummary struct {
		AveragePurchasePrice func(childComplexity int) int
		CreatedAt            func(childComplexity int) int
		Date                 func(childComplexity int) int
		ID                   func(childComplexity int) int
		ProductID            func(childComplexity int) int
		PurchaseCount        func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
	}
}

type IosysCrawlSettingResolver interface {
	IosysCrawlSettingExcludeKeywords(ctx context.Context, obj *model.IosysCrawlSetting) ([]*model.IosysCrawlSettingExcludeKeyword, error)
	IosysCrawlSettingExcludeProducts(ctx context.Context, obj *model.IosysCrawlSetting) ([]*model.IosysCrawlSettingExcludeProduct, error)
	IosysCrawlSettingRequiredKeywords(ctx context.Context, obj *model.IosysCrawlSetting) ([]*model.IosysCrawlSettingRequiredKeyword, error)
}
type JanparaCrawlSettingResolver interface {
	JanparaCrawlSettingExcludeKeywords(ctx context.Context, obj *model.JanparaCrawlSetting) ([]*model.JanparaCrawlSettingExcludeKeyword, error)
	JanparaCrawlSettingExcludeProducts(ctx context.Context, obj *model.JanparaCrawlSetting) ([]*model.JanparaCrawlSettingExcludeProduct, error)
	JanparaCrawlSettingRequiredKeywords(ctx context.Context, obj *model.JanparaCrawlSetting) ([]*model.JanparaCrawlSettingRequiredKeyword, error)
}
type MercariCrawlSettingResolver interface {
	MercariCrawlSettingExcludeKeywords(ctx context.Context, obj *model.MercariCrawlSetting) ([]*model.MercariCrawlSettingExcludeKeyword, error)
	MercariCrawlSettingExcludeProducts(ctx context.Context, obj *model.MercariCrawlSetting) ([]*model.MercariCrawlSettingExcludeProduct, error)
	MercariCrawlSettingRequiredKeywords(ctx context.Context, obj *model.MercariCrawlSetting) ([]*model.MercariCrawlSettingRequiredKeyword, error)
}
type MutationResolver interface {
	CreateProduct(ctx context.Context, input model.CreateProductInput) (model.CreateProductResult, error)
	UpdateProduct(ctx context.Context, id string, input model.UpdateProductInput) (model.UpdateProductResult, error)
	DeleteProduct(ctx context.Context, id string) (model.DeleteProductResult, error)
	CreateYahooAuctionCrawlSettingExcludeKeyword(ctx context.Context, input model.CreateYahooAuctionCrawlSettingExcludeKeywordInput) (model.CreateYahooAuctionCrawlSettingExcludeKeywordResult, error)
	UpdateYahooAuctionCrawlSettingExcludeKeyword(ctx context.Context, input model.UpdateYahooAuctionCrawlSettingExcludeKeywordInput) (model.UpdateYahooAuctionCrawlSettingExcludeKeywordResult, error)
	DeleteYahooAuctionCrawlSettingExcludeKeyword(ctx context.Context, id string, productID string) (model.DeleteYahooAuctionCrawlSettingExcludeKeywordResult, error)
	CreateYahooAuctionCrawlSettingExcludeProduct(ctx context.Context, input model.CreateYahooAuctionCrawlSettingExcludeProductInput) (model.CreateYahooAuctionCrawlSettingExcludeProductResult, error)
	UpdateYahooAuctionCrawlSettingExcludeProduct(ctx context.Context, input model.UpdateYahooAuctionCrawlSettingExcludeProductInput) (model.UpdateYahooAuctionCrawlSettingExcludeProductResult, error)
	DeleteYahooAuctionCrawlSettingExcludeProduct(ctx context.Context, id string, productID string) (model.DeleteYahooAuctionCrawlSettingExcludeProductResult, error)
	CreateYahooAuctionCrawlSettingRequiredKeyword(ctx context.Context, input model.CreateYahooAuctionCrawlSettingRequiredKeywordInput) (model.CreateYahooAuctionCrawlSettingRequiredKeywordResult, error)
	UpdateYahooAuctionCrawlSettingRequiredKeyword(ctx context.Context, input model.UpdateYahooAuctionCrawlSettingRequiredKeywordInput) (model.UpdateYahooAuctionCrawlSettingRequiredKeywordResult, error)
	DeleteYahooAuctionCrawlSettingRequiredKeyword(ctx context.Context, id string, productID string) (model.DeleteYahooAuctionCrawlSettingRequiredKeywordResult, error)
	CreateMercariCrawlSettingExcludeKeyword(ctx context.Context, input model.CreateMercariCrawlSettingExcludeKeywordInput) (model.CreateMercariCrawlSettingExcludeKeywordResult, error)
	UpdateMercariCrawlSettingExcludeKeyword(ctx context.Context, input model.UpdateMercariCrawlSettingExcludeKeywordInput) (model.UpdateMercariCrawlSettingExcludeKeywordResult, error)
	DeleteMercariCrawlSettingExcludeKeyword(ctx context.Context, id string, productID string) (model.DeleteMercariCrawlSettingExcludeKeywordResult, error)
	CreateMercariCrawlSettingExcludeProduct(ctx context.Context, input model.CreateMercariCrawlSettingExcludeProductInput) (model.CreateMercariCrawlSettingExcludeProductResult, error)
	UpdateMercariCrawlSettingExcludeProduct(ctx context.Context, input model.UpdateMercariCrawlSettingExcludeProductInput) (model.UpdateMercariCrawlSettingExcludeProductResult, error)
	DeleteMercariCrawlSettingExcludeProduct(ctx context.Context, id string, productID string) (model.DeleteMercariCrawlSettingExcludeProductResult, error)
	CreateMercariCrawlSettingRequiredKeyword(ctx context.Context, input model.CreateMercariCrawlSettingRequiredKeywordInput) (model.CreateMercariCrawlSettingRequiredKeywordResult, error)
	UpdateMercariCrawlSettingRequiredKeyword(ctx context.Context, input model.UpdateMercariCrawlSettingRequiredKeywordInput) (model.UpdateMercariCrawlSettingRequiredKeywordResult, error)
	DeleteMercariCrawlSettingRequiredKeyword(ctx context.Context, id string, productID string) (model.DeleteMercariCrawlSettingRequiredKeywordResult, error)
	CreateJanparaCrawlSettingExcludeKeyword(ctx context.Context, input model.CreateJanparaCrawlSettingExcludeKeywordInput) (model.CreateJanparaCrawlSettingExcludeKeywordResult, error)
	UpdateJanparaCrawlSettingExcludeKeyword(ctx context.Context, input model.UpdateJanparaCrawlSettingExcludeKeywordInput) (model.UpdateJanparaCrawlSettingExcludeKeywordResult, error)
	DeleteJanparaCrawlSettingExcludeKeyword(ctx context.Context, id string, productID string) (model.DeleteJanparaCrawlSettingExcludeKeywordResult, error)
	CreateJanparaCrawlSettingExcludeProduct(ctx context.Context, input model.CreateJanparaCrawlSettingExcludeProductInput) (model.CreateJanparaCrawlSettingExcludeProductResult, error)
	UpdateJanparaCrawlSettingExcludeProduct(ctx context.Context, input model.UpdateJanparaCrawlSettingExcludeProductInput) (model.UpdateJanparaCrawlSettingExcludeProductResult, error)
	DeleteJanparaCrawlSettingExcludeProduct(ctx context.Context, id string, productID string) (model.DeleteJanparaCrawlSettingExcludeProductResult, error)
	CreateJanparaCrawlSettingRequiredKeyword(ctx context.Context, input model.CreateJanparaCrawlSettingRequiredKeywordInput) (model.CreateJanparaCrawlSettingRequiredKeywordResult, error)
	UpdateJanparaCrawlSettingRequiredKeyword(ctx context.Context, input model.UpdateJanparaCrawlSettingRequiredKeywordInput) (model.UpdateJanparaCrawlSettingRequiredKeywordResult, error)
	DeleteJanparaCrawlSettingRequiredKeyword(ctx context.Context, id string, productID string) (model.DeleteJanparaCrawlSettingRequiredKeywordResult, error)
	CreateIosysCrawlSettingExcludeKeyword(ctx context.Context, input model.CreateIosysCrawlSettingExcludeKeywordInput) (model.CreateIosysCrawlSettingExcludeKeywordResult, error)
	UpdateIosysCrawlSettingExcludeKeyword(ctx context.Context, input model.UpdateIosysCrawlSettingExcludeKeywordInput) (model.UpdateIosysCrawlSettingExcludeKeywordResult, error)
	DeleteIosysCrawlSettingExcludeKeyword(ctx context.Context, id string, productID string) (model.DeleteIosysCrawlSettingExcludeKeywordResult, error)
	CreateIosysCrawlSettingExcludeProduct(ctx context.Context, input model.CreateIosysCrawlSettingExcludeProductInput) (model.CreateIosysCrawlSettingExcludeProductResult, error)
	UpdateIosysCrawlSettingExcludeProduct(ctx context.Context, input model.UpdateIosysCrawlSettingExcludeProductInput) (model.UpdateIosysCrawlSettingExcludeProductResult, error)
	DeleteIosysCrawlSettingExcludeProduct(ctx context.Context, id string, productID string) (model.DeleteIosysCrawlSettingExcludeProductResult, error)
	CreateIosysCrawlSettingRequiredKeyword(ctx context.Context, input model.CreateIosysCrawlSettingRequiredKeywordInput) (model.CreateIosysCrawlSettingRequiredKeywordResult, error)
	UpdateIosysCrawlSettingRequiredKeyword(ctx context.Context, input model.UpdateIosysCrawlSettingRequiredKeywordInput) (model.UpdateIosysCrawlSettingRequiredKeywordResult, error)
	DeleteIosysCrawlSettingRequiredKeyword(ctx context.Context, id string, productID string) (model.DeleteIosysCrawlSettingRequiredKeywordResult, error)
	CreatePcKoubouCrawlSettingExcludeKeyword(ctx context.Context, input model.CreatePcKoubouCrawlSettingExcludeKeywordInput) (model.CreatePcKoubouCrawlSettingExcludeKeywordResult, error)
	UpdatePcKoubouCrawlSettingExcludeKeyword(ctx context.Context, input model.UpdatePcKoubouCrawlSettingExcludeKeywordInput) (model.UpdatePcKoubouCrawlSettingExcludeKeywordResult, error)
	DeletePcKoubouCrawlSettingExcludeKeyword(ctx context.Context, id string, productID string) (model.DeletePcKoubouCrawlSettingExcludeKeywordResult, error)
	CreatePcKoubouCrawlSettingExcludeProduct(ctx context.Context, input model.CreatePcKoubouCrawlSettingExcludeProductInput) (model.CreatePcKoubouCrawlSettingExcludeProductResult, error)
	UpdatePcKoubouCrawlSettingExcludeProduct(ctx context.Context, input model.UpdatePcKoubouCrawlSettingExcludeProductInput) (model.UpdatePcKoubouCrawlSettingExcludeProductResult, error)
	DeletePcKoubouCrawlSettingExcludeProduct(ctx context.Context, id string, productID string) (model.DeletePcKoubouCrawlSettingExcludeProductResult, error)
	CreatePcKoubouCrawlSettingRequiredKeyword(ctx context.Context, input model.CreatePcKoubouCrawlSettingRequiredKeywordInput) (model.CreatePcKoubouCrawlSettingRequiredKeywordResult, error)
	UpdatePcKoubouCrawlSettingRequiredKeyword(ctx context.Context, input model.UpdatePcKoubouCrawlSettingRequiredKeywordInput) (model.UpdatePcKoubouCrawlSettingRequiredKeywordResult, error)
	DeletePcKoubouCrawlSettingRequiredKeyword(ctx context.Context, id string, productID string) (model.DeletePcKoubouCrawlSettingRequiredKeywordResult, error)
}
type PcKoubouCrawlSettingResolver interface {
	PcKoubouCrawlSettingExcludeKeywords(ctx context.Context, obj *model.PcKoubouCrawlSetting) ([]*model.PcKoubouCrawlSettingExcludeKeyword, error)
	PcKoubouCrawlSettingExcludeProducts(ctx context.Context, obj *model.PcKoubouCrawlSetting) ([]*model.PcKoubouCrawlSettingExcludeProduct, error)
	PcKoubouCrawlSettingRequiredKeywords(ctx context.Context, obj *model.PcKoubouCrawlSetting) ([]*model.PcKoubouCrawlSettingRequiredKeyword, error)
}
type ProductResolver interface {
	YahooAuctionProducts(ctx context.Context, obj *model.Product, published *bool, sort *string, order *string) ([]*model.YahooAuctionProduct, error)
	YahooAuctionCrawlSetting(ctx context.Context, obj *model.Product) (*model.YahooAuctionCrawlSetting, error)
	YahooAuctionDailyPurchaseSummaries(ctx context.Context, obj *model.Product) ([]*model.YahooAuctionDailyPurchaseSummary, error)
	YahooFleamarketDailyPurchaseSummaries(ctx context.Context, obj *model.Product) ([]*model.YahooFleamarketDailyPurchaseSummary, error)
	MercariProducts(ctx context.Context, obj *model.Product, published *bool, sort *string, order *string) ([]*model.MercariProduct, error)
	MercariCrawlSetting(ctx context.Context, obj *model.Product) (*model.MercariCrawlSetting, error)
	MercariDailyPurchaseSummaries(ctx context.Context, obj *model.Product) ([]*model.MercariDailyPurchaseSummary, error)
	JanparaCrawlSetting(ctx context.Context, obj *model.Product) (*model.JanparaCrawlSetting, error)
	IosysCrawlSetting(ctx context.Context, obj *model.Product) (*model.IosysCrawlSetting, error)
	PcKoubouCrawlSetting(ctx context.Context, obj *model.Product) (*model.PcKoubouCrawlSetting, error)
	RelatedProducts(ctx context.Context, obj *model.Product, platformMask string, page *int, per *int, sort *string, order *string) ([]*model.RelatedProduct, error)
}
type QueryResolver interface {
	Product(ctx context.Context, id string) (*model.Product, error)
	Products(ctx context.Context, id *string, name *string) ([]*model.Product, error)
	Node(ctx context.Context, id string) (model.Node, error)
}
type YahooAuctionCrawlSettingResolver interface {
	YahooAuctionCrawlSettingExcludeKeywords(ctx context.Context, obj *model.YahooAuctionCrawlSetting) ([]*model.YahooAuctionCrawlSettingExcludeKeyword, error)
	YahooAuctionCrawlSettingExcludeProducts(ctx context.Context, obj *model.YahooAuctionCrawlSetting) ([]*model.YahooAuctionCrawlSettingExcludeProduct, error)
	YahooAuctionCrawlSettingRequiredKeywords(ctx context.Context, obj *model.YahooAuctionCrawlSetting) ([]*model.YahooAuctionCrawlSettingRequiredKeyword, error)
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "CreateIosysCrawlSettingExcludeKeywordResultError.error":
		if e.complexity.CreateIosysCrawlSettingExcludeKeywordResultError.Error == nil {
			break
		}

		return e.complexity.CreateIosysCrawlSettingExcludeKeywordResultError.Error(childComplexity), true

	case "CreateIosysCrawlSettingExcludeKeywordResultError.ok":
		if e.complexity.CreateIosysCrawlSettingExcludeKeywordResultError.Ok == nil {
			break
		}

		return e.complexity.CreateIosysCrawlSettingExcludeKeywordResultError.Ok(childComplexity), true

	case "CreateIosysCrawlSettingExcludeKeywordResultSuccess.iosysCrawlSettingExcludeKeyword":
		if e.complexity.CreateIosysCrawlSettingExcludeKeywordResultSuccess.IosysCrawlSettingExcludeKeyword == nil {
			break
		}

		return e.complexity.CreateIosysCrawlSettingExcludeKeywordResultSuccess.IosysCrawlSettingExcludeKeyword(childComplexity), true

	case "CreateIosysCrawlSettingExcludeKeywordResultSuccess.ok":
		if e.complexity.CreateIosysCrawlSettingExcludeKeywordResultSuccess.Ok == nil {
			break
		}

		return e.complexity.CreateIosysCrawlSettingExcludeKeywordResultSuccess.Ok(childComplexity), true

	case "CreateIosysCrawlSettingExcludeKeywordResultValidationFailed.code":
		if e.complexity.CreateIosysCrawlSettingExcludeKeywordResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.CreateIosysCrawlSettingExcludeKeywordResultValidationFailed.Code(childComplexity), true

	case "CreateIosysCrawlSettingExcludeKeywordResultValidationFailed.details":
		if e.complexity.CreateIosysCrawlSettingExcludeKeywordResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.CreateIosysCrawlSettingExcludeKeywordResultValidationFailed.Details(childComplexity), true

	case "CreateIosysCrawlSettingExcludeKeywordResultValidationFailed.message":
		if e.complexity.CreateIosysCrawlSettingExcludeKeywordResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.CreateIosysCrawlSettingExcludeKeywordResultValidationFailed.Message(childComplexity), true

	case "CreateIosysCrawlSettingExcludeProductResultError.error":
		if e.complexity.CreateIosysCrawlSettingExcludeProductResultError.Error == nil {
			break
		}

		return e.complexity.CreateIosysCrawlSettingExcludeProductResultError.Error(childComplexity), true

	case "CreateIosysCrawlSettingExcludeProductResultError.ok":
		if e.complexity.CreateIosysCrawlSettingExcludeProductResultError.Ok == nil {
			break
		}

		return e.complexity.CreateIosysCrawlSettingExcludeProductResultError.Ok(childComplexity), true

	case "CreateIosysCrawlSettingExcludeProductResultSuccess.iosysCrawlSettingExcludeProduct":
		if e.complexity.CreateIosysCrawlSettingExcludeProductResultSuccess.IosysCrawlSettingExcludeProduct == nil {
			break
		}

		return e.complexity.CreateIosysCrawlSettingExcludeProductResultSuccess.IosysCrawlSettingExcludeProduct(childComplexity), true

	case "CreateIosysCrawlSettingExcludeProductResultSuccess.ok":
		if e.complexity.CreateIosysCrawlSettingExcludeProductResultSuccess.Ok == nil {
			break
		}

		return e.complexity.CreateIosysCrawlSettingExcludeProductResultSuccess.Ok(childComplexity), true

	case "CreateIosysCrawlSettingExcludeProductResultValidationFailed.code":
		if e.complexity.CreateIosysCrawlSettingExcludeProductResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.CreateIosysCrawlSettingExcludeProductResultValidationFailed.Code(childComplexity), true

	case "CreateIosysCrawlSettingExcludeProductResultValidationFailed.details":
		if e.complexity.CreateIosysCrawlSettingExcludeProductResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.CreateIosysCrawlSettingExcludeProductResultValidationFailed.Details(childComplexity), true

	case "CreateIosysCrawlSettingExcludeProductResultValidationFailed.message":
		if e.complexity.CreateIosysCrawlSettingExcludeProductResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.CreateIosysCrawlSettingExcludeProductResultValidationFailed.Message(childComplexity), true

	case "CreateIosysCrawlSettingRequiredKeywordResultError.error":
		if e.complexity.CreateIosysCrawlSettingRequiredKeywordResultError.Error == nil {
			break
		}

		return e.complexity.CreateIosysCrawlSettingRequiredKeywordResultError.Error(childComplexity), true

	case "CreateIosysCrawlSettingRequiredKeywordResultError.ok":
		if e.complexity.CreateIosysCrawlSettingRequiredKeywordResultError.Ok == nil {
			break
		}

		return e.complexity.CreateIosysCrawlSettingRequiredKeywordResultError.Ok(childComplexity), true

	case "CreateIosysCrawlSettingRequiredKeywordResultSuccess.iosysCrawlSettingRequiredKeyword":
		if e.complexity.CreateIosysCrawlSettingRequiredKeywordResultSuccess.IosysCrawlSettingRequiredKeyword == nil {
			break
		}

		return e.complexity.CreateIosysCrawlSettingRequiredKeywordResultSuccess.IosysCrawlSettingRequiredKeyword(childComplexity), true

	case "CreateIosysCrawlSettingRequiredKeywordResultSuccess.ok":
		if e.complexity.CreateIosysCrawlSettingRequiredKeywordResultSuccess.Ok == nil {
			break
		}

		return e.complexity.CreateIosysCrawlSettingRequiredKeywordResultSuccess.Ok(childComplexity), true

	case "CreateIosysCrawlSettingRequiredKeywordResultValidationFailed.code":
		if e.complexity.CreateIosysCrawlSettingRequiredKeywordResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.CreateIosysCrawlSettingRequiredKeywordResultValidationFailed.Code(childComplexity), true

	case "CreateIosysCrawlSettingRequiredKeywordResultValidationFailed.details":
		if e.complexity.CreateIosysCrawlSettingRequiredKeywordResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.CreateIosysCrawlSettingRequiredKeywordResultValidationFailed.Details(childComplexity), true

	case "CreateIosysCrawlSettingRequiredKeywordResultValidationFailed.message":
		if e.complexity.CreateIosysCrawlSettingRequiredKeywordResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.CreateIosysCrawlSettingRequiredKeywordResultValidationFailed.Message(childComplexity), true

	case "CreateJanparaCrawlSettingExcludeKeywordResultError.error":
		if e.complexity.CreateJanparaCrawlSettingExcludeKeywordResultError.Error == nil {
			break
		}

		return e.complexity.CreateJanparaCrawlSettingExcludeKeywordResultError.Error(childComplexity), true

	case "CreateJanparaCrawlSettingExcludeKeywordResultError.ok":
		if e.complexity.CreateJanparaCrawlSettingExcludeKeywordResultError.Ok == nil {
			break
		}

		return e.complexity.CreateJanparaCrawlSettingExcludeKeywordResultError.Ok(childComplexity), true

	case "CreateJanparaCrawlSettingExcludeKeywordResultSuccess.janparaCrawlSettingExcludeKeyword":
		if e.complexity.CreateJanparaCrawlSettingExcludeKeywordResultSuccess.JanparaCrawlSettingExcludeKeyword == nil {
			break
		}

		return e.complexity.CreateJanparaCrawlSettingExcludeKeywordResultSuccess.JanparaCrawlSettingExcludeKeyword(childComplexity), true

	case "CreateJanparaCrawlSettingExcludeKeywordResultSuccess.ok":
		if e.complexity.CreateJanparaCrawlSettingExcludeKeywordResultSuccess.Ok == nil {
			break
		}

		return e.complexity.CreateJanparaCrawlSettingExcludeKeywordResultSuccess.Ok(childComplexity), true

	case "CreateJanparaCrawlSettingExcludeKeywordResultValidationFailed.code":
		if e.complexity.CreateJanparaCrawlSettingExcludeKeywordResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.CreateJanparaCrawlSettingExcludeKeywordResultValidationFailed.Code(childComplexity), true

	case "CreateJanparaCrawlSettingExcludeKeywordResultValidationFailed.details":
		if e.complexity.CreateJanparaCrawlSettingExcludeKeywordResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.CreateJanparaCrawlSettingExcludeKeywordResultValidationFailed.Details(childComplexity), true

	case "CreateJanparaCrawlSettingExcludeKeywordResultValidationFailed.message":
		if e.complexity.CreateJanparaCrawlSettingExcludeKeywordResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.CreateJanparaCrawlSettingExcludeKeywordResultValidationFailed.Message(childComplexity), true

	case "CreateJanparaCrawlSettingExcludeProductResultError.error":
		if e.complexity.CreateJanparaCrawlSettingExcludeProductResultError.Error == nil {
			break
		}

		return e.complexity.CreateJanparaCrawlSettingExcludeProductResultError.Error(childComplexity), true

	case "CreateJanparaCrawlSettingExcludeProductResultError.ok":
		if e.complexity.CreateJanparaCrawlSettingExcludeProductResultError.Ok == nil {
			break
		}

		return e.complexity.CreateJanparaCrawlSettingExcludeProductResultError.Ok(childComplexity), true

	case "CreateJanparaCrawlSettingExcludeProductResultSuccess.janparaCrawlSettingExcludeProduct":
		if e.complexity.CreateJanparaCrawlSettingExcludeProductResultSuccess.JanparaCrawlSettingExcludeProduct == nil {
			break
		}

		return e.complexity.CreateJanparaCrawlSettingExcludeProductResultSuccess.JanparaCrawlSettingExcludeProduct(childComplexity), true

	case "CreateJanparaCrawlSettingExcludeProductResultSuccess.ok":
		if e.complexity.CreateJanparaCrawlSettingExcludeProductResultSuccess.Ok == nil {
			break
		}

		return e.complexity.CreateJanparaCrawlSettingExcludeProductResultSuccess.Ok(childComplexity), true

	case "CreateJanparaCrawlSettingExcludeProductResultValidationFailed.code":
		if e.complexity.CreateJanparaCrawlSettingExcludeProductResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.CreateJanparaCrawlSettingExcludeProductResultValidationFailed.Code(childComplexity), true

	case "CreateJanparaCrawlSettingExcludeProductResultValidationFailed.details":
		if e.complexity.CreateJanparaCrawlSettingExcludeProductResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.CreateJanparaCrawlSettingExcludeProductResultValidationFailed.Details(childComplexity), true

	case "CreateJanparaCrawlSettingExcludeProductResultValidationFailed.message":
		if e.complexity.CreateJanparaCrawlSettingExcludeProductResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.CreateJanparaCrawlSettingExcludeProductResultValidationFailed.Message(childComplexity), true

	case "CreateJanparaCrawlSettingRequiredKeywordResultError.error":
		if e.complexity.CreateJanparaCrawlSettingRequiredKeywordResultError.Error == nil {
			break
		}

		return e.complexity.CreateJanparaCrawlSettingRequiredKeywordResultError.Error(childComplexity), true

	case "CreateJanparaCrawlSettingRequiredKeywordResultError.ok":
		if e.complexity.CreateJanparaCrawlSettingRequiredKeywordResultError.Ok == nil {
			break
		}

		return e.complexity.CreateJanparaCrawlSettingRequiredKeywordResultError.Ok(childComplexity), true

	case "CreateJanparaCrawlSettingRequiredKeywordResultSuccess.janparaCrawlSettingRequiredKeyword":
		if e.complexity.CreateJanparaCrawlSettingRequiredKeywordResultSuccess.JanparaCrawlSettingRequiredKeyword == nil {
			break
		}

		return e.complexity.CreateJanparaCrawlSettingRequiredKeywordResultSuccess.JanparaCrawlSettingRequiredKeyword(childComplexity), true

	case "CreateJanparaCrawlSettingRequiredKeywordResultSuccess.ok":
		if e.complexity.CreateJanparaCrawlSettingRequiredKeywordResultSuccess.Ok == nil {
			break
		}

		return e.complexity.CreateJanparaCrawlSettingRequiredKeywordResultSuccess.Ok(childComplexity), true

	case "CreateJanparaCrawlSettingRequiredKeywordResultValidationFailed.code":
		if e.complexity.CreateJanparaCrawlSettingRequiredKeywordResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.CreateJanparaCrawlSettingRequiredKeywordResultValidationFailed.Code(childComplexity), true

	case "CreateJanparaCrawlSettingRequiredKeywordResultValidationFailed.details":
		if e.complexity.CreateJanparaCrawlSettingRequiredKeywordResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.CreateJanparaCrawlSettingRequiredKeywordResultValidationFailed.Details(childComplexity), true

	case "CreateJanparaCrawlSettingRequiredKeywordResultValidationFailed.message":
		if e.complexity.CreateJanparaCrawlSettingRequiredKeywordResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.CreateJanparaCrawlSettingRequiredKeywordResultValidationFailed.Message(childComplexity), true

	case "CreateMercariCrawlSettingExcludeKeywordResultError.error":
		if e.complexity.CreateMercariCrawlSettingExcludeKeywordResultError.Error == nil {
			break
		}

		return e.complexity.CreateMercariCrawlSettingExcludeKeywordResultError.Error(childComplexity), true

	case "CreateMercariCrawlSettingExcludeKeywordResultError.ok":
		if e.complexity.CreateMercariCrawlSettingExcludeKeywordResultError.Ok == nil {
			break
		}

		return e.complexity.CreateMercariCrawlSettingExcludeKeywordResultError.Ok(childComplexity), true

	case "CreateMercariCrawlSettingExcludeKeywordResultSuccess.mercariCrawlSettingExcludeKeyword":
		if e.complexity.CreateMercariCrawlSettingExcludeKeywordResultSuccess.MercariCrawlSettingExcludeKeyword == nil {
			break
		}

		return e.complexity.CreateMercariCrawlSettingExcludeKeywordResultSuccess.MercariCrawlSettingExcludeKeyword(childComplexity), true

	case "CreateMercariCrawlSettingExcludeKeywordResultSuccess.ok":
		if e.complexity.CreateMercariCrawlSettingExcludeKeywordResultSuccess.Ok == nil {
			break
		}

		return e.complexity.CreateMercariCrawlSettingExcludeKeywordResultSuccess.Ok(childComplexity), true

	case "CreateMercariCrawlSettingExcludeKeywordResultValidationFailed.code":
		if e.complexity.CreateMercariCrawlSettingExcludeKeywordResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.CreateMercariCrawlSettingExcludeKeywordResultValidationFailed.Code(childComplexity), true

	case "CreateMercariCrawlSettingExcludeKeywordResultValidationFailed.details":
		if e.complexity.CreateMercariCrawlSettingExcludeKeywordResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.CreateMercariCrawlSettingExcludeKeywordResultValidationFailed.Details(childComplexity), true

	case "CreateMercariCrawlSettingExcludeKeywordResultValidationFailed.message":
		if e.complexity.CreateMercariCrawlSettingExcludeKeywordResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.CreateMercariCrawlSettingExcludeKeywordResultValidationFailed.Message(childComplexity), true

	case "CreateMercariCrawlSettingExcludeProductResultError.error":
		if e.complexity.CreateMercariCrawlSettingExcludeProductResultError.Error == nil {
			break
		}

		return e.complexity.CreateMercariCrawlSettingExcludeProductResultError.Error(childComplexity), true

	case "CreateMercariCrawlSettingExcludeProductResultError.ok":
		if e.complexity.CreateMercariCrawlSettingExcludeProductResultError.Ok == nil {
			break
		}

		return e.complexity.CreateMercariCrawlSettingExcludeProductResultError.Ok(childComplexity), true

	case "CreateMercariCrawlSettingExcludeProductResultSuccess.mercariCrawlSettingExcludeProduct":
		if e.complexity.CreateMercariCrawlSettingExcludeProductResultSuccess.MercariCrawlSettingExcludeProduct == nil {
			break
		}

		return e.complexity.CreateMercariCrawlSettingExcludeProductResultSuccess.MercariCrawlSettingExcludeProduct(childComplexity), true

	case "CreateMercariCrawlSettingExcludeProductResultSuccess.ok":
		if e.complexity.CreateMercariCrawlSettingExcludeProductResultSuccess.Ok == nil {
			break
		}

		return e.complexity.CreateMercariCrawlSettingExcludeProductResultSuccess.Ok(childComplexity), true

	case "CreateMercariCrawlSettingExcludeProductResultValidationFailed.code":
		if e.complexity.CreateMercariCrawlSettingExcludeProductResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.CreateMercariCrawlSettingExcludeProductResultValidationFailed.Code(childComplexity), true

	case "CreateMercariCrawlSettingExcludeProductResultValidationFailed.details":
		if e.complexity.CreateMercariCrawlSettingExcludeProductResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.CreateMercariCrawlSettingExcludeProductResultValidationFailed.Details(childComplexity), true

	case "CreateMercariCrawlSettingExcludeProductResultValidationFailed.message":
		if e.complexity.CreateMercariCrawlSettingExcludeProductResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.CreateMercariCrawlSettingExcludeProductResultValidationFailed.Message(childComplexity), true

	case "CreateMercariCrawlSettingRequiredKeywordResultError.error":
		if e.complexity.CreateMercariCrawlSettingRequiredKeywordResultError.Error == nil {
			break
		}

		return e.complexity.CreateMercariCrawlSettingRequiredKeywordResultError.Error(childComplexity), true

	case "CreateMercariCrawlSettingRequiredKeywordResultError.ok":
		if e.complexity.CreateMercariCrawlSettingRequiredKeywordResultError.Ok == nil {
			break
		}

		return e.complexity.CreateMercariCrawlSettingRequiredKeywordResultError.Ok(childComplexity), true

	case "CreateMercariCrawlSettingRequiredKeywordResultSuccess.mercariCrawlSettingRequiredKeyword":
		if e.complexity.CreateMercariCrawlSettingRequiredKeywordResultSuccess.MercariCrawlSettingRequiredKeyword == nil {
			break
		}

		return e.complexity.CreateMercariCrawlSettingRequiredKeywordResultSuccess.MercariCrawlSettingRequiredKeyword(childComplexity), true

	case "CreateMercariCrawlSettingRequiredKeywordResultSuccess.ok":
		if e.complexity.CreateMercariCrawlSettingRequiredKeywordResultSuccess.Ok == nil {
			break
		}

		return e.complexity.CreateMercariCrawlSettingRequiredKeywordResultSuccess.Ok(childComplexity), true

	case "CreateMercariCrawlSettingRequiredKeywordResultValidationFailed.code":
		if e.complexity.CreateMercariCrawlSettingRequiredKeywordResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.CreateMercariCrawlSettingRequiredKeywordResultValidationFailed.Code(childComplexity), true

	case "CreateMercariCrawlSettingRequiredKeywordResultValidationFailed.details":
		if e.complexity.CreateMercariCrawlSettingRequiredKeywordResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.CreateMercariCrawlSettingRequiredKeywordResultValidationFailed.Details(childComplexity), true

	case "CreateMercariCrawlSettingRequiredKeywordResultValidationFailed.message":
		if e.complexity.CreateMercariCrawlSettingRequiredKeywordResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.CreateMercariCrawlSettingRequiredKeywordResultValidationFailed.Message(childComplexity), true

	case "CreatePcKoubouCrawlSettingExcludeKeywordResultError.error":
		if e.complexity.CreatePcKoubouCrawlSettingExcludeKeywordResultError.Error == nil {
			break
		}

		return e.complexity.CreatePcKoubouCrawlSettingExcludeKeywordResultError.Error(childComplexity), true

	case "CreatePcKoubouCrawlSettingExcludeKeywordResultError.ok":
		if e.complexity.CreatePcKoubouCrawlSettingExcludeKeywordResultError.Ok == nil {
			break
		}

		return e.complexity.CreatePcKoubouCrawlSettingExcludeKeywordResultError.Ok(childComplexity), true

	case "CreatePcKoubouCrawlSettingExcludeKeywordResultSuccess.ok":
		if e.complexity.CreatePcKoubouCrawlSettingExcludeKeywordResultSuccess.Ok == nil {
			break
		}

		return e.complexity.CreatePcKoubouCrawlSettingExcludeKeywordResultSuccess.Ok(childComplexity), true

	case "CreatePcKoubouCrawlSettingExcludeKeywordResultSuccess.pcKoubouCrawlSettingExcludeKeyword":
		if e.complexity.CreatePcKoubouCrawlSettingExcludeKeywordResultSuccess.PcKoubouCrawlSettingExcludeKeyword == nil {
			break
		}

		return e.complexity.CreatePcKoubouCrawlSettingExcludeKeywordResultSuccess.PcKoubouCrawlSettingExcludeKeyword(childComplexity), true

	case "CreatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed.code":
		if e.complexity.CreatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.CreatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed.Code(childComplexity), true

	case "CreatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed.details":
		if e.complexity.CreatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.CreatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed.Details(childComplexity), true

	case "CreatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed.message":
		if e.complexity.CreatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.CreatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed.Message(childComplexity), true

	case "CreatePcKoubouCrawlSettingExcludeProductResultError.error":
		if e.complexity.CreatePcKoubouCrawlSettingExcludeProductResultError.Error == nil {
			break
		}

		return e.complexity.CreatePcKoubouCrawlSettingExcludeProductResultError.Error(childComplexity), true

	case "CreatePcKoubouCrawlSettingExcludeProductResultError.ok":
		if e.complexity.CreatePcKoubouCrawlSettingExcludeProductResultError.Ok == nil {
			break
		}

		return e.complexity.CreatePcKoubouCrawlSettingExcludeProductResultError.Ok(childComplexity), true

	case "CreatePcKoubouCrawlSettingExcludeProductResultSuccess.ok":
		if e.complexity.CreatePcKoubouCrawlSettingExcludeProductResultSuccess.Ok == nil {
			break
		}

		return e.complexity.CreatePcKoubouCrawlSettingExcludeProductResultSuccess.Ok(childComplexity), true

	case "CreatePcKoubouCrawlSettingExcludeProductResultSuccess.pcKoubouCrawlSettingExcludeProduct":
		if e.complexity.CreatePcKoubouCrawlSettingExcludeProductResultSuccess.PcKoubouCrawlSettingExcludeProduct == nil {
			break
		}

		return e.complexity.CreatePcKoubouCrawlSettingExcludeProductResultSuccess.PcKoubouCrawlSettingExcludeProduct(childComplexity), true

	case "CreatePcKoubouCrawlSettingExcludeProductResultValidationFailed.code":
		if e.complexity.CreatePcKoubouCrawlSettingExcludeProductResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.CreatePcKoubouCrawlSettingExcludeProductResultValidationFailed.Code(childComplexity), true

	case "CreatePcKoubouCrawlSettingExcludeProductResultValidationFailed.details":
		if e.complexity.CreatePcKoubouCrawlSettingExcludeProductResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.CreatePcKoubouCrawlSettingExcludeProductResultValidationFailed.Details(childComplexity), true

	case "CreatePcKoubouCrawlSettingExcludeProductResultValidationFailed.message":
		if e.complexity.CreatePcKoubouCrawlSettingExcludeProductResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.CreatePcKoubouCrawlSettingExcludeProductResultValidationFailed.Message(childComplexity), true

	case "CreatePcKoubouCrawlSettingRequiredKeywordResultError.error":
		if e.complexity.CreatePcKoubouCrawlSettingRequiredKeywordResultError.Error == nil {
			break
		}

		return e.complexity.CreatePcKoubouCrawlSettingRequiredKeywordResultError.Error(childComplexity), true

	case "CreatePcKoubouCrawlSettingRequiredKeywordResultError.ok":
		if e.complexity.CreatePcKoubouCrawlSettingRequiredKeywordResultError.Ok == nil {
			break
		}

		return e.complexity.CreatePcKoubouCrawlSettingRequiredKeywordResultError.Ok(childComplexity), true

	case "CreatePcKoubouCrawlSettingRequiredKeywordResultSuccess.ok":
		if e.complexity.CreatePcKoubouCrawlSettingRequiredKeywordResultSuccess.Ok == nil {
			break
		}

		return e.complexity.CreatePcKoubouCrawlSettingRequiredKeywordResultSuccess.Ok(childComplexity), true

	case "CreatePcKoubouCrawlSettingRequiredKeywordResultSuccess.pcKoubouCrawlSettingRequiredKeyword":
		if e.complexity.CreatePcKoubouCrawlSettingRequiredKeywordResultSuccess.PcKoubouCrawlSettingRequiredKeyword == nil {
			break
		}

		return e.complexity.CreatePcKoubouCrawlSettingRequiredKeywordResultSuccess.PcKoubouCrawlSettingRequiredKeyword(childComplexity), true

	case "CreatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed.code":
		if e.complexity.CreatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.CreatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed.Code(childComplexity), true

	case "CreatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed.details":
		if e.complexity.CreatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.CreatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed.Details(childComplexity), true

	case "CreatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed.message":
		if e.complexity.CreatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.CreatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed.Message(childComplexity), true

	case "CreateProductResultError.error":
		if e.complexity.CreateProductResultError.Error == nil {
			break
		}

		return e.complexity.CreateProductResultError.Error(childComplexity), true

	case "CreateProductResultError.ok":
		if e.complexity.CreateProductResultError.Ok == nil {
			break
		}

		return e.complexity.CreateProductResultError.Ok(childComplexity), true

	case "CreateProductResultSuccess.ok":
		if e.complexity.CreateProductResultSuccess.Ok == nil {
			break
		}

		return e.complexity.CreateProductResultSuccess.Ok(childComplexity), true

	case "CreateProductResultSuccess.product":
		if e.complexity.CreateProductResultSuccess.Product == nil {
			break
		}

		return e.complexity.CreateProductResultSuccess.Product(childComplexity), true

	case "CreateProductResultValidationFailed.code":
		if e.complexity.CreateProductResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.CreateProductResultValidationFailed.Code(childComplexity), true

	case "CreateProductResultValidationFailed.details":
		if e.complexity.CreateProductResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.CreateProductResultValidationFailed.Details(childComplexity), true

	case "CreateProductResultValidationFailed.message":
		if e.complexity.CreateProductResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.CreateProductResultValidationFailed.Message(childComplexity), true

	case "CreateYahooAuctionCrawlSettingExcludeKeywordResultError.error":
		if e.complexity.CreateYahooAuctionCrawlSettingExcludeKeywordResultError.Error == nil {
			break
		}

		return e.complexity.CreateYahooAuctionCrawlSettingExcludeKeywordResultError.Error(childComplexity), true

	case "CreateYahooAuctionCrawlSettingExcludeKeywordResultError.ok":
		if e.complexity.CreateYahooAuctionCrawlSettingExcludeKeywordResultError.Ok == nil {
			break
		}

		return e.complexity.CreateYahooAuctionCrawlSettingExcludeKeywordResultError.Ok(childComplexity), true

	case "CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess.ok":
		if e.complexity.CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess.Ok == nil {
			break
		}

		return e.complexity.CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess.Ok(childComplexity), true

	case "CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess.yahooAuctionCrawlSettingExcludeKeyword":
		if e.complexity.CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess.YahooAuctionCrawlSettingExcludeKeyword == nil {
			break
		}

		return e.complexity.CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess.YahooAuctionCrawlSettingExcludeKeyword(childComplexity), true

	case "CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.code":
		if e.complexity.CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.Code(childComplexity), true

	case "CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.details":
		if e.complexity.CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.Details(childComplexity), true

	case "CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.message":
		if e.complexity.CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.Message(childComplexity), true

	case "CreateYahooAuctionCrawlSettingExcludeProductResultError.error":
		if e.complexity.CreateYahooAuctionCrawlSettingExcludeProductResultError.Error == nil {
			break
		}

		return e.complexity.CreateYahooAuctionCrawlSettingExcludeProductResultError.Error(childComplexity), true

	case "CreateYahooAuctionCrawlSettingExcludeProductResultError.ok":
		if e.complexity.CreateYahooAuctionCrawlSettingExcludeProductResultError.Ok == nil {
			break
		}

		return e.complexity.CreateYahooAuctionCrawlSettingExcludeProductResultError.Ok(childComplexity), true

	case "CreateYahooAuctionCrawlSettingExcludeProductResultSuccess.ok":
		if e.complexity.CreateYahooAuctionCrawlSettingExcludeProductResultSuccess.Ok == nil {
			break
		}

		return e.complexity.CreateYahooAuctionCrawlSettingExcludeProductResultSuccess.Ok(childComplexity), true

	case "CreateYahooAuctionCrawlSettingExcludeProductResultSuccess.yahooAuctionCrawlSettingExcludeProduct":
		if e.complexity.CreateYahooAuctionCrawlSettingExcludeProductResultSuccess.YahooAuctionCrawlSettingExcludeProduct == nil {
			break
		}

		return e.complexity.CreateYahooAuctionCrawlSettingExcludeProductResultSuccess.YahooAuctionCrawlSettingExcludeProduct(childComplexity), true

	case "CreateYahooAuctionCrawlSettingExcludeProductResultValidationFailed.code":
		if e.complexity.CreateYahooAuctionCrawlSettingExcludeProductResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.CreateYahooAuctionCrawlSettingExcludeProductResultValidationFailed.Code(childComplexity), true

	case "CreateYahooAuctionCrawlSettingExcludeProductResultValidationFailed.details":
		if e.complexity.CreateYahooAuctionCrawlSettingExcludeProductResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.CreateYahooAuctionCrawlSettingExcludeProductResultValidationFailed.Details(childComplexity), true

	case "CreateYahooAuctionCrawlSettingExcludeProductResultValidationFailed.message":
		if e.complexity.CreateYahooAuctionCrawlSettingExcludeProductResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.CreateYahooAuctionCrawlSettingExcludeProductResultValidationFailed.Message(childComplexity), true

	case "CreateYahooAuctionCrawlSettingRequiredKeywordResultError.error":
		if e.complexity.CreateYahooAuctionCrawlSettingRequiredKeywordResultError.Error == nil {
			break
		}

		return e.complexity.CreateYahooAuctionCrawlSettingRequiredKeywordResultError.Error(childComplexity), true

	case "CreateYahooAuctionCrawlSettingRequiredKeywordResultError.ok":
		if e.complexity.CreateYahooAuctionCrawlSettingRequiredKeywordResultError.Ok == nil {
			break
		}

		return e.complexity.CreateYahooAuctionCrawlSettingRequiredKeywordResultError.Ok(childComplexity), true

	case "CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess.ok":
		if e.complexity.CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess.Ok == nil {
			break
		}

		return e.complexity.CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess.Ok(childComplexity), true

	case "CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess.yahooAuctionCrawlSettingRequiredKeyword":
		if e.complexity.CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess.YahooAuctionCrawlSettingRequiredKeyword == nil {
			break
		}

		return e.complexity.CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess.YahooAuctionCrawlSettingRequiredKeyword(childComplexity), true

	case "CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.code":
		if e.complexity.CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.Code(childComplexity), true

	case "CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.details":
		if e.complexity.CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.Details(childComplexity), true

	case "CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.message":
		if e.complexity.CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.Message(childComplexity), true

	case "DeleteIosysCrawlSettingExcludeKeywordResultError.error":
		if e.complexity.DeleteIosysCrawlSettingExcludeKeywordResultError.Error == nil {
			break
		}

		return e.complexity.DeleteIosysCrawlSettingExcludeKeywordResultError.Error(childComplexity), true

	case "DeleteIosysCrawlSettingExcludeKeywordResultError.ok":
		if e.complexity.DeleteIosysCrawlSettingExcludeKeywordResultError.Ok == nil {
			break
		}

		return e.complexity.DeleteIosysCrawlSettingExcludeKeywordResultError.Ok(childComplexity), true

	case "DeleteIosysCrawlSettingExcludeKeywordResultSuccess.ok":
		if e.complexity.DeleteIosysCrawlSettingExcludeKeywordResultSuccess.Ok == nil {
			break
		}

		return e.complexity.DeleteIosysCrawlSettingExcludeKeywordResultSuccess.Ok(childComplexity), true

	case "DeleteIosysCrawlSettingExcludeKeywordResultValidationFailed.code":
		if e.complexity.DeleteIosysCrawlSettingExcludeKeywordResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.DeleteIosysCrawlSettingExcludeKeywordResultValidationFailed.Code(childComplexity), true

	case "DeleteIosysCrawlSettingExcludeKeywordResultValidationFailed.details":
		if e.complexity.DeleteIosysCrawlSettingExcludeKeywordResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.DeleteIosysCrawlSettingExcludeKeywordResultValidationFailed.Details(childComplexity), true

	case "DeleteIosysCrawlSettingExcludeKeywordResultValidationFailed.message":
		if e.complexity.DeleteIosysCrawlSettingExcludeKeywordResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.DeleteIosysCrawlSettingExcludeKeywordResultValidationFailed.Message(childComplexity), true

	case "DeleteIosysCrawlSettingExcludeProductResultError.error":
		if e.complexity.DeleteIosysCrawlSettingExcludeProductResultError.Error == nil {
			break
		}

		return e.complexity.DeleteIosysCrawlSettingExcludeProductResultError.Error(childComplexity), true

	case "DeleteIosysCrawlSettingExcludeProductResultError.ok":
		if e.complexity.DeleteIosysCrawlSettingExcludeProductResultError.Ok == nil {
			break
		}

		return e.complexity.DeleteIosysCrawlSettingExcludeProductResultError.Ok(childComplexity), true

	case "DeleteIosysCrawlSettingExcludeProductResultSuccess.ok":
		if e.complexity.DeleteIosysCrawlSettingExcludeProductResultSuccess.Ok == nil {
			break
		}

		return e.complexity.DeleteIosysCrawlSettingExcludeProductResultSuccess.Ok(childComplexity), true

	case "DeleteIosysCrawlSettingExcludeProductResultValidationFailed.code":
		if e.complexity.DeleteIosysCrawlSettingExcludeProductResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.DeleteIosysCrawlSettingExcludeProductResultValidationFailed.Code(childComplexity), true

	case "DeleteIosysCrawlSettingExcludeProductResultValidationFailed.details":
		if e.complexity.DeleteIosysCrawlSettingExcludeProductResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.DeleteIosysCrawlSettingExcludeProductResultValidationFailed.Details(childComplexity), true

	case "DeleteIosysCrawlSettingExcludeProductResultValidationFailed.message":
		if e.complexity.DeleteIosysCrawlSettingExcludeProductResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.DeleteIosysCrawlSettingExcludeProductResultValidationFailed.Message(childComplexity), true

	case "DeleteIosysCrawlSettingRequiredKeywordResultError.error":
		if e.complexity.DeleteIosysCrawlSettingRequiredKeywordResultError.Error == nil {
			break
		}

		return e.complexity.DeleteIosysCrawlSettingRequiredKeywordResultError.Error(childComplexity), true

	case "DeleteIosysCrawlSettingRequiredKeywordResultError.ok":
		if e.complexity.DeleteIosysCrawlSettingRequiredKeywordResultError.Ok == nil {
			break
		}

		return e.complexity.DeleteIosysCrawlSettingRequiredKeywordResultError.Ok(childComplexity), true

	case "DeleteIosysCrawlSettingRequiredKeywordResultSuccess.ok":
		if e.complexity.DeleteIosysCrawlSettingRequiredKeywordResultSuccess.Ok == nil {
			break
		}

		return e.complexity.DeleteIosysCrawlSettingRequiredKeywordResultSuccess.Ok(childComplexity), true

	case "DeleteIosysCrawlSettingRequiredKeywordResultValidationFailed.code":
		if e.complexity.DeleteIosysCrawlSettingRequiredKeywordResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.DeleteIosysCrawlSettingRequiredKeywordResultValidationFailed.Code(childComplexity), true

	case "DeleteIosysCrawlSettingRequiredKeywordResultValidationFailed.details":
		if e.complexity.DeleteIosysCrawlSettingRequiredKeywordResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.DeleteIosysCrawlSettingRequiredKeywordResultValidationFailed.Details(childComplexity), true

	case "DeleteIosysCrawlSettingRequiredKeywordResultValidationFailed.message":
		if e.complexity.DeleteIosysCrawlSettingRequiredKeywordResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.DeleteIosysCrawlSettingRequiredKeywordResultValidationFailed.Message(childComplexity), true

	case "DeleteJanparaCrawlSettingExcludeKeywordResultError.error":
		if e.complexity.DeleteJanparaCrawlSettingExcludeKeywordResultError.Error == nil {
			break
		}

		return e.complexity.DeleteJanparaCrawlSettingExcludeKeywordResultError.Error(childComplexity), true

	case "DeleteJanparaCrawlSettingExcludeKeywordResultError.ok":
		if e.complexity.DeleteJanparaCrawlSettingExcludeKeywordResultError.Ok == nil {
			break
		}

		return e.complexity.DeleteJanparaCrawlSettingExcludeKeywordResultError.Ok(childComplexity), true

	case "DeleteJanparaCrawlSettingExcludeKeywordResultSuccess.ok":
		if e.complexity.DeleteJanparaCrawlSettingExcludeKeywordResultSuccess.Ok == nil {
			break
		}

		return e.complexity.DeleteJanparaCrawlSettingExcludeKeywordResultSuccess.Ok(childComplexity), true

	case "DeleteJanparaCrawlSettingExcludeKeywordResultValidationFailed.code":
		if e.complexity.DeleteJanparaCrawlSettingExcludeKeywordResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.DeleteJanparaCrawlSettingExcludeKeywordResultValidationFailed.Code(childComplexity), true

	case "DeleteJanparaCrawlSettingExcludeKeywordResultValidationFailed.details":
		if e.complexity.DeleteJanparaCrawlSettingExcludeKeywordResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.DeleteJanparaCrawlSettingExcludeKeywordResultValidationFailed.Details(childComplexity), true

	case "DeleteJanparaCrawlSettingExcludeKeywordResultValidationFailed.message":
		if e.complexity.DeleteJanparaCrawlSettingExcludeKeywordResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.DeleteJanparaCrawlSettingExcludeKeywordResultValidationFailed.Message(childComplexity), true

	case "DeleteJanparaCrawlSettingExcludeProductResultError.error":
		if e.complexity.DeleteJanparaCrawlSettingExcludeProductResultError.Error == nil {
			break
		}

		return e.complexity.DeleteJanparaCrawlSettingExcludeProductResultError.Error(childComplexity), true

	case "DeleteJanparaCrawlSettingExcludeProductResultError.ok":
		if e.complexity.DeleteJanparaCrawlSettingExcludeProductResultError.Ok == nil {
			break
		}

		return e.complexity.DeleteJanparaCrawlSettingExcludeProductResultError.Ok(childComplexity), true

	case "DeleteJanparaCrawlSettingExcludeProductResultSuccess.ok":
		if e.complexity.DeleteJanparaCrawlSettingExcludeProductResultSuccess.Ok == nil {
			break
		}

		return e.complexity.DeleteJanparaCrawlSettingExcludeProductResultSuccess.Ok(childComplexity), true

	case "DeleteJanparaCrawlSettingExcludeProductResultValidationFailed.code":
		if e.complexity.DeleteJanparaCrawlSettingExcludeProductResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.DeleteJanparaCrawlSettingExcludeProductResultValidationFailed.Code(childComplexity), true

	case "DeleteJanparaCrawlSettingExcludeProductResultValidationFailed.details":
		if e.complexity.DeleteJanparaCrawlSettingExcludeProductResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.DeleteJanparaCrawlSettingExcludeProductResultValidationFailed.Details(childComplexity), true

	case "DeleteJanparaCrawlSettingExcludeProductResultValidationFailed.message":
		if e.complexity.DeleteJanparaCrawlSettingExcludeProductResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.DeleteJanparaCrawlSettingExcludeProductResultValidationFailed.Message(childComplexity), true

	case "DeleteJanparaCrawlSettingRequiredKeywordResultError.error":
		if e.complexity.DeleteJanparaCrawlSettingRequiredKeywordResultError.Error == nil {
			break
		}

		return e.complexity.DeleteJanparaCrawlSettingRequiredKeywordResultError.Error(childComplexity), true

	case "DeleteJanparaCrawlSettingRequiredKeywordResultError.ok":
		if e.complexity.DeleteJanparaCrawlSettingRequiredKeywordResultError.Ok == nil {
			break
		}

		return e.complexity.DeleteJanparaCrawlSettingRequiredKeywordResultError.Ok(childComplexity), true

	case "DeleteJanparaCrawlSettingRequiredKeywordResultSuccess.ok":
		if e.complexity.DeleteJanparaCrawlSettingRequiredKeywordResultSuccess.Ok == nil {
			break
		}

		return e.complexity.DeleteJanparaCrawlSettingRequiredKeywordResultSuccess.Ok(childComplexity), true

	case "DeleteJanparaCrawlSettingRequiredKeywordResultValidationFailed.code":
		if e.complexity.DeleteJanparaCrawlSettingRequiredKeywordResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.DeleteJanparaCrawlSettingRequiredKeywordResultValidationFailed.Code(childComplexity), true

	case "DeleteJanparaCrawlSettingRequiredKeywordResultValidationFailed.details":
		if e.complexity.DeleteJanparaCrawlSettingRequiredKeywordResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.DeleteJanparaCrawlSettingRequiredKeywordResultValidationFailed.Details(childComplexity), true

	case "DeleteJanparaCrawlSettingRequiredKeywordResultValidationFailed.message":
		if e.complexity.DeleteJanparaCrawlSettingRequiredKeywordResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.DeleteJanparaCrawlSettingRequiredKeywordResultValidationFailed.Message(childComplexity), true

	case "DeleteMercariCrawlSettingExcludeKeywordResultError.error":
		if e.complexity.DeleteMercariCrawlSettingExcludeKeywordResultError.Error == nil {
			break
		}

		return e.complexity.DeleteMercariCrawlSettingExcludeKeywordResultError.Error(childComplexity), true

	case "DeleteMercariCrawlSettingExcludeKeywordResultError.ok":
		if e.complexity.DeleteMercariCrawlSettingExcludeKeywordResultError.Ok == nil {
			break
		}

		return e.complexity.DeleteMercariCrawlSettingExcludeKeywordResultError.Ok(childComplexity), true

	case "DeleteMercariCrawlSettingExcludeKeywordResultSuccess.ok":
		if e.complexity.DeleteMercariCrawlSettingExcludeKeywordResultSuccess.Ok == nil {
			break
		}

		return e.complexity.DeleteMercariCrawlSettingExcludeKeywordResultSuccess.Ok(childComplexity), true

	case "DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed.code":
		if e.complexity.DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed.Code(childComplexity), true

	case "DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed.details":
		if e.complexity.DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed.Details(childComplexity), true

	case "DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed.message":
		if e.complexity.DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed.Message(childComplexity), true

	case "DeleteMercariCrawlSettingExcludeProductResultError.error":
		if e.complexity.DeleteMercariCrawlSettingExcludeProductResultError.Error == nil {
			break
		}

		return e.complexity.DeleteMercariCrawlSettingExcludeProductResultError.Error(childComplexity), true

	case "DeleteMercariCrawlSettingExcludeProductResultError.ok":
		if e.complexity.DeleteMercariCrawlSettingExcludeProductResultError.Ok == nil {
			break
		}

		return e.complexity.DeleteMercariCrawlSettingExcludeProductResultError.Ok(childComplexity), true

	case "DeleteMercariCrawlSettingExcludeProductResultSuccess.ok":
		if e.complexity.DeleteMercariCrawlSettingExcludeProductResultSuccess.Ok == nil {
			break
		}

		return e.complexity.DeleteMercariCrawlSettingExcludeProductResultSuccess.Ok(childComplexity), true

	case "DeleteMercariCrawlSettingExcludeProductResultValidationFailed.code":
		if e.complexity.DeleteMercariCrawlSettingExcludeProductResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.DeleteMercariCrawlSettingExcludeProductResultValidationFailed.Code(childComplexity), true

	case "DeleteMercariCrawlSettingExcludeProductResultValidationFailed.details":
		if e.complexity.DeleteMercariCrawlSettingExcludeProductResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.DeleteMercariCrawlSettingExcludeProductResultValidationFailed.Details(childComplexity), true

	case "DeleteMercariCrawlSettingExcludeProductResultValidationFailed.message":
		if e.complexity.DeleteMercariCrawlSettingExcludeProductResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.DeleteMercariCrawlSettingExcludeProductResultValidationFailed.Message(childComplexity), true

	case "DeleteMercariCrawlSettingRequiredKeywordResultError.error":
		if e.complexity.DeleteMercariCrawlSettingRequiredKeywordResultError.Error == nil {
			break
		}

		return e.complexity.DeleteMercariCrawlSettingRequiredKeywordResultError.Error(childComplexity), true

	case "DeleteMercariCrawlSettingRequiredKeywordResultError.ok":
		if e.complexity.DeleteMercariCrawlSettingRequiredKeywordResultError.Ok == nil {
			break
		}

		return e.complexity.DeleteMercariCrawlSettingRequiredKeywordResultError.Ok(childComplexity), true

	case "DeleteMercariCrawlSettingRequiredKeywordResultSuccess.ok":
		if e.complexity.DeleteMercariCrawlSettingRequiredKeywordResultSuccess.Ok == nil {
			break
		}

		return e.complexity.DeleteMercariCrawlSettingRequiredKeywordResultSuccess.Ok(childComplexity), true

	case "DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed.code":
		if e.complexity.DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed.Code(childComplexity), true

	case "DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed.details":
		if e.complexity.DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed.Details(childComplexity), true

	case "DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed.message":
		if e.complexity.DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed.Message(childComplexity), true

	case "DeletePcKoubouCrawlSettingExcludeKeywordResultError.error":
		if e.complexity.DeletePcKoubouCrawlSettingExcludeKeywordResultError.Error == nil {
			break
		}

		return e.complexity.DeletePcKoubouCrawlSettingExcludeKeywordResultError.Error(childComplexity), true

	case "DeletePcKoubouCrawlSettingExcludeKeywordResultError.ok":
		if e.complexity.DeletePcKoubouCrawlSettingExcludeKeywordResultError.Ok == nil {
			break
		}

		return e.complexity.DeletePcKoubouCrawlSettingExcludeKeywordResultError.Ok(childComplexity), true

	case "DeletePcKoubouCrawlSettingExcludeKeywordResultSuccess.ok":
		if e.complexity.DeletePcKoubouCrawlSettingExcludeKeywordResultSuccess.Ok == nil {
			break
		}

		return e.complexity.DeletePcKoubouCrawlSettingExcludeKeywordResultSuccess.Ok(childComplexity), true

	case "DeletePcKoubouCrawlSettingExcludeKeywordResultValidationFailed.code":
		if e.complexity.DeletePcKoubouCrawlSettingExcludeKeywordResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.DeletePcKoubouCrawlSettingExcludeKeywordResultValidationFailed.Code(childComplexity), true

	case "DeletePcKoubouCrawlSettingExcludeKeywordResultValidationFailed.details":
		if e.complexity.DeletePcKoubouCrawlSettingExcludeKeywordResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.DeletePcKoubouCrawlSettingExcludeKeywordResultValidationFailed.Details(childComplexity), true

	case "DeletePcKoubouCrawlSettingExcludeKeywordResultValidationFailed.message":
		if e.complexity.DeletePcKoubouCrawlSettingExcludeKeywordResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.DeletePcKoubouCrawlSettingExcludeKeywordResultValidationFailed.Message(childComplexity), true

	case "DeletePcKoubouCrawlSettingExcludeProductResultError.error":
		if e.complexity.DeletePcKoubouCrawlSettingExcludeProductResultError.Error == nil {
			break
		}

		return e.complexity.DeletePcKoubouCrawlSettingExcludeProductResultError.Error(childComplexity), true

	case "DeletePcKoubouCrawlSettingExcludeProductResultError.ok":
		if e.complexity.DeletePcKoubouCrawlSettingExcludeProductResultError.Ok == nil {
			break
		}

		return e.complexity.DeletePcKoubouCrawlSettingExcludeProductResultError.Ok(childComplexity), true

	case "DeletePcKoubouCrawlSettingExcludeProductResultSuccess.ok":
		if e.complexity.DeletePcKoubouCrawlSettingExcludeProductResultSuccess.Ok == nil {
			break
		}

		return e.complexity.DeletePcKoubouCrawlSettingExcludeProductResultSuccess.Ok(childComplexity), true

	case "DeletePcKoubouCrawlSettingExcludeProductResultValidationFailed.code":
		if e.complexity.DeletePcKoubouCrawlSettingExcludeProductResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.DeletePcKoubouCrawlSettingExcludeProductResultValidationFailed.Code(childComplexity), true

	case "DeletePcKoubouCrawlSettingExcludeProductResultValidationFailed.details":
		if e.complexity.DeletePcKoubouCrawlSettingExcludeProductResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.DeletePcKoubouCrawlSettingExcludeProductResultValidationFailed.Details(childComplexity), true

	case "DeletePcKoubouCrawlSettingExcludeProductResultValidationFailed.message":
		if e.complexity.DeletePcKoubouCrawlSettingExcludeProductResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.DeletePcKoubouCrawlSettingExcludeProductResultValidationFailed.Message(childComplexity), true

	case "DeletePcKoubouCrawlSettingRequiredKeywordResultError.error":
		if e.complexity.DeletePcKoubouCrawlSettingRequiredKeywordResultError.Error == nil {
			break
		}

		return e.complexity.DeletePcKoubouCrawlSettingRequiredKeywordResultError.Error(childComplexity), true

	case "DeletePcKoubouCrawlSettingRequiredKeywordResultError.ok":
		if e.complexity.DeletePcKoubouCrawlSettingRequiredKeywordResultError.Ok == nil {
			break
		}

		return e.complexity.DeletePcKoubouCrawlSettingRequiredKeywordResultError.Ok(childComplexity), true

	case "DeletePcKoubouCrawlSettingRequiredKeywordResultSuccess.ok":
		if e.complexity.DeletePcKoubouCrawlSettingRequiredKeywordResultSuccess.Ok == nil {
			break
		}

		return e.complexity.DeletePcKoubouCrawlSettingRequiredKeywordResultSuccess.Ok(childComplexity), true

	case "DeletePcKoubouCrawlSettingRequiredKeywordResultValidationFailed.code":
		if e.complexity.DeletePcKoubouCrawlSettingRequiredKeywordResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.DeletePcKoubouCrawlSettingRequiredKeywordResultValidationFailed.Code(childComplexity), true

	case "DeletePcKoubouCrawlSettingRequiredKeywordResultValidationFailed.details":
		if e.complexity.DeletePcKoubouCrawlSettingRequiredKeywordResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.DeletePcKoubouCrawlSettingRequiredKeywordResultValidationFailed.Details(childComplexity), true

	case "DeletePcKoubouCrawlSettingRequiredKeywordResultValidationFailed.message":
		if e.complexity.DeletePcKoubouCrawlSettingRequiredKeywordResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.DeletePcKoubouCrawlSettingRequiredKeywordResultValidationFailed.Message(childComplexity), true

	case "DeleteProductResultError.error":
		if e.complexity.DeleteProductResultError.Error == nil {
			break
		}

		return e.complexity.DeleteProductResultError.Error(childComplexity), true

	case "DeleteProductResultError.ok":
		if e.complexity.DeleteProductResultError.Ok == nil {
			break
		}

		return e.complexity.DeleteProductResultError.Ok(childComplexity), true

	case "DeleteProductResultSuccess.ok":
		if e.complexity.DeleteProductResultSuccess.Ok == nil {
			break
		}

		return e.complexity.DeleteProductResultSuccess.Ok(childComplexity), true

	case "DeleteProductResultValidationFailed.code":
		if e.complexity.DeleteProductResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.DeleteProductResultValidationFailed.Code(childComplexity), true

	case "DeleteProductResultValidationFailed.details":
		if e.complexity.DeleteProductResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.DeleteProductResultValidationFailed.Details(childComplexity), true

	case "DeleteProductResultValidationFailed.message":
		if e.complexity.DeleteProductResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.DeleteProductResultValidationFailed.Message(childComplexity), true

	case "DeleteYahooAuctionCrawlSettingExcludeKeywordResultError.error":
		if e.complexity.DeleteYahooAuctionCrawlSettingExcludeKeywordResultError.Error == nil {
			break
		}

		return e.complexity.DeleteYahooAuctionCrawlSettingExcludeKeywordResultError.Error(childComplexity), true

	case "DeleteYahooAuctionCrawlSettingExcludeKeywordResultError.ok":
		if e.complexity.DeleteYahooAuctionCrawlSettingExcludeKeywordResultError.Ok == nil {
			break
		}

		return e.complexity.DeleteYahooAuctionCrawlSettingExcludeKeywordResultError.Ok(childComplexity), true

	case "DeleteYahooAuctionCrawlSettingExcludeKeywordResultSuccess.ok":
		if e.complexity.DeleteYahooAuctionCrawlSettingExcludeKeywordResultSuccess.Ok == nil {
			break
		}

		return e.complexity.DeleteYahooAuctionCrawlSettingExcludeKeywordResultSuccess.Ok(childComplexity), true

	case "DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.code":
		if e.complexity.DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.Code(childComplexity), true

	case "DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.details":
		if e.complexity.DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.Details(childComplexity), true

	case "DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.message":
		if e.complexity.DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.Message(childComplexity), true

	case "DeleteYahooAuctionCrawlSettingExcludeProductResultError.error":
		if e.complexity.DeleteYahooAuctionCrawlSettingExcludeProductResultError.Error == nil {
			break
		}

		return e.complexity.DeleteYahooAuctionCrawlSettingExcludeProductResultError.Error(childComplexity), true

	case "DeleteYahooAuctionCrawlSettingExcludeProductResultError.ok":
		if e.complexity.DeleteYahooAuctionCrawlSettingExcludeProductResultError.Ok == nil {
			break
		}

		return e.complexity.DeleteYahooAuctionCrawlSettingExcludeProductResultError.Ok(childComplexity), true

	case "DeleteYahooAuctionCrawlSettingExcludeProductResultSuccess.ok":
		if e.complexity.DeleteYahooAuctionCrawlSettingExcludeProductResultSuccess.Ok == nil {
			break
		}

		return e.complexity.DeleteYahooAuctionCrawlSettingExcludeProductResultSuccess.Ok(childComplexity), true

	case "DeleteYahooAuctionCrawlSettingExcludeProductResultValidationFailed.code":
		if e.complexity.DeleteYahooAuctionCrawlSettingExcludeProductResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.DeleteYahooAuctionCrawlSettingExcludeProductResultValidationFailed.Code(childComplexity), true

	case "DeleteYahooAuctionCrawlSettingExcludeProductResultValidationFailed.details":
		if e.complexity.DeleteYahooAuctionCrawlSettingExcludeProductResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.DeleteYahooAuctionCrawlSettingExcludeProductResultValidationFailed.Details(childComplexity), true

	case "DeleteYahooAuctionCrawlSettingExcludeProductResultValidationFailed.message":
		if e.complexity.DeleteYahooAuctionCrawlSettingExcludeProductResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.DeleteYahooAuctionCrawlSettingExcludeProductResultValidationFailed.Message(childComplexity), true

	case "DeleteYahooAuctionCrawlSettingRequiredKeywordResultError.error":
		if e.complexity.DeleteYahooAuctionCrawlSettingRequiredKeywordResultError.Error == nil {
			break
		}

		return e.complexity.DeleteYahooAuctionCrawlSettingRequiredKeywordResultError.Error(childComplexity), true

	case "DeleteYahooAuctionCrawlSettingRequiredKeywordResultError.ok":
		if e.complexity.DeleteYahooAuctionCrawlSettingRequiredKeywordResultError.Ok == nil {
			break
		}

		return e.complexity.DeleteYahooAuctionCrawlSettingRequiredKeywordResultError.Ok(childComplexity), true

	case "DeleteYahooAuctionCrawlSettingRequiredKeywordResultSuccess.ok":
		if e.complexity.DeleteYahooAuctionCrawlSettingRequiredKeywordResultSuccess.Ok == nil {
			break
		}

		return e.complexity.DeleteYahooAuctionCrawlSettingRequiredKeywordResultSuccess.Ok(childComplexity), true

	case "DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.code":
		if e.complexity.DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.Code(childComplexity), true

	case "DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.details":
		if e.complexity.DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.Details(childComplexity), true

	case "DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.message":
		if e.complexity.DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.Message(childComplexity), true

	case "ErrorDetail.field":
		if e.complexity.ErrorDetail.Field == nil {
			break
		}

		return e.complexity.ErrorDetail.Field(childComplexity), true

	case "ErrorDetail.message":
		if e.complexity.ErrorDetail.Message == nil {
			break
		}

		return e.complexity.ErrorDetail.Message(childComplexity), true

	case "IosysCrawlSetting.createdAt":
		if e.complexity.IosysCrawlSetting.CreatedAt == nil {
			break
		}

		return e.complexity.IosysCrawlSetting.CreatedAt(childComplexity), true

	case "IosysCrawlSetting.enabled":
		if e.complexity.IosysCrawlSetting.Enabled == nil {
			break
		}

		return e.complexity.IosysCrawlSetting.Enabled(childComplexity), true

	case "IosysCrawlSetting.id":
		if e.complexity.IosysCrawlSetting.ID == nil {
			break
		}

		return e.complexity.IosysCrawlSetting.ID(childComplexity), true

	case "IosysCrawlSetting.iosysCrawlSettingExcludeKeywords":
		if e.complexity.IosysCrawlSetting.IosysCrawlSettingExcludeKeywords == nil {
			break
		}

		return e.complexity.IosysCrawlSetting.IosysCrawlSettingExcludeKeywords(childComplexity), true

	case "IosysCrawlSetting.iosysCrawlSettingExcludeProducts":
		if e.complexity.IosysCrawlSetting.IosysCrawlSettingExcludeProducts == nil {
			break
		}

		return e.complexity.IosysCrawlSetting.IosysCrawlSettingExcludeProducts(childComplexity), true

	case "IosysCrawlSetting.iosysCrawlSettingRequiredKeywords":
		if e.complexity.IosysCrawlSetting.IosysCrawlSettingRequiredKeywords == nil {
			break
		}

		return e.complexity.IosysCrawlSetting.IosysCrawlSettingRequiredKeywords(childComplexity), true

	case "IosysCrawlSetting.keyword":
		if e.complexity.IosysCrawlSetting.Keyword == nil {
			break
		}

		return e.complexity.IosysCrawlSetting.Keyword(childComplexity), true

	case "IosysCrawlSetting.maxPrice":
		if e.complexity.IosysCrawlSetting.MaxPrice == nil {
			break
		}

		return e.complexity.IosysCrawlSetting.MaxPrice(childComplexity), true

	case "IosysCrawlSetting.minPrice":
		if e.complexity.IosysCrawlSetting.MinPrice == nil {
			break
		}

		return e.complexity.IosysCrawlSetting.MinPrice(childComplexity), true

	case "IosysCrawlSetting.productId":
		if e.complexity.IosysCrawlSetting.ProductID == nil {
			break
		}

		return e.complexity.IosysCrawlSetting.ProductID(childComplexity), true

	case "IosysCrawlSetting.updatedAt":
		if e.complexity.IosysCrawlSetting.UpdatedAt == nil {
			break
		}

		return e.complexity.IosysCrawlSetting.UpdatedAt(childComplexity), true

	case "IosysCrawlSettingExcludeKeyword.createdAt":
		if e.complexity.IosysCrawlSettingExcludeKeyword.CreatedAt == nil {
			break
		}

		return e.complexity.IosysCrawlSettingExcludeKeyword.CreatedAt(childComplexity), true

	case "IosysCrawlSettingExcludeKeyword.id":
		if e.complexity.IosysCrawlSettingExcludeKeyword.ID == nil {
			break
		}

		return e.complexity.IosysCrawlSettingExcludeKeyword.ID(childComplexity), true

	case "IosysCrawlSettingExcludeKeyword.iosysCrawlSettingId":
		if e.complexity.IosysCrawlSettingExcludeKeyword.IosysCrawlSettingID == nil {
			break
		}

		return e.complexity.IosysCrawlSettingExcludeKeyword.IosysCrawlSettingID(childComplexity), true

	case "IosysCrawlSettingExcludeKeyword.keyword":
		if e.complexity.IosysCrawlSettingExcludeKeyword.Keyword == nil {
			break
		}

		return e.complexity.IosysCrawlSettingExcludeKeyword.Keyword(childComplexity), true

	case "IosysCrawlSettingExcludeKeyword.updatedAt":
		if e.complexity.IosysCrawlSettingExcludeKeyword.UpdatedAt == nil {
			break
		}

		return e.complexity.IosysCrawlSettingExcludeKeyword.UpdatedAt(childComplexity), true

	case "IosysCrawlSettingExcludeProduct.createdAt":
		if e.complexity.IosysCrawlSettingExcludeProduct.CreatedAt == nil {
			break
		}

		return e.complexity.IosysCrawlSettingExcludeProduct.CreatedAt(childComplexity), true

	case "IosysCrawlSettingExcludeProduct.externalId":
		if e.complexity.IosysCrawlSettingExcludeProduct.ExternalID == nil {
			break
		}

		return e.complexity.IosysCrawlSettingExcludeProduct.ExternalID(childComplexity), true

	case "IosysCrawlSettingExcludeProduct.id":
		if e.complexity.IosysCrawlSettingExcludeProduct.ID == nil {
			break
		}

		return e.complexity.IosysCrawlSettingExcludeProduct.ID(childComplexity), true

	case "IosysCrawlSettingExcludeProduct.iosysCrawlSettingId":
		if e.complexity.IosysCrawlSettingExcludeProduct.IosysCrawlSettingID == nil {
			break
		}

		return e.complexity.IosysCrawlSettingExcludeProduct.IosysCrawlSettingID(childComplexity), true

	case "IosysCrawlSettingExcludeProduct.updatedAt":
		if e.complexity.IosysCrawlSettingExcludeProduct.UpdatedAt == nil {
			break
		}

		return e.complexity.IosysCrawlSettingExcludeProduct.UpdatedAt(childComplexity), true

	case "IosysCrawlSettingRequiredKeyword.createdAt":
		if e.complexity.IosysCrawlSettingRequiredKeyword.CreatedAt == nil {
			break
		}

		return e.complexity.IosysCrawlSettingRequiredKeyword.CreatedAt(childComplexity), true

	case "IosysCrawlSettingRequiredKeyword.id":
		if e.complexity.IosysCrawlSettingRequiredKeyword.ID == nil {
			break
		}

		return e.complexity.IosysCrawlSettingRequiredKeyword.ID(childComplexity), true

	case "IosysCrawlSettingRequiredKeyword.iosysCrawlSettingId":
		if e.complexity.IosysCrawlSettingRequiredKeyword.IosysCrawlSettingID == nil {
			break
		}

		return e.complexity.IosysCrawlSettingRequiredKeyword.IosysCrawlSettingID(childComplexity), true

	case "IosysCrawlSettingRequiredKeyword.keyword":
		if e.complexity.IosysCrawlSettingRequiredKeyword.Keyword == nil {
			break
		}

		return e.complexity.IosysCrawlSettingRequiredKeyword.Keyword(childComplexity), true

	case "IosysCrawlSettingRequiredKeyword.updatedAt":
		if e.complexity.IosysCrawlSettingRequiredKeyword.UpdatedAt == nil {
			break
		}

		return e.complexity.IosysCrawlSettingRequiredKeyword.UpdatedAt(childComplexity), true

	case "JanparaCrawlSetting.createdAt":
		if e.complexity.JanparaCrawlSetting.CreatedAt == nil {
			break
		}

		return e.complexity.JanparaCrawlSetting.CreatedAt(childComplexity), true

	case "JanparaCrawlSetting.enabled":
		if e.complexity.JanparaCrawlSetting.Enabled == nil {
			break
		}

		return e.complexity.JanparaCrawlSetting.Enabled(childComplexity), true

	case "JanparaCrawlSetting.id":
		if e.complexity.JanparaCrawlSetting.ID == nil {
			break
		}

		return e.complexity.JanparaCrawlSetting.ID(childComplexity), true

	case "JanparaCrawlSetting.janparaCrawlSettingExcludeKeywords":
		if e.complexity.JanparaCrawlSetting.JanparaCrawlSettingExcludeKeywords == nil {
			break
		}

		return e.complexity.JanparaCrawlSetting.JanparaCrawlSettingExcludeKeywords(childComplexity), true

	case "JanparaCrawlSetting.janparaCrawlSettingExcludeProducts":
		if e.complexity.JanparaCrawlSetting.JanparaCrawlSettingExcludeProducts == nil {
			break
		}

		return e.complexity.JanparaCrawlSetting.JanparaCrawlSettingExcludeProducts(childComplexity), true

	case "JanparaCrawlSetting.janparaCrawlSettingRequiredKeywords":
		if e.complexity.JanparaCrawlSetting.JanparaCrawlSettingRequiredKeywords == nil {
			break
		}

		return e.complexity.JanparaCrawlSetting.JanparaCrawlSettingRequiredKeywords(childComplexity), true

	case "JanparaCrawlSetting.keyword":
		if e.complexity.JanparaCrawlSetting.Keyword == nil {
			break
		}

		return e.complexity.JanparaCrawlSetting.Keyword(childComplexity), true

	case "JanparaCrawlSetting.maxPrice":
		if e.complexity.JanparaCrawlSetting.MaxPrice == nil {
			break
		}

		return e.complexity.JanparaCrawlSetting.MaxPrice(childComplexity), true

	case "JanparaCrawlSetting.minPrice":
		if e.complexity.JanparaCrawlSetting.MinPrice == nil {
			break
		}

		return e.complexity.JanparaCrawlSetting.MinPrice(childComplexity), true

	case "JanparaCrawlSetting.productId":
		if e.complexity.JanparaCrawlSetting.ProductID == nil {
			break
		}

		return e.complexity.JanparaCrawlSetting.ProductID(childComplexity), true

	case "JanparaCrawlSetting.updatedAt":
		if e.complexity.JanparaCrawlSetting.UpdatedAt == nil {
			break
		}

		return e.complexity.JanparaCrawlSetting.UpdatedAt(childComplexity), true

	case "JanparaCrawlSettingExcludeKeyword.createdAt":
		if e.complexity.JanparaCrawlSettingExcludeKeyword.CreatedAt == nil {
			break
		}

		return e.complexity.JanparaCrawlSettingExcludeKeyword.CreatedAt(childComplexity), true

	case "JanparaCrawlSettingExcludeKeyword.id":
		if e.complexity.JanparaCrawlSettingExcludeKeyword.ID == nil {
			break
		}

		return e.complexity.JanparaCrawlSettingExcludeKeyword.ID(childComplexity), true

	case "JanparaCrawlSettingExcludeKeyword.janparaCrawlSettingId":
		if e.complexity.JanparaCrawlSettingExcludeKeyword.JanparaCrawlSettingID == nil {
			break
		}

		return e.complexity.JanparaCrawlSettingExcludeKeyword.JanparaCrawlSettingID(childComplexity), true

	case "JanparaCrawlSettingExcludeKeyword.keyword":
		if e.complexity.JanparaCrawlSettingExcludeKeyword.Keyword == nil {
			break
		}

		return e.complexity.JanparaCrawlSettingExcludeKeyword.Keyword(childComplexity), true

	case "JanparaCrawlSettingExcludeKeyword.updatedAt":
		if e.complexity.JanparaCrawlSettingExcludeKeyword.UpdatedAt == nil {
			break
		}

		return e.complexity.JanparaCrawlSettingExcludeKeyword.UpdatedAt(childComplexity), true

	case "JanparaCrawlSettingExcludeProduct.createdAt":
		if e.complexity.JanparaCrawlSettingExcludeProduct.CreatedAt == nil {
			break
		}

		return e.complexity.JanparaCrawlSettingExcludeProduct.CreatedAt(childComplexity), true

	case "JanparaCrawlSettingExcludeProduct.externalId":
		if e.complexity.JanparaCrawlSettingExcludeProduct.ExternalID == nil {
			break
		}

		return e.complexity.JanparaCrawlSettingExcludeProduct.ExternalID(childComplexity), true

	case "JanparaCrawlSettingExcludeProduct.id":
		if e.complexity.JanparaCrawlSettingExcludeProduct.ID == nil {
			break
		}

		return e.complexity.JanparaCrawlSettingExcludeProduct.ID(childComplexity), true

	case "JanparaCrawlSettingExcludeProduct.janparaCrawlSettingId":
		if e.complexity.JanparaCrawlSettingExcludeProduct.JanparaCrawlSettingID == nil {
			break
		}

		return e.complexity.JanparaCrawlSettingExcludeProduct.JanparaCrawlSettingID(childComplexity), true

	case "JanparaCrawlSettingExcludeProduct.updatedAt":
		if e.complexity.JanparaCrawlSettingExcludeProduct.UpdatedAt == nil {
			break
		}

		return e.complexity.JanparaCrawlSettingExcludeProduct.UpdatedAt(childComplexity), true

	case "JanparaCrawlSettingRequiredKeyword.createdAt":
		if e.complexity.JanparaCrawlSettingRequiredKeyword.CreatedAt == nil {
			break
		}

		return e.complexity.JanparaCrawlSettingRequiredKeyword.CreatedAt(childComplexity), true

	case "JanparaCrawlSettingRequiredKeyword.id":
		if e.complexity.JanparaCrawlSettingRequiredKeyword.ID == nil {
			break
		}

		return e.complexity.JanparaCrawlSettingRequiredKeyword.ID(childComplexity), true

	case "JanparaCrawlSettingRequiredKeyword.janparaCrawlSettingId":
		if e.complexity.JanparaCrawlSettingRequiredKeyword.JanparaCrawlSettingID == nil {
			break
		}

		return e.complexity.JanparaCrawlSettingRequiredKeyword.JanparaCrawlSettingID(childComplexity), true

	case "JanparaCrawlSettingRequiredKeyword.keyword":
		if e.complexity.JanparaCrawlSettingRequiredKeyword.Keyword == nil {
			break
		}

		return e.complexity.JanparaCrawlSettingRequiredKeyword.Keyword(childComplexity), true

	case "JanparaCrawlSettingRequiredKeyword.updatedAt":
		if e.complexity.JanparaCrawlSettingRequiredKeyword.UpdatedAt == nil {
			break
		}

		return e.complexity.JanparaCrawlSettingRequiredKeyword.UpdatedAt(childComplexity), true

	case "MercariCrawlSetting.categoryId":
		if e.complexity.MercariCrawlSetting.CategoryID == nil {
			break
		}

		return e.complexity.MercariCrawlSetting.CategoryID(childComplexity), true

	case "MercariCrawlSetting.createdAt":
		if e.complexity.MercariCrawlSetting.CreatedAt == nil {
			break
		}

		return e.complexity.MercariCrawlSetting.CreatedAt(childComplexity), true

	case "MercariCrawlSetting.enabled":
		if e.complexity.MercariCrawlSetting.Enabled == nil {
			break
		}

		return e.complexity.MercariCrawlSetting.Enabled(childComplexity), true

	case "MercariCrawlSetting.id":
		if e.complexity.MercariCrawlSetting.ID == nil {
			break
		}

		return e.complexity.MercariCrawlSetting.ID(childComplexity), true

	case "MercariCrawlSetting.keyword":
		if e.complexity.MercariCrawlSetting.Keyword == nil {
			break
		}

		return e.complexity.MercariCrawlSetting.Keyword(childComplexity), true

	case "MercariCrawlSetting.maxPrice":
		if e.complexity.MercariCrawlSetting.MaxPrice == nil {
			break
		}

		return e.complexity.MercariCrawlSetting.MaxPrice(childComplexity), true

	case "MercariCrawlSetting.mercariCrawlSettingExcludeKeywords":
		if e.complexity.MercariCrawlSetting.MercariCrawlSettingExcludeKeywords == nil {
			break
		}

		return e.complexity.MercariCrawlSetting.MercariCrawlSettingExcludeKeywords(childComplexity), true

	case "MercariCrawlSetting.mercariCrawlSettingExcludeProducts":
		if e.complexity.MercariCrawlSetting.MercariCrawlSettingExcludeProducts == nil {
			break
		}

		return e.complexity.MercariCrawlSetting.MercariCrawlSettingExcludeProducts(childComplexity), true

	case "MercariCrawlSetting.mercariCrawlSettingRequiredKeywords":
		if e.complexity.MercariCrawlSetting.MercariCrawlSettingRequiredKeywords == nil {
			break
		}

		return e.complexity.MercariCrawlSetting.MercariCrawlSettingRequiredKeywords(childComplexity), true

	case "MercariCrawlSetting.minPrice":
		if e.complexity.MercariCrawlSetting.MinPrice == nil {
			break
		}

		return e.complexity.MercariCrawlSetting.MinPrice(childComplexity), true

	case "MercariCrawlSetting.productId":
		if e.complexity.MercariCrawlSetting.ProductID == nil {
			break
		}

		return e.complexity.MercariCrawlSetting.ProductID(childComplexity), true

	case "MercariCrawlSetting.updatedAt":
		if e.complexity.MercariCrawlSetting.UpdatedAt == nil {
			break
		}

		return e.complexity.MercariCrawlSetting.UpdatedAt(childComplexity), true

	case "MercariCrawlSettingExcludeKeyword.createdAt":
		if e.complexity.MercariCrawlSettingExcludeKeyword.CreatedAt == nil {
			break
		}

		return e.complexity.MercariCrawlSettingExcludeKeyword.CreatedAt(childComplexity), true

	case "MercariCrawlSettingExcludeKeyword.id":
		if e.complexity.MercariCrawlSettingExcludeKeyword.ID == nil {
			break
		}

		return e.complexity.MercariCrawlSettingExcludeKeyword.ID(childComplexity), true

	case "MercariCrawlSettingExcludeKeyword.keyword":
		if e.complexity.MercariCrawlSettingExcludeKeyword.Keyword == nil {
			break
		}

		return e.complexity.MercariCrawlSettingExcludeKeyword.Keyword(childComplexity), true

	case "MercariCrawlSettingExcludeKeyword.mercariCrawlSettingId":
		if e.complexity.MercariCrawlSettingExcludeKeyword.MercariCrawlSettingID == nil {
			break
		}

		return e.complexity.MercariCrawlSettingExcludeKeyword.MercariCrawlSettingID(childComplexity), true

	case "MercariCrawlSettingExcludeKeyword.updatedAt":
		if e.complexity.MercariCrawlSettingExcludeKeyword.UpdatedAt == nil {
			break
		}

		return e.complexity.MercariCrawlSettingExcludeKeyword.UpdatedAt(childComplexity), true

	case "MercariCrawlSettingExcludeProduct.createdAt":
		if e.complexity.MercariCrawlSettingExcludeProduct.CreatedAt == nil {
			break
		}

		return e.complexity.MercariCrawlSettingExcludeProduct.CreatedAt(childComplexity), true

	case "MercariCrawlSettingExcludeProduct.externalId":
		if e.complexity.MercariCrawlSettingExcludeProduct.ExternalID == nil {
			break
		}

		return e.complexity.MercariCrawlSettingExcludeProduct.ExternalID(childComplexity), true

	case "MercariCrawlSettingExcludeProduct.id":
		if e.complexity.MercariCrawlSettingExcludeProduct.ID == nil {
			break
		}

		return e.complexity.MercariCrawlSettingExcludeProduct.ID(childComplexity), true

	case "MercariCrawlSettingExcludeProduct.mercariCrawlSettingId":
		if e.complexity.MercariCrawlSettingExcludeProduct.MercariCrawlSettingID == nil {
			break
		}

		return e.complexity.MercariCrawlSettingExcludeProduct.MercariCrawlSettingID(childComplexity), true

	case "MercariCrawlSettingExcludeProduct.updatedAt":
		if e.complexity.MercariCrawlSettingExcludeProduct.UpdatedAt == nil {
			break
		}

		return e.complexity.MercariCrawlSettingExcludeProduct.UpdatedAt(childComplexity), true

	case "MercariCrawlSettingRequiredKeyword.createdAt":
		if e.complexity.MercariCrawlSettingRequiredKeyword.CreatedAt == nil {
			break
		}

		return e.complexity.MercariCrawlSettingRequiredKeyword.CreatedAt(childComplexity), true

	case "MercariCrawlSettingRequiredKeyword.id":
		if e.complexity.MercariCrawlSettingRequiredKeyword.ID == nil {
			break
		}

		return e.complexity.MercariCrawlSettingRequiredKeyword.ID(childComplexity), true

	case "MercariCrawlSettingRequiredKeyword.keyword":
		if e.complexity.MercariCrawlSettingRequiredKeyword.Keyword == nil {
			break
		}

		return e.complexity.MercariCrawlSettingRequiredKeyword.Keyword(childComplexity), true

	case "MercariCrawlSettingRequiredKeyword.mercariCrawlSettingId":
		if e.complexity.MercariCrawlSettingRequiredKeyword.MercariCrawlSettingID == nil {
			break
		}

		return e.complexity.MercariCrawlSettingRequiredKeyword.MercariCrawlSettingID(childComplexity), true

	case "MercariCrawlSettingRequiredKeyword.updatedAt":
		if e.complexity.MercariCrawlSettingRequiredKeyword.UpdatedAt == nil {
			break
		}

		return e.complexity.MercariCrawlSettingRequiredKeyword.UpdatedAt(childComplexity), true

	case "MercariDailyPurchaseSummary.averagePurchasePrice":
		if e.complexity.MercariDailyPurchaseSummary.AveragePurchasePrice == nil {
			break
		}

		return e.complexity.MercariDailyPurchaseSummary.AveragePurchasePrice(childComplexity), true

	case "MercariDailyPurchaseSummary.createdAt":
		if e.complexity.MercariDailyPurchaseSummary.CreatedAt == nil {
			break
		}

		return e.complexity.MercariDailyPurchaseSummary.CreatedAt(childComplexity), true

	case "MercariDailyPurchaseSummary.date":
		if e.complexity.MercariDailyPurchaseSummary.Date == nil {
			break
		}

		return e.complexity.MercariDailyPurchaseSummary.Date(childComplexity), true

	case "MercariDailyPurchaseSummary.id":
		if e.complexity.MercariDailyPurchaseSummary.ID == nil {
			break
		}

		return e.complexity.MercariDailyPurchaseSummary.ID(childComplexity), true

	case "MercariDailyPurchaseSummary.productId":
		if e.complexity.MercariDailyPurchaseSummary.ProductID == nil {
			break
		}

		return e.complexity.MercariDailyPurchaseSummary.ProductID(childComplexity), true

	case "MercariDailyPurchaseSummary.purchaseCount":
		if e.complexity.MercariDailyPurchaseSummary.PurchaseCount == nil {
			break
		}

		return e.complexity.MercariDailyPurchaseSummary.PurchaseCount(childComplexity), true

	case "MercariDailyPurchaseSummary.updatedAt":
		if e.complexity.MercariDailyPurchaseSummary.UpdatedAt == nil {
			break
		}

		return e.complexity.MercariDailyPurchaseSummary.UpdatedAt(childComplexity), true

	case "MercariProduct.boughtDate":
		if e.complexity.MercariProduct.BoughtDate == nil {
			break
		}

		return e.complexity.MercariProduct.BoughtDate(childComplexity), true

	case "MercariProduct.createdAt":
		if e.complexity.MercariProduct.CreatedAt == nil {
			break
		}

		return e.complexity.MercariProduct.CreatedAt(childComplexity), true

	case "MercariProduct.id":
		if e.complexity.MercariProduct.ID == nil {
			break
		}

		return e.complexity.MercariProduct.ID(childComplexity), true

	case "MercariProduct.mercariId":
		if e.complexity.MercariProduct.MercariID == nil {
			break
		}

		return e.complexity.MercariProduct.MercariID(childComplexity), true

	case "MercariProduct.name":
		if e.complexity.MercariProduct.Name == nil {
			break
		}

		return e.complexity.MercariProduct.Name(childComplexity), true

	case "MercariProduct.price":
		if e.complexity.MercariProduct.Price == nil {
			break
		}

		return e.complexity.MercariProduct.Price(childComplexity), true

	case "MercariProduct.productId":
		if e.complexity.MercariProduct.ProductID == nil {
			break
		}

		return e.complexity.MercariProduct.ProductID(childComplexity), true

	case "MercariProduct.published":
		if e.complexity.MercariProduct.Published == nil {
			break
		}

		return e.complexity.MercariProduct.Published(childComplexity), true

	case "MercariProduct.thumbnailUrl":
		if e.complexity.MercariProduct.ThumbnailURL == nil {
			break
		}

		return e.complexity.MercariProduct.ThumbnailURL(childComplexity), true

	case "MercariProduct.updatedAt":
		if e.complexity.MercariProduct.UpdatedAt == nil {
			break
		}

		return e.complexity.MercariProduct.UpdatedAt(childComplexity), true

	case "Mutation.createIosysCrawlSettingExcludeKeyword":
		if e.complexity.Mutation.CreateIosysCrawlSettingExcludeKeyword == nil {
			break
		}

		args, err := ec.field_Mutation_createIosysCrawlSettingExcludeKeyword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateIosysCrawlSettingExcludeKeyword(childComplexity, args["input"].(model.CreateIosysCrawlSettingExcludeKeywordInput)), true

	case "Mutation.createIosysCrawlSettingExcludeProduct":
		if e.complexity.Mutation.CreateIosysCrawlSettingExcludeProduct == nil {
			break
		}

		args, err := ec.field_Mutation_createIosysCrawlSettingExcludeProduct_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateIosysCrawlSettingExcludeProduct(childComplexity, args["input"].(model.CreateIosysCrawlSettingExcludeProductInput)), true

	case "Mutation.createIosysCrawlSettingRequiredKeyword":
		if e.complexity.Mutation.CreateIosysCrawlSettingRequiredKeyword == nil {
			break
		}

		args, err := ec.field_Mutation_createIosysCrawlSettingRequiredKeyword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateIosysCrawlSettingRequiredKeyword(childComplexity, args["input"].(model.CreateIosysCrawlSettingRequiredKeywordInput)), true

	case "Mutation.createJanparaCrawlSettingExcludeKeyword":
		if e.complexity.Mutation.CreateJanparaCrawlSettingExcludeKeyword == nil {
			break
		}

		args, err := ec.field_Mutation_createJanparaCrawlSettingExcludeKeyword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateJanparaCrawlSettingExcludeKeyword(childComplexity, args["input"].(model.CreateJanparaCrawlSettingExcludeKeywordInput)), true

	case "Mutation.createJanparaCrawlSettingExcludeProduct":
		if e.complexity.Mutation.CreateJanparaCrawlSettingExcludeProduct == nil {
			break
		}

		args, err := ec.field_Mutation_createJanparaCrawlSettingExcludeProduct_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateJanparaCrawlSettingExcludeProduct(childComplexity, args["input"].(model.CreateJanparaCrawlSettingExcludeProductInput)), true

	case "Mutation.createJanparaCrawlSettingRequiredKeyword":
		if e.complexity.Mutation.CreateJanparaCrawlSettingRequiredKeyword == nil {
			break
		}

		args, err := ec.field_Mutation_createJanparaCrawlSettingRequiredKeyword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateJanparaCrawlSettingRequiredKeyword(childComplexity, args["input"].(model.CreateJanparaCrawlSettingRequiredKeywordInput)), true

	case "Mutation.createMercariCrawlSettingExcludeKeyword":
		if e.complexity.Mutation.CreateMercariCrawlSettingExcludeKeyword == nil {
			break
		}

		args, err := ec.field_Mutation_createMercariCrawlSettingExcludeKeyword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateMercariCrawlSettingExcludeKeyword(childComplexity, args["input"].(model.CreateMercariCrawlSettingExcludeKeywordInput)), true

	case "Mutation.createMercariCrawlSettingExcludeProduct":
		if e.complexity.Mutation.CreateMercariCrawlSettingExcludeProduct == nil {
			break
		}

		args, err := ec.field_Mutation_createMercariCrawlSettingExcludeProduct_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateMercariCrawlSettingExcludeProduct(childComplexity, args["input"].(model.CreateMercariCrawlSettingExcludeProductInput)), true

	case "Mutation.createMercariCrawlSettingRequiredKeyword":
		if e.complexity.Mutation.CreateMercariCrawlSettingRequiredKeyword == nil {
			break
		}

		args, err := ec.field_Mutation_createMercariCrawlSettingRequiredKeyword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateMercariCrawlSettingRequiredKeyword(childComplexity, args["input"].(model.CreateMercariCrawlSettingRequiredKeywordInput)), true

	case "Mutation.createPcKoubouCrawlSettingExcludeKeyword":
		if e.complexity.Mutation.CreatePcKoubouCrawlSettingExcludeKeyword == nil {
			break
		}

		args, err := ec.field_Mutation_createPcKoubouCrawlSettingExcludeKeyword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePcKoubouCrawlSettingExcludeKeyword(childComplexity, args["input"].(model.CreatePcKoubouCrawlSettingExcludeKeywordInput)), true

	case "Mutation.createPcKoubouCrawlSettingExcludeProduct":
		if e.complexity.Mutation.CreatePcKoubouCrawlSettingExcludeProduct == nil {
			break
		}

		args, err := ec.field_Mutation_createPcKoubouCrawlSettingExcludeProduct_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePcKoubouCrawlSettingExcludeProduct(childComplexity, args["input"].(model.CreatePcKoubouCrawlSettingExcludeProductInput)), true

	case "Mutation.createPcKoubouCrawlSettingRequiredKeyword":
		if e.complexity.Mutation.CreatePcKoubouCrawlSettingRequiredKeyword == nil {
			break
		}

		args, err := ec.field_Mutation_createPcKoubouCrawlSettingRequiredKeyword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePcKoubouCrawlSettingRequiredKeyword(childComplexity, args["input"].(model.CreatePcKoubouCrawlSettingRequiredKeywordInput)), true

	case "Mutation.createProduct":
		if e.complexity.Mutation.CreateProduct == nil {
			break
		}

		args, err := ec.field_Mutation_createProduct_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateProduct(childComplexity, args["input"].(model.CreateProductInput)), true

	case "Mutation.createYahooAuctionCrawlSettingExcludeKeyword":
		if e.complexity.Mutation.CreateYahooAuctionCrawlSettingExcludeKeyword == nil {
			break
		}

		args, err := ec.field_Mutation_createYahooAuctionCrawlSettingExcludeKeyword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateYahooAuctionCrawlSettingExcludeKeyword(childComplexity, args["input"].(model.CreateYahooAuctionCrawlSettingExcludeKeywordInput)), true

	case "Mutation.createYahooAuctionCrawlSettingExcludeProduct":
		if e.complexity.Mutation.CreateYahooAuctionCrawlSettingExcludeProduct == nil {
			break
		}

		args, err := ec.field_Mutation_createYahooAuctionCrawlSettingExcludeProduct_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateYahooAuctionCrawlSettingExcludeProduct(childComplexity, args["input"].(model.CreateYahooAuctionCrawlSettingExcludeProductInput)), true

	case "Mutation.createYahooAuctionCrawlSettingRequiredKeyword":
		if e.complexity.Mutation.CreateYahooAuctionCrawlSettingRequiredKeyword == nil {
			break
		}

		args, err := ec.field_Mutation_createYahooAuctionCrawlSettingRequiredKeyword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateYahooAuctionCrawlSettingRequiredKeyword(childComplexity, args["input"].(model.CreateYahooAuctionCrawlSettingRequiredKeywordInput)), true

	case "Mutation.deleteIosysCrawlSettingExcludeKeyword":
		if e.complexity.Mutation.DeleteIosysCrawlSettingExcludeKeyword == nil {
			break
		}

		args, err := ec.field_Mutation_deleteIosysCrawlSettingExcludeKeyword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteIosysCrawlSettingExcludeKeyword(childComplexity, args["id"].(string), args["productId"].(string)), true

	case "Mutation.deleteIosysCrawlSettingExcludeProduct":
		if e.complexity.Mutation.DeleteIosysCrawlSettingExcludeProduct == nil {
			break
		}

		args, err := ec.field_Mutation_deleteIosysCrawlSettingExcludeProduct_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteIosysCrawlSettingExcludeProduct(childComplexity, args["id"].(string), args["productId"].(string)), true

	case "Mutation.deleteIosysCrawlSettingRequiredKeyword":
		if e.complexity.Mutation.DeleteIosysCrawlSettingRequiredKeyword == nil {
			break
		}

		args, err := ec.field_Mutation_deleteIosysCrawlSettingRequiredKeyword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteIosysCrawlSettingRequiredKeyword(childComplexity, args["id"].(string), args["productId"].(string)), true

	case "Mutation.deleteJanparaCrawlSettingExcludeKeyword":
		if e.complexity.Mutation.DeleteJanparaCrawlSettingExcludeKeyword == nil {
			break
		}

		args, err := ec.field_Mutation_deleteJanparaCrawlSettingExcludeKeyword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteJanparaCrawlSettingExcludeKeyword(childComplexity, args["id"].(string), args["productId"].(string)), true

	case "Mutation.deleteJanparaCrawlSettingExcludeProduct":
		if e.complexity.Mutation.DeleteJanparaCrawlSettingExcludeProduct == nil {
			break
		}

		args, err := ec.field_Mutation_deleteJanparaCrawlSettingExcludeProduct_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteJanparaCrawlSettingExcludeProduct(childComplexity, args["id"].(string), args["productId"].(string)), true

	case "Mutation.deleteJanparaCrawlSettingRequiredKeyword":
		if e.complexity.Mutation.DeleteJanparaCrawlSettingRequiredKeyword == nil {
			break
		}

		args, err := ec.field_Mutation_deleteJanparaCrawlSettingRequiredKeyword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteJanparaCrawlSettingRequiredKeyword(childComplexity, args["id"].(string), args["productId"].(string)), true

	case "Mutation.deleteMercariCrawlSettingExcludeKeyword":
		if e.complexity.Mutation.DeleteMercariCrawlSettingExcludeKeyword == nil {
			break
		}

		args, err := ec.field_Mutation_deleteMercariCrawlSettingExcludeKeyword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteMercariCrawlSettingExcludeKeyword(childComplexity, args["id"].(string), args["productId"].(string)), true

	case "Mutation.deleteMercariCrawlSettingExcludeProduct":
		if e.complexity.Mutation.DeleteMercariCrawlSettingExcludeProduct == nil {
			break
		}

		args, err := ec.field_Mutation_deleteMercariCrawlSettingExcludeProduct_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteMercariCrawlSettingExcludeProduct(childComplexity, args["id"].(string), args["productId"].(string)), true

	case "Mutation.deleteMercariCrawlSettingRequiredKeyword":
		if e.complexity.Mutation.DeleteMercariCrawlSettingRequiredKeyword == nil {
			break
		}

		args, err := ec.field_Mutation_deleteMercariCrawlSettingRequiredKeyword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteMercariCrawlSettingRequiredKeyword(childComplexity, args["id"].(string), args["productId"].(string)), true

	case "Mutation.deletePcKoubouCrawlSettingExcludeKeyword":
		if e.complexity.Mutation.DeletePcKoubouCrawlSettingExcludeKeyword == nil {
			break
		}

		args, err := ec.field_Mutation_deletePcKoubouCrawlSettingExcludeKeyword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePcKoubouCrawlSettingExcludeKeyword(childComplexity, args["id"].(string), args["productId"].(string)), true

	case "Mutation.deletePcKoubouCrawlSettingExcludeProduct":
		if e.complexity.Mutation.DeletePcKoubouCrawlSettingExcludeProduct == nil {
			break
		}

		args, err := ec.field_Mutation_deletePcKoubouCrawlSettingExcludeProduct_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePcKoubouCrawlSettingExcludeProduct(childComplexity, args["id"].(string), args["productId"].(string)), true

	case "Mutation.deletePcKoubouCrawlSettingRequiredKeyword":
		if e.complexity.Mutation.DeletePcKoubouCrawlSettingRequiredKeyword == nil {
			break
		}

		args, err := ec.field_Mutation_deletePcKoubouCrawlSettingRequiredKeyword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePcKoubouCrawlSettingRequiredKeyword(childComplexity, args["id"].(string), args["productId"].(string)), true

	case "Mutation.deleteProduct":
		if e.complexity.Mutation.DeleteProduct == nil {
			break
		}

		args, err := ec.field_Mutation_deleteProduct_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteProduct(childComplexity, args["id"].(string)), true

	case "Mutation.deleteYahooAuctionCrawlSettingExcludeKeyword":
		if e.complexity.Mutation.DeleteYahooAuctionCrawlSettingExcludeKeyword == nil {
			break
		}

		args, err := ec.field_Mutation_deleteYahooAuctionCrawlSettingExcludeKeyword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteYahooAuctionCrawlSettingExcludeKeyword(childComplexity, args["id"].(string), args["productId"].(string)), true

	case "Mutation.deleteYahooAuctionCrawlSettingExcludeProduct":
		if e.complexity.Mutation.DeleteYahooAuctionCrawlSettingExcludeProduct == nil {
			break
		}

		args, err := ec.field_Mutation_deleteYahooAuctionCrawlSettingExcludeProduct_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteYahooAuctionCrawlSettingExcludeProduct(childComplexity, args["id"].(string), args["productId"].(string)), true

	case "Mutation.deleteYahooAuctionCrawlSettingRequiredKeyword":
		if e.complexity.Mutation.DeleteYahooAuctionCrawlSettingRequiredKeyword == nil {
			break
		}

		args, err := ec.field_Mutation_deleteYahooAuctionCrawlSettingRequiredKeyword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteYahooAuctionCrawlSettingRequiredKeyword(childComplexity, args["id"].(string), args["productId"].(string)), true

	case "Mutation.updateIosysCrawlSettingExcludeKeyword":
		if e.complexity.Mutation.UpdateIosysCrawlSettingExcludeKeyword == nil {
			break
		}

		args, err := ec.field_Mutation_updateIosysCrawlSettingExcludeKeyword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateIosysCrawlSettingExcludeKeyword(childComplexity, args["input"].(model.UpdateIosysCrawlSettingExcludeKeywordInput)), true

	case "Mutation.updateIosysCrawlSettingExcludeProduct":
		if e.complexity.Mutation.UpdateIosysCrawlSettingExcludeProduct == nil {
			break
		}

		args, err := ec.field_Mutation_updateIosysCrawlSettingExcludeProduct_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateIosysCrawlSettingExcludeProduct(childComplexity, args["input"].(model.UpdateIosysCrawlSettingExcludeProductInput)), true

	case "Mutation.updateIosysCrawlSettingRequiredKeyword":
		if e.complexity.Mutation.UpdateIosysCrawlSettingRequiredKeyword == nil {
			break
		}

		args, err := ec.field_Mutation_updateIosysCrawlSettingRequiredKeyword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateIosysCrawlSettingRequiredKeyword(childComplexity, args["input"].(model.UpdateIosysCrawlSettingRequiredKeywordInput)), true

	case "Mutation.updateJanparaCrawlSettingExcludeKeyword":
		if e.complexity.Mutation.UpdateJanparaCrawlSettingExcludeKeyword == nil {
			break
		}

		args, err := ec.field_Mutation_updateJanparaCrawlSettingExcludeKeyword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateJanparaCrawlSettingExcludeKeyword(childComplexity, args["input"].(model.UpdateJanparaCrawlSettingExcludeKeywordInput)), true

	case "Mutation.updateJanparaCrawlSettingExcludeProduct":
		if e.complexity.Mutation.UpdateJanparaCrawlSettingExcludeProduct == nil {
			break
		}

		args, err := ec.field_Mutation_updateJanparaCrawlSettingExcludeProduct_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateJanparaCrawlSettingExcludeProduct(childComplexity, args["input"].(model.UpdateJanparaCrawlSettingExcludeProductInput)), true

	case "Mutation.updateJanparaCrawlSettingRequiredKeyword":
		if e.complexity.Mutation.UpdateJanparaCrawlSettingRequiredKeyword == nil {
			break
		}

		args, err := ec.field_Mutation_updateJanparaCrawlSettingRequiredKeyword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateJanparaCrawlSettingRequiredKeyword(childComplexity, args["input"].(model.UpdateJanparaCrawlSettingRequiredKeywordInput)), true

	case "Mutation.updateMercariCrawlSettingExcludeKeyword":
		if e.complexity.Mutation.UpdateMercariCrawlSettingExcludeKeyword == nil {
			break
		}

		args, err := ec.field_Mutation_updateMercariCrawlSettingExcludeKeyword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMercariCrawlSettingExcludeKeyword(childComplexity, args["input"].(model.UpdateMercariCrawlSettingExcludeKeywordInput)), true

	case "Mutation.updateMercariCrawlSettingExcludeProduct":
		if e.complexity.Mutation.UpdateMercariCrawlSettingExcludeProduct == nil {
			break
		}

		args, err := ec.field_Mutation_updateMercariCrawlSettingExcludeProduct_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMercariCrawlSettingExcludeProduct(childComplexity, args["input"].(model.UpdateMercariCrawlSettingExcludeProductInput)), true

	case "Mutation.updateMercariCrawlSettingRequiredKeyword":
		if e.complexity.Mutation.UpdateMercariCrawlSettingRequiredKeyword == nil {
			break
		}

		args, err := ec.field_Mutation_updateMercariCrawlSettingRequiredKeyword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMercariCrawlSettingRequiredKeyword(childComplexity, args["input"].(model.UpdateMercariCrawlSettingRequiredKeywordInput)), true

	case "Mutation.updatePcKoubouCrawlSettingExcludeKeyword":
		if e.complexity.Mutation.UpdatePcKoubouCrawlSettingExcludeKeyword == nil {
			break
		}

		args, err := ec.field_Mutation_updatePcKoubouCrawlSettingExcludeKeyword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePcKoubouCrawlSettingExcludeKeyword(childComplexity, args["input"].(model.UpdatePcKoubouCrawlSettingExcludeKeywordInput)), true

	case "Mutation.updatePcKoubouCrawlSettingExcludeProduct":
		if e.complexity.Mutation.UpdatePcKoubouCrawlSettingExcludeProduct == nil {
			break
		}

		args, err := ec.field_Mutation_updatePcKoubouCrawlSettingExcludeProduct_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePcKoubouCrawlSettingExcludeProduct(childComplexity, args["input"].(model.UpdatePcKoubouCrawlSettingExcludeProductInput)), true

	case "Mutation.updatePcKoubouCrawlSettingRequiredKeyword":
		if e.complexity.Mutation.UpdatePcKoubouCrawlSettingRequiredKeyword == nil {
			break
		}

		args, err := ec.field_Mutation_updatePcKoubouCrawlSettingRequiredKeyword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePcKoubouCrawlSettingRequiredKeyword(childComplexity, args["input"].(model.UpdatePcKoubouCrawlSettingRequiredKeywordInput)), true

	case "Mutation.updateProduct":
		if e.complexity.Mutation.UpdateProduct == nil {
			break
		}

		args, err := ec.field_Mutation_updateProduct_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateProduct(childComplexity, args["id"].(string), args["input"].(model.UpdateProductInput)), true

	case "Mutation.updateYahooAuctionCrawlSettingExcludeKeyword":
		if e.complexity.Mutation.UpdateYahooAuctionCrawlSettingExcludeKeyword == nil {
			break
		}

		args, err := ec.field_Mutation_updateYahooAuctionCrawlSettingExcludeKeyword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateYahooAuctionCrawlSettingExcludeKeyword(childComplexity, args["input"].(model.UpdateYahooAuctionCrawlSettingExcludeKeywordInput)), true

	case "Mutation.updateYahooAuctionCrawlSettingExcludeProduct":
		if e.complexity.Mutation.UpdateYahooAuctionCrawlSettingExcludeProduct == nil {
			break
		}

		args, err := ec.field_Mutation_updateYahooAuctionCrawlSettingExcludeProduct_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateYahooAuctionCrawlSettingExcludeProduct(childComplexity, args["input"].(model.UpdateYahooAuctionCrawlSettingExcludeProductInput)), true

	case "Mutation.updateYahooAuctionCrawlSettingRequiredKeyword":
		if e.complexity.Mutation.UpdateYahooAuctionCrawlSettingRequiredKeyword == nil {
			break
		}

		args, err := ec.field_Mutation_updateYahooAuctionCrawlSettingRequiredKeyword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateYahooAuctionCrawlSettingRequiredKeyword(childComplexity, args["input"].(model.UpdateYahooAuctionCrawlSettingRequiredKeywordInput)), true

	case "PcKoubouCrawlSetting.createdAt":
		if e.complexity.PcKoubouCrawlSetting.CreatedAt == nil {
			break
		}

		return e.complexity.PcKoubouCrawlSetting.CreatedAt(childComplexity), true

	case "PcKoubouCrawlSetting.enabled":
		if e.complexity.PcKoubouCrawlSetting.Enabled == nil {
			break
		}

		return e.complexity.PcKoubouCrawlSetting.Enabled(childComplexity), true

	case "PcKoubouCrawlSetting.id":
		if e.complexity.PcKoubouCrawlSetting.ID == nil {
			break
		}

		return e.complexity.PcKoubouCrawlSetting.ID(childComplexity), true

	case "PcKoubouCrawlSetting.keyword":
		if e.complexity.PcKoubouCrawlSetting.Keyword == nil {
			break
		}

		return e.complexity.PcKoubouCrawlSetting.Keyword(childComplexity), true

	case "PcKoubouCrawlSetting.maxPrice":
		if e.complexity.PcKoubouCrawlSetting.MaxPrice == nil {
			break
		}

		return e.complexity.PcKoubouCrawlSetting.MaxPrice(childComplexity), true

	case "PcKoubouCrawlSetting.minPrice":
		if e.complexity.PcKoubouCrawlSetting.MinPrice == nil {
			break
		}

		return e.complexity.PcKoubouCrawlSetting.MinPrice(childComplexity), true

	case "PcKoubouCrawlSetting.pcKoubouCrawlSettingExcludeKeywords":
		if e.complexity.PcKoubouCrawlSetting.PcKoubouCrawlSettingExcludeKeywords == nil {
			break
		}

		return e.complexity.PcKoubouCrawlSetting.PcKoubouCrawlSettingExcludeKeywords(childComplexity), true

	case "PcKoubouCrawlSetting.pcKoubouCrawlSettingExcludeProducts":
		if e.complexity.PcKoubouCrawlSetting.PcKoubouCrawlSettingExcludeProducts == nil {
			break
		}

		return e.complexity.PcKoubouCrawlSetting.PcKoubouCrawlSettingExcludeProducts(childComplexity), true

	case "PcKoubouCrawlSetting.pcKoubouCrawlSettingRequiredKeywords":
		if e.complexity.PcKoubouCrawlSetting.PcKoubouCrawlSettingRequiredKeywords == nil {
			break
		}

		return e.complexity.PcKoubouCrawlSetting.PcKoubouCrawlSettingRequiredKeywords(childComplexity), true

	case "PcKoubouCrawlSetting.productId":
		if e.complexity.PcKoubouCrawlSetting.ProductID == nil {
			break
		}

		return e.complexity.PcKoubouCrawlSetting.ProductID(childComplexity), true

	case "PcKoubouCrawlSetting.updatedAt":
		if e.complexity.PcKoubouCrawlSetting.UpdatedAt == nil {
			break
		}

		return e.complexity.PcKoubouCrawlSetting.UpdatedAt(childComplexity), true

	case "PcKoubouCrawlSettingExcludeKeyword.createdAt":
		if e.complexity.PcKoubouCrawlSettingExcludeKeyword.CreatedAt == nil {
			break
		}

		return e.complexity.PcKoubouCrawlSettingExcludeKeyword.CreatedAt(childComplexity), true

	case "PcKoubouCrawlSettingExcludeKeyword.id":
		if e.complexity.PcKoubouCrawlSettingExcludeKeyword.ID == nil {
			break
		}

		return e.complexity.PcKoubouCrawlSettingExcludeKeyword.ID(childComplexity), true

	case "PcKoubouCrawlSettingExcludeKeyword.keyword":
		if e.complexity.PcKoubouCrawlSettingExcludeKeyword.Keyword == nil {
			break
		}

		return e.complexity.PcKoubouCrawlSettingExcludeKeyword.Keyword(childComplexity), true

	case "PcKoubouCrawlSettingExcludeKeyword.pcKoubouCrawlSettingId":
		if e.complexity.PcKoubouCrawlSettingExcludeKeyword.PcKoubouCrawlSettingID == nil {
			break
		}

		return e.complexity.PcKoubouCrawlSettingExcludeKeyword.PcKoubouCrawlSettingID(childComplexity), true

	case "PcKoubouCrawlSettingExcludeKeyword.updatedAt":
		if e.complexity.PcKoubouCrawlSettingExcludeKeyword.UpdatedAt == nil {
			break
		}

		return e.complexity.PcKoubouCrawlSettingExcludeKeyword.UpdatedAt(childComplexity), true

	case "PcKoubouCrawlSettingExcludeProduct.createdAt":
		if e.complexity.PcKoubouCrawlSettingExcludeProduct.CreatedAt == nil {
			break
		}

		return e.complexity.PcKoubouCrawlSettingExcludeProduct.CreatedAt(childComplexity), true

	case "PcKoubouCrawlSettingExcludeProduct.externalId":
		if e.complexity.PcKoubouCrawlSettingExcludeProduct.ExternalID == nil {
			break
		}

		return e.complexity.PcKoubouCrawlSettingExcludeProduct.ExternalID(childComplexity), true

	case "PcKoubouCrawlSettingExcludeProduct.id":
		if e.complexity.PcKoubouCrawlSettingExcludeProduct.ID == nil {
			break
		}

		return e.complexity.PcKoubouCrawlSettingExcludeProduct.ID(childComplexity), true

	case "PcKoubouCrawlSettingExcludeProduct.pcKoubouCrawlSettingId":
		if e.complexity.PcKoubouCrawlSettingExcludeProduct.PcKoubouCrawlSettingID == nil {
			break
		}

		return e.complexity.PcKoubouCrawlSettingExcludeProduct.PcKoubouCrawlSettingID(childComplexity), true

	case "PcKoubouCrawlSettingExcludeProduct.updatedAt":
		if e.complexity.PcKoubouCrawlSettingExcludeProduct.UpdatedAt == nil {
			break
		}

		return e.complexity.PcKoubouCrawlSettingExcludeProduct.UpdatedAt(childComplexity), true

	case "PcKoubouCrawlSettingRequiredKeyword.createdAt":
		if e.complexity.PcKoubouCrawlSettingRequiredKeyword.CreatedAt == nil {
			break
		}

		return e.complexity.PcKoubouCrawlSettingRequiredKeyword.CreatedAt(childComplexity), true

	case "PcKoubouCrawlSettingRequiredKeyword.id":
		if e.complexity.PcKoubouCrawlSettingRequiredKeyword.ID == nil {
			break
		}

		return e.complexity.PcKoubouCrawlSettingRequiredKeyword.ID(childComplexity), true

	case "PcKoubouCrawlSettingRequiredKeyword.keyword":
		if e.complexity.PcKoubouCrawlSettingRequiredKeyword.Keyword == nil {
			break
		}

		return e.complexity.PcKoubouCrawlSettingRequiredKeyword.Keyword(childComplexity), true

	case "PcKoubouCrawlSettingRequiredKeyword.pcKoubouCrawlSettingId":
		if e.complexity.PcKoubouCrawlSettingRequiredKeyword.PcKoubouCrawlSettingID == nil {
			break
		}

		return e.complexity.PcKoubouCrawlSettingRequiredKeyword.PcKoubouCrawlSettingID(childComplexity), true

	case "PcKoubouCrawlSettingRequiredKeyword.updatedAt":
		if e.complexity.PcKoubouCrawlSettingRequiredKeyword.UpdatedAt == nil {
			break
		}

		return e.complexity.PcKoubouCrawlSettingRequiredKeyword.UpdatedAt(childComplexity), true

	case "Product.id":
		if e.complexity.Product.ID == nil {
			break
		}

		return e.complexity.Product.ID(childComplexity), true

	case "Product.iosysCrawlSetting":
		if e.complexity.Product.IosysCrawlSetting == nil {
			break
		}

		return e.complexity.Product.IosysCrawlSetting(childComplexity), true

	case "Product.janparaCrawlSetting":
		if e.complexity.Product.JanparaCrawlSetting == nil {
			break
		}

		return e.complexity.Product.JanparaCrawlSetting(childComplexity), true

	case "Product.mercariCrawlSetting":
		if e.complexity.Product.MercariCrawlSetting == nil {
			break
		}

		return e.complexity.Product.MercariCrawlSetting(childComplexity), true

	case "Product.mercariDailyPurchaseSummaries":
		if e.complexity.Product.MercariDailyPurchaseSummaries == nil {
			break
		}

		return e.complexity.Product.MercariDailyPurchaseSummaries(childComplexity), true

	case "Product.mercariProducts":
		if e.complexity.Product.MercariProducts == nil {
			break
		}

		args, err := ec.field_Product_mercariProducts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Product.MercariProducts(childComplexity, args["published"].(*bool), args["sort"].(*string), args["order"].(*string)), true

	case "Product.name":
		if e.complexity.Product.Name == nil {
			break
		}

		return e.complexity.Product.Name(childComplexity), true

	case "Product.pcKoubouCrawlSetting":
		if e.complexity.Product.PcKoubouCrawlSetting == nil {
			break
		}

		return e.complexity.Product.PcKoubouCrawlSetting(childComplexity), true

	case "Product.relatedProducts":
		if e.complexity.Product.RelatedProducts == nil {
			break
		}

		args, err := ec.field_Product_relatedProducts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Product.RelatedProducts(childComplexity, args["platformMask"].(string), args["page"].(*int), args["per"].(*int), args["sort"].(*string), args["order"].(*string)), true

	case "Product.yahooAuctionCrawlSetting":
		if e.complexity.Product.YahooAuctionCrawlSetting == nil {
			break
		}

		return e.complexity.Product.YahooAuctionCrawlSetting(childComplexity), true

	case "Product.yahooAuctionDailyPurchaseSummaries":
		if e.complexity.Product.YahooAuctionDailyPurchaseSummaries == nil {
			break
		}

		return e.complexity.Product.YahooAuctionDailyPurchaseSummaries(childComplexity), true

	case "Product.yahooAuctionProducts":
		if e.complexity.Product.YahooAuctionProducts == nil {
			break
		}

		args, err := ec.field_Product_yahooAuctionProducts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Product.YahooAuctionProducts(childComplexity, args["published"].(*bool), args["sort"].(*string), args["order"].(*string)), true

	case "Product.yahooFleamarketDailyPurchaseSummaries":
		if e.complexity.Product.YahooFleamarketDailyPurchaseSummaries == nil {
			break
		}

		return e.complexity.Product.YahooFleamarketDailyPurchaseSummaries(childComplexity), true

	case "Query.node":
		if e.complexity.Query.Node == nil {
			break
		}

		args, err := ec.field_Query_node_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Node(childComplexity, args["id"].(string)), true

	case "Query.product":
		if e.complexity.Query.Product == nil {
			break
		}

		args, err := ec.field_Query_product_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Product(childComplexity, args["id"].(string)), true

	case "Query.products":
		if e.complexity.Query.Products == nil {
			break
		}

		args, err := ec.field_Query_products_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Products(childComplexity, args["id"].(*string), args["name"].(*string)), true

	case "RelatedProduct.boughtDate":
		if e.complexity.RelatedProduct.BoughtDate == nil {
			break
		}

		return e.complexity.RelatedProduct.BoughtDate(childComplexity), true

	case "RelatedProduct.buyoutPrice":
		if e.complexity.RelatedProduct.BuyoutPrice == nil {
			break
		}

		return e.complexity.RelatedProduct.BuyoutPrice(childComplexity), true

	case "RelatedProduct.createdAt":
		if e.complexity.RelatedProduct.CreatedAt == nil {
			break
		}

		return e.complexity.RelatedProduct.CreatedAt(childComplexity), true

	case "RelatedProduct.endDate":
		if e.complexity.RelatedProduct.EndDate == nil {
			break
		}

		return e.complexity.RelatedProduct.EndDate(childComplexity), true

	case "RelatedProduct.externalId":
		if e.complexity.RelatedProduct.ExternalID == nil {
			break
		}

		return e.complexity.RelatedProduct.ExternalID(childComplexity), true

	case "RelatedProduct.name":
		if e.complexity.RelatedProduct.Name == nil {
			break
		}

		return e.complexity.RelatedProduct.Name(childComplexity), true

	case "RelatedProduct.platform":
		if e.complexity.RelatedProduct.Platform == nil {
			break
		}

		return e.complexity.RelatedProduct.Platform(childComplexity), true

	case "RelatedProduct.price":
		if e.complexity.RelatedProduct.Price == nil {
			break
		}

		return e.complexity.RelatedProduct.Price(childComplexity), true

	case "RelatedProduct.productId":
		if e.complexity.RelatedProduct.ProductID == nil {
			break
		}

		return e.complexity.RelatedProduct.ProductID(childComplexity), true

	case "RelatedProduct.published":
		if e.complexity.RelatedProduct.Published == nil {
			break
		}

		return e.complexity.RelatedProduct.Published(childComplexity), true

	case "RelatedProduct.thumbnailUrl":
		if e.complexity.RelatedProduct.ThumbnailURL == nil {
			break
		}

		return e.complexity.RelatedProduct.ThumbnailURL(childComplexity), true

	case "RelatedProduct.updatedAt":
		if e.complexity.RelatedProduct.UpdatedAt == nil {
			break
		}

		return e.complexity.RelatedProduct.UpdatedAt(childComplexity), true

	case "UpdateIosysCrawlSettingExcludeKeywordResultError.error":
		if e.complexity.UpdateIosysCrawlSettingExcludeKeywordResultError.Error == nil {
			break
		}

		return e.complexity.UpdateIosysCrawlSettingExcludeKeywordResultError.Error(childComplexity), true

	case "UpdateIosysCrawlSettingExcludeKeywordResultError.ok":
		if e.complexity.UpdateIosysCrawlSettingExcludeKeywordResultError.Ok == nil {
			break
		}

		return e.complexity.UpdateIosysCrawlSettingExcludeKeywordResultError.Ok(childComplexity), true

	case "UpdateIosysCrawlSettingExcludeKeywordResultSuccess.iosysCrawlSettingExcludeKeyword":
		if e.complexity.UpdateIosysCrawlSettingExcludeKeywordResultSuccess.IosysCrawlSettingExcludeKeyword == nil {
			break
		}

		return e.complexity.UpdateIosysCrawlSettingExcludeKeywordResultSuccess.IosysCrawlSettingExcludeKeyword(childComplexity), true

	case "UpdateIosysCrawlSettingExcludeKeywordResultSuccess.ok":
		if e.complexity.UpdateIosysCrawlSettingExcludeKeywordResultSuccess.Ok == nil {
			break
		}

		return e.complexity.UpdateIosysCrawlSettingExcludeKeywordResultSuccess.Ok(childComplexity), true

	case "UpdateIosysCrawlSettingExcludeKeywordResultValidationFailed.code":
		if e.complexity.UpdateIosysCrawlSettingExcludeKeywordResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.UpdateIosysCrawlSettingExcludeKeywordResultValidationFailed.Code(childComplexity), true

	case "UpdateIosysCrawlSettingExcludeKeywordResultValidationFailed.details":
		if e.complexity.UpdateIosysCrawlSettingExcludeKeywordResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.UpdateIosysCrawlSettingExcludeKeywordResultValidationFailed.Details(childComplexity), true

	case "UpdateIosysCrawlSettingExcludeKeywordResultValidationFailed.message":
		if e.complexity.UpdateIosysCrawlSettingExcludeKeywordResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.UpdateIosysCrawlSettingExcludeKeywordResultValidationFailed.Message(childComplexity), true

	case "UpdateIosysCrawlSettingExcludeProductResultError.error":
		if e.complexity.UpdateIosysCrawlSettingExcludeProductResultError.Error == nil {
			break
		}

		return e.complexity.UpdateIosysCrawlSettingExcludeProductResultError.Error(childComplexity), true

	case "UpdateIosysCrawlSettingExcludeProductResultError.ok":
		if e.complexity.UpdateIosysCrawlSettingExcludeProductResultError.Ok == nil {
			break
		}

		return e.complexity.UpdateIosysCrawlSettingExcludeProductResultError.Ok(childComplexity), true

	case "UpdateIosysCrawlSettingExcludeProductResultSuccess.iosysCrawlSettingExcludeProduct":
		if e.complexity.UpdateIosysCrawlSettingExcludeProductResultSuccess.IosysCrawlSettingExcludeProduct == nil {
			break
		}

		return e.complexity.UpdateIosysCrawlSettingExcludeProductResultSuccess.IosysCrawlSettingExcludeProduct(childComplexity), true

	case "UpdateIosysCrawlSettingExcludeProductResultSuccess.ok":
		if e.complexity.UpdateIosysCrawlSettingExcludeProductResultSuccess.Ok == nil {
			break
		}

		return e.complexity.UpdateIosysCrawlSettingExcludeProductResultSuccess.Ok(childComplexity), true

	case "UpdateIosysCrawlSettingExcludeProductResultValidationFailed.code":
		if e.complexity.UpdateIosysCrawlSettingExcludeProductResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.UpdateIosysCrawlSettingExcludeProductResultValidationFailed.Code(childComplexity), true

	case "UpdateIosysCrawlSettingExcludeProductResultValidationFailed.details":
		if e.complexity.UpdateIosysCrawlSettingExcludeProductResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.UpdateIosysCrawlSettingExcludeProductResultValidationFailed.Details(childComplexity), true

	case "UpdateIosysCrawlSettingExcludeProductResultValidationFailed.message":
		if e.complexity.UpdateIosysCrawlSettingExcludeProductResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.UpdateIosysCrawlSettingExcludeProductResultValidationFailed.Message(childComplexity), true

	case "UpdateIosysCrawlSettingRequiredKeywordResultError.error":
		if e.complexity.UpdateIosysCrawlSettingRequiredKeywordResultError.Error == nil {
			break
		}

		return e.complexity.UpdateIosysCrawlSettingRequiredKeywordResultError.Error(childComplexity), true

	case "UpdateIosysCrawlSettingRequiredKeywordResultError.ok":
		if e.complexity.UpdateIosysCrawlSettingRequiredKeywordResultError.Ok == nil {
			break
		}

		return e.complexity.UpdateIosysCrawlSettingRequiredKeywordResultError.Ok(childComplexity), true

	case "UpdateIosysCrawlSettingRequiredKeywordResultSuccess.iosysCrawlSettingRequiredKeyword":
		if e.complexity.UpdateIosysCrawlSettingRequiredKeywordResultSuccess.IosysCrawlSettingRequiredKeyword == nil {
			break
		}

		return e.complexity.UpdateIosysCrawlSettingRequiredKeywordResultSuccess.IosysCrawlSettingRequiredKeyword(childComplexity), true

	case "UpdateIosysCrawlSettingRequiredKeywordResultSuccess.ok":
		if e.complexity.UpdateIosysCrawlSettingRequiredKeywordResultSuccess.Ok == nil {
			break
		}

		return e.complexity.UpdateIosysCrawlSettingRequiredKeywordResultSuccess.Ok(childComplexity), true

	case "UpdateIosysCrawlSettingRequiredKeywordResultValidationFailed.code":
		if e.complexity.UpdateIosysCrawlSettingRequiredKeywordResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.UpdateIosysCrawlSettingRequiredKeywordResultValidationFailed.Code(childComplexity), true

	case "UpdateIosysCrawlSettingRequiredKeywordResultValidationFailed.details":
		if e.complexity.UpdateIosysCrawlSettingRequiredKeywordResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.UpdateIosysCrawlSettingRequiredKeywordResultValidationFailed.Details(childComplexity), true

	case "UpdateIosysCrawlSettingRequiredKeywordResultValidationFailed.message":
		if e.complexity.UpdateIosysCrawlSettingRequiredKeywordResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.UpdateIosysCrawlSettingRequiredKeywordResultValidationFailed.Message(childComplexity), true

	case "UpdateJanparaCrawlSettingExcludeKeywordResultError.error":
		if e.complexity.UpdateJanparaCrawlSettingExcludeKeywordResultError.Error == nil {
			break
		}

		return e.complexity.UpdateJanparaCrawlSettingExcludeKeywordResultError.Error(childComplexity), true

	case "UpdateJanparaCrawlSettingExcludeKeywordResultError.ok":
		if e.complexity.UpdateJanparaCrawlSettingExcludeKeywordResultError.Ok == nil {
			break
		}

		return e.complexity.UpdateJanparaCrawlSettingExcludeKeywordResultError.Ok(childComplexity), true

	case "UpdateJanparaCrawlSettingExcludeKeywordResultSuccess.janparaCrawlSettingExcludeKeyword":
		if e.complexity.UpdateJanparaCrawlSettingExcludeKeywordResultSuccess.JanparaCrawlSettingExcludeKeyword == nil {
			break
		}

		return e.complexity.UpdateJanparaCrawlSettingExcludeKeywordResultSuccess.JanparaCrawlSettingExcludeKeyword(childComplexity), true

	case "UpdateJanparaCrawlSettingExcludeKeywordResultSuccess.ok":
		if e.complexity.UpdateJanparaCrawlSettingExcludeKeywordResultSuccess.Ok == nil {
			break
		}

		return e.complexity.UpdateJanparaCrawlSettingExcludeKeywordResultSuccess.Ok(childComplexity), true

	case "UpdateJanparaCrawlSettingExcludeKeywordResultValidationFailed.code":
		if e.complexity.UpdateJanparaCrawlSettingExcludeKeywordResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.UpdateJanparaCrawlSettingExcludeKeywordResultValidationFailed.Code(childComplexity), true

	case "UpdateJanparaCrawlSettingExcludeKeywordResultValidationFailed.details":
		if e.complexity.UpdateJanparaCrawlSettingExcludeKeywordResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.UpdateJanparaCrawlSettingExcludeKeywordResultValidationFailed.Details(childComplexity), true

	case "UpdateJanparaCrawlSettingExcludeKeywordResultValidationFailed.message":
		if e.complexity.UpdateJanparaCrawlSettingExcludeKeywordResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.UpdateJanparaCrawlSettingExcludeKeywordResultValidationFailed.Message(childComplexity), true

	case "UpdateJanparaCrawlSettingExcludeProductResultError.error":
		if e.complexity.UpdateJanparaCrawlSettingExcludeProductResultError.Error == nil {
			break
		}

		return e.complexity.UpdateJanparaCrawlSettingExcludeProductResultError.Error(childComplexity), true

	case "UpdateJanparaCrawlSettingExcludeProductResultError.ok":
		if e.complexity.UpdateJanparaCrawlSettingExcludeProductResultError.Ok == nil {
			break
		}

		return e.complexity.UpdateJanparaCrawlSettingExcludeProductResultError.Ok(childComplexity), true

	case "UpdateJanparaCrawlSettingExcludeProductResultSuccess.janparaCrawlSettingExcludeProduct":
		if e.complexity.UpdateJanparaCrawlSettingExcludeProductResultSuccess.JanparaCrawlSettingExcludeProduct == nil {
			break
		}

		return e.complexity.UpdateJanparaCrawlSettingExcludeProductResultSuccess.JanparaCrawlSettingExcludeProduct(childComplexity), true

	case "UpdateJanparaCrawlSettingExcludeProductResultSuccess.ok":
		if e.complexity.UpdateJanparaCrawlSettingExcludeProductResultSuccess.Ok == nil {
			break
		}

		return e.complexity.UpdateJanparaCrawlSettingExcludeProductResultSuccess.Ok(childComplexity), true

	case "UpdateJanparaCrawlSettingExcludeProductResultValidationFailed.code":
		if e.complexity.UpdateJanparaCrawlSettingExcludeProductResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.UpdateJanparaCrawlSettingExcludeProductResultValidationFailed.Code(childComplexity), true

	case "UpdateJanparaCrawlSettingExcludeProductResultValidationFailed.details":
		if e.complexity.UpdateJanparaCrawlSettingExcludeProductResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.UpdateJanparaCrawlSettingExcludeProductResultValidationFailed.Details(childComplexity), true

	case "UpdateJanparaCrawlSettingExcludeProductResultValidationFailed.message":
		if e.complexity.UpdateJanparaCrawlSettingExcludeProductResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.UpdateJanparaCrawlSettingExcludeProductResultValidationFailed.Message(childComplexity), true

	case "UpdateJanparaCrawlSettingRequiredKeywordResultError.error":
		if e.complexity.UpdateJanparaCrawlSettingRequiredKeywordResultError.Error == nil {
			break
		}

		return e.complexity.UpdateJanparaCrawlSettingRequiredKeywordResultError.Error(childComplexity), true

	case "UpdateJanparaCrawlSettingRequiredKeywordResultError.ok":
		if e.complexity.UpdateJanparaCrawlSettingRequiredKeywordResultError.Ok == nil {
			break
		}

		return e.complexity.UpdateJanparaCrawlSettingRequiredKeywordResultError.Ok(childComplexity), true

	case "UpdateJanparaCrawlSettingRequiredKeywordResultSuccess.janparaCrawlSettingRequiredKeyword":
		if e.complexity.UpdateJanparaCrawlSettingRequiredKeywordResultSuccess.JanparaCrawlSettingRequiredKeyword == nil {
			break
		}

		return e.complexity.UpdateJanparaCrawlSettingRequiredKeywordResultSuccess.JanparaCrawlSettingRequiredKeyword(childComplexity), true

	case "UpdateJanparaCrawlSettingRequiredKeywordResultSuccess.ok":
		if e.complexity.UpdateJanparaCrawlSettingRequiredKeywordResultSuccess.Ok == nil {
			break
		}

		return e.complexity.UpdateJanparaCrawlSettingRequiredKeywordResultSuccess.Ok(childComplexity), true

	case "UpdateJanparaCrawlSettingRequiredKeywordResultValidationFailed.code":
		if e.complexity.UpdateJanparaCrawlSettingRequiredKeywordResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.UpdateJanparaCrawlSettingRequiredKeywordResultValidationFailed.Code(childComplexity), true

	case "UpdateJanparaCrawlSettingRequiredKeywordResultValidationFailed.details":
		if e.complexity.UpdateJanparaCrawlSettingRequiredKeywordResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.UpdateJanparaCrawlSettingRequiredKeywordResultValidationFailed.Details(childComplexity), true

	case "UpdateJanparaCrawlSettingRequiredKeywordResultValidationFailed.message":
		if e.complexity.UpdateJanparaCrawlSettingRequiredKeywordResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.UpdateJanparaCrawlSettingRequiredKeywordResultValidationFailed.Message(childComplexity), true

	case "UpdateMercariCrawlSettingExcludeKeywordResultError.error":
		if e.complexity.UpdateMercariCrawlSettingExcludeKeywordResultError.Error == nil {
			break
		}

		return e.complexity.UpdateMercariCrawlSettingExcludeKeywordResultError.Error(childComplexity), true

	case "UpdateMercariCrawlSettingExcludeKeywordResultError.ok":
		if e.complexity.UpdateMercariCrawlSettingExcludeKeywordResultError.Ok == nil {
			break
		}

		return e.complexity.UpdateMercariCrawlSettingExcludeKeywordResultError.Ok(childComplexity), true

	case "UpdateMercariCrawlSettingExcludeKeywordResultSuccess.mercariCrawlSettingExcludeKeyword":
		if e.complexity.UpdateMercariCrawlSettingExcludeKeywordResultSuccess.MercariCrawlSettingExcludeKeyword == nil {
			break
		}

		return e.complexity.UpdateMercariCrawlSettingExcludeKeywordResultSuccess.MercariCrawlSettingExcludeKeyword(childComplexity), true

	case "UpdateMercariCrawlSettingExcludeKeywordResultSuccess.ok":
		if e.complexity.UpdateMercariCrawlSettingExcludeKeywordResultSuccess.Ok == nil {
			break
		}

		return e.complexity.UpdateMercariCrawlSettingExcludeKeywordResultSuccess.Ok(childComplexity), true

	case "UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed.code":
		if e.complexity.UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed.Code(childComplexity), true

	case "UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed.details":
		if e.complexity.UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed.Details(childComplexity), true

	case "UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed.message":
		if e.complexity.UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed.Message(childComplexity), true

	case "UpdateMercariCrawlSettingExcludeProductResultError.error":
		if e.complexity.UpdateMercariCrawlSettingExcludeProductResultError.Error == nil {
			break
		}

		return e.complexity.UpdateMercariCrawlSettingExcludeProductResultError.Error(childComplexity), true

	case "UpdateMercariCrawlSettingExcludeProductResultError.ok":
		if e.complexity.UpdateMercariCrawlSettingExcludeProductResultError.Ok == nil {
			break
		}

		return e.complexity.UpdateMercariCrawlSettingExcludeProductResultError.Ok(childComplexity), true

	case "UpdateMercariCrawlSettingExcludeProductResultSuccess.mercariCrawlSettingExcludeProduct":
		if e.complexity.UpdateMercariCrawlSettingExcludeProductResultSuccess.MercariCrawlSettingExcludeProduct == nil {
			break
		}

		return e.complexity.UpdateMercariCrawlSettingExcludeProductResultSuccess.MercariCrawlSettingExcludeProduct(childComplexity), true

	case "UpdateMercariCrawlSettingExcludeProductResultSuccess.ok":
		if e.complexity.UpdateMercariCrawlSettingExcludeProductResultSuccess.Ok == nil {
			break
		}

		return e.complexity.UpdateMercariCrawlSettingExcludeProductResultSuccess.Ok(childComplexity), true

	case "UpdateMercariCrawlSettingExcludeProductResultValidationFailed.code":
		if e.complexity.UpdateMercariCrawlSettingExcludeProductResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.UpdateMercariCrawlSettingExcludeProductResultValidationFailed.Code(childComplexity), true

	case "UpdateMercariCrawlSettingExcludeProductResultValidationFailed.details":
		if e.complexity.UpdateMercariCrawlSettingExcludeProductResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.UpdateMercariCrawlSettingExcludeProductResultValidationFailed.Details(childComplexity), true

	case "UpdateMercariCrawlSettingExcludeProductResultValidationFailed.message":
		if e.complexity.UpdateMercariCrawlSettingExcludeProductResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.UpdateMercariCrawlSettingExcludeProductResultValidationFailed.Message(childComplexity), true

	case "UpdateMercariCrawlSettingRequiredKeywordResultError.error":
		if e.complexity.UpdateMercariCrawlSettingRequiredKeywordResultError.Error == nil {
			break
		}

		return e.complexity.UpdateMercariCrawlSettingRequiredKeywordResultError.Error(childComplexity), true

	case "UpdateMercariCrawlSettingRequiredKeywordResultError.ok":
		if e.complexity.UpdateMercariCrawlSettingRequiredKeywordResultError.Ok == nil {
			break
		}

		return e.complexity.UpdateMercariCrawlSettingRequiredKeywordResultError.Ok(childComplexity), true

	case "UpdateMercariCrawlSettingRequiredKeywordResultSuccess.mercariCrawlSettingRequiredKeyword":
		if e.complexity.UpdateMercariCrawlSettingRequiredKeywordResultSuccess.MercariCrawlSettingRequiredKeyword == nil {
			break
		}

		return e.complexity.UpdateMercariCrawlSettingRequiredKeywordResultSuccess.MercariCrawlSettingRequiredKeyword(childComplexity), true

	case "UpdateMercariCrawlSettingRequiredKeywordResultSuccess.ok":
		if e.complexity.UpdateMercariCrawlSettingRequiredKeywordResultSuccess.Ok == nil {
			break
		}

		return e.complexity.UpdateMercariCrawlSettingRequiredKeywordResultSuccess.Ok(childComplexity), true

	case "UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed.code":
		if e.complexity.UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed.Code(childComplexity), true

	case "UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed.details":
		if e.complexity.UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed.Details(childComplexity), true

	case "UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed.message":
		if e.complexity.UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed.Message(childComplexity), true

	case "UpdatePcKoubouCrawlSettingExcludeKeywordResultError.error":
		if e.complexity.UpdatePcKoubouCrawlSettingExcludeKeywordResultError.Error == nil {
			break
		}

		return e.complexity.UpdatePcKoubouCrawlSettingExcludeKeywordResultError.Error(childComplexity), true

	case "UpdatePcKoubouCrawlSettingExcludeKeywordResultError.ok":
		if e.complexity.UpdatePcKoubouCrawlSettingExcludeKeywordResultError.Ok == nil {
			break
		}

		return e.complexity.UpdatePcKoubouCrawlSettingExcludeKeywordResultError.Ok(childComplexity), true

	case "UpdatePcKoubouCrawlSettingExcludeKeywordResultSuccess.ok":
		if e.complexity.UpdatePcKoubouCrawlSettingExcludeKeywordResultSuccess.Ok == nil {
			break
		}

		return e.complexity.UpdatePcKoubouCrawlSettingExcludeKeywordResultSuccess.Ok(childComplexity), true

	case "UpdatePcKoubouCrawlSettingExcludeKeywordResultSuccess.pcKoubouCrawlSettingExcludeKeyword":
		if e.complexity.UpdatePcKoubouCrawlSettingExcludeKeywordResultSuccess.PcKoubouCrawlSettingExcludeKeyword == nil {
			break
		}

		return e.complexity.UpdatePcKoubouCrawlSettingExcludeKeywordResultSuccess.PcKoubouCrawlSettingExcludeKeyword(childComplexity), true

	case "UpdatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed.code":
		if e.complexity.UpdatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.UpdatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed.Code(childComplexity), true

	case "UpdatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed.details":
		if e.complexity.UpdatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.UpdatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed.Details(childComplexity), true

	case "UpdatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed.message":
		if e.complexity.UpdatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.UpdatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed.Message(childComplexity), true

	case "UpdatePcKoubouCrawlSettingExcludeProductResultError.error":
		if e.complexity.UpdatePcKoubouCrawlSettingExcludeProductResultError.Error == nil {
			break
		}

		return e.complexity.UpdatePcKoubouCrawlSettingExcludeProductResultError.Error(childComplexity), true

	case "UpdatePcKoubouCrawlSettingExcludeProductResultError.ok":
		if e.complexity.UpdatePcKoubouCrawlSettingExcludeProductResultError.Ok == nil {
			break
		}

		return e.complexity.UpdatePcKoubouCrawlSettingExcludeProductResultError.Ok(childComplexity), true

	case "UpdatePcKoubouCrawlSettingExcludeProductResultSuccess.ok":
		if e.complexity.UpdatePcKoubouCrawlSettingExcludeProductResultSuccess.Ok == nil {
			break
		}

		return e.complexity.UpdatePcKoubouCrawlSettingExcludeProductResultSuccess.Ok(childComplexity), true

	case "UpdatePcKoubouCrawlSettingExcludeProductResultSuccess.pcKoubouCrawlSettingExcludeProduct":
		if e.complexity.UpdatePcKoubouCrawlSettingExcludeProductResultSuccess.PcKoubouCrawlSettingExcludeProduct == nil {
			break
		}

		return e.complexity.UpdatePcKoubouCrawlSettingExcludeProductResultSuccess.PcKoubouCrawlSettingExcludeProduct(childComplexity), true

	case "UpdatePcKoubouCrawlSettingExcludeProductResultValidationFailed.code":
		if e.complexity.UpdatePcKoubouCrawlSettingExcludeProductResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.UpdatePcKoubouCrawlSettingExcludeProductResultValidationFailed.Code(childComplexity), true

	case "UpdatePcKoubouCrawlSettingExcludeProductResultValidationFailed.details":
		if e.complexity.UpdatePcKoubouCrawlSettingExcludeProductResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.UpdatePcKoubouCrawlSettingExcludeProductResultValidationFailed.Details(childComplexity), true

	case "UpdatePcKoubouCrawlSettingExcludeProductResultValidationFailed.message":
		if e.complexity.UpdatePcKoubouCrawlSettingExcludeProductResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.UpdatePcKoubouCrawlSettingExcludeProductResultValidationFailed.Message(childComplexity), true

	case "UpdatePcKoubouCrawlSettingRequiredKeywordResultError.error":
		if e.complexity.UpdatePcKoubouCrawlSettingRequiredKeywordResultError.Error == nil {
			break
		}

		return e.complexity.UpdatePcKoubouCrawlSettingRequiredKeywordResultError.Error(childComplexity), true

	case "UpdatePcKoubouCrawlSettingRequiredKeywordResultError.ok":
		if e.complexity.UpdatePcKoubouCrawlSettingRequiredKeywordResultError.Ok == nil {
			break
		}

		return e.complexity.UpdatePcKoubouCrawlSettingRequiredKeywordResultError.Ok(childComplexity), true

	case "UpdatePcKoubouCrawlSettingRequiredKeywordResultSuccess.ok":
		if e.complexity.UpdatePcKoubouCrawlSettingRequiredKeywordResultSuccess.Ok == nil {
			break
		}

		return e.complexity.UpdatePcKoubouCrawlSettingRequiredKeywordResultSuccess.Ok(childComplexity), true

	case "UpdatePcKoubouCrawlSettingRequiredKeywordResultSuccess.pcKoubouCrawlSettingRequiredKeyword":
		if e.complexity.UpdatePcKoubouCrawlSettingRequiredKeywordResultSuccess.PcKoubouCrawlSettingRequiredKeyword == nil {
			break
		}

		return e.complexity.UpdatePcKoubouCrawlSettingRequiredKeywordResultSuccess.PcKoubouCrawlSettingRequiredKeyword(childComplexity), true

	case "UpdatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed.code":
		if e.complexity.UpdatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.UpdatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed.Code(childComplexity), true

	case "UpdatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed.details":
		if e.complexity.UpdatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.UpdatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed.Details(childComplexity), true

	case "UpdatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed.message":
		if e.complexity.UpdatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.UpdatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed.Message(childComplexity), true

	case "UpdateProductResultError.error":
		if e.complexity.UpdateProductResultError.Error == nil {
			break
		}

		return e.complexity.UpdateProductResultError.Error(childComplexity), true

	case "UpdateProductResultError.ok":
		if e.complexity.UpdateProductResultError.Ok == nil {
			break
		}

		return e.complexity.UpdateProductResultError.Ok(childComplexity), true

	case "UpdateProductResultSuccess.ok":
		if e.complexity.UpdateProductResultSuccess.Ok == nil {
			break
		}

		return e.complexity.UpdateProductResultSuccess.Ok(childComplexity), true

	case "UpdateProductResultSuccess.product":
		if e.complexity.UpdateProductResultSuccess.Product == nil {
			break
		}

		return e.complexity.UpdateProductResultSuccess.Product(childComplexity), true

	case "UpdateProductResultValidationFailed.code":
		if e.complexity.UpdateProductResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.UpdateProductResultValidationFailed.Code(childComplexity), true

	case "UpdateProductResultValidationFailed.details":
		if e.complexity.UpdateProductResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.UpdateProductResultValidationFailed.Details(childComplexity), true

	case "UpdateProductResultValidationFailed.message":
		if e.complexity.UpdateProductResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.UpdateProductResultValidationFailed.Message(childComplexity), true

	case "UpdateYahooAuctionCrawlSettingExcludeKeywordResultError.error":
		if e.complexity.UpdateYahooAuctionCrawlSettingExcludeKeywordResultError.Error == nil {
			break
		}

		return e.complexity.UpdateYahooAuctionCrawlSettingExcludeKeywordResultError.Error(childComplexity), true

	case "UpdateYahooAuctionCrawlSettingExcludeKeywordResultError.ok":
		if e.complexity.UpdateYahooAuctionCrawlSettingExcludeKeywordResultError.Ok == nil {
			break
		}

		return e.complexity.UpdateYahooAuctionCrawlSettingExcludeKeywordResultError.Ok(childComplexity), true

	case "UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess.ok":
		if e.complexity.UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess.Ok == nil {
			break
		}

		return e.complexity.UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess.Ok(childComplexity), true

	case "UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess.yahooAuctionCrawlSettingExcludeKeyword":
		if e.complexity.UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess.YahooAuctionCrawlSettingExcludeKeyword == nil {
			break
		}

		return e.complexity.UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess.YahooAuctionCrawlSettingExcludeKeyword(childComplexity), true

	case "UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.code":
		if e.complexity.UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.Code(childComplexity), true

	case "UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.details":
		if e.complexity.UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.Details(childComplexity), true

	case "UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.message":
		if e.complexity.UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.Message(childComplexity), true

	case "UpdateYahooAuctionCrawlSettingExcludeProductResultError.error":
		if e.complexity.UpdateYahooAuctionCrawlSettingExcludeProductResultError.Error == nil {
			break
		}

		return e.complexity.UpdateYahooAuctionCrawlSettingExcludeProductResultError.Error(childComplexity), true

	case "UpdateYahooAuctionCrawlSettingExcludeProductResultError.ok":
		if e.complexity.UpdateYahooAuctionCrawlSettingExcludeProductResultError.Ok == nil {
			break
		}

		return e.complexity.UpdateYahooAuctionCrawlSettingExcludeProductResultError.Ok(childComplexity), true

	case "UpdateYahooAuctionCrawlSettingExcludeProductResultSuccess.ok":
		if e.complexity.UpdateYahooAuctionCrawlSettingExcludeProductResultSuccess.Ok == nil {
			break
		}

		return e.complexity.UpdateYahooAuctionCrawlSettingExcludeProductResultSuccess.Ok(childComplexity), true

	case "UpdateYahooAuctionCrawlSettingExcludeProductResultSuccess.yahooAuctionCrawlSettingExcludeProduct":
		if e.complexity.UpdateYahooAuctionCrawlSettingExcludeProductResultSuccess.YahooAuctionCrawlSettingExcludeProduct == nil {
			break
		}

		return e.complexity.UpdateYahooAuctionCrawlSettingExcludeProductResultSuccess.YahooAuctionCrawlSettingExcludeProduct(childComplexity), true

	case "UpdateYahooAuctionCrawlSettingExcludeProductResultValidationFailed.code":
		if e.complexity.UpdateYahooAuctionCrawlSettingExcludeProductResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.UpdateYahooAuctionCrawlSettingExcludeProductResultValidationFailed.Code(childComplexity), true

	case "UpdateYahooAuctionCrawlSettingExcludeProductResultValidationFailed.details":
		if e.complexity.UpdateYahooAuctionCrawlSettingExcludeProductResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.UpdateYahooAuctionCrawlSettingExcludeProductResultValidationFailed.Details(childComplexity), true

	case "UpdateYahooAuctionCrawlSettingExcludeProductResultValidationFailed.message":
		if e.complexity.UpdateYahooAuctionCrawlSettingExcludeProductResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.UpdateYahooAuctionCrawlSettingExcludeProductResultValidationFailed.Message(childComplexity), true

	case "UpdateYahooAuctionCrawlSettingRequiredKeywordResultError.error":
		if e.complexity.UpdateYahooAuctionCrawlSettingRequiredKeywordResultError.Error == nil {
			break
		}

		return e.complexity.UpdateYahooAuctionCrawlSettingRequiredKeywordResultError.Error(childComplexity), true

	case "UpdateYahooAuctionCrawlSettingRequiredKeywordResultError.ok":
		if e.complexity.UpdateYahooAuctionCrawlSettingRequiredKeywordResultError.Ok == nil {
			break
		}

		return e.complexity.UpdateYahooAuctionCrawlSettingRequiredKeywordResultError.Ok(childComplexity), true

	case "UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess.ok":
		if e.complexity.UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess.Ok == nil {
			break
		}

		return e.complexity.UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess.Ok(childComplexity), true

	case "UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess.yahooAuctionCrawlSettingRequiredKeyword":
		if e.complexity.UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess.YahooAuctionCrawlSettingRequiredKeyword == nil {
			break
		}

		return e.complexity.UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess.YahooAuctionCrawlSettingRequiredKeyword(childComplexity), true

	case "UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.code":
		if e.complexity.UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.Code(childComplexity), true

	case "UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.details":
		if e.complexity.UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.Details(childComplexity), true

	case "UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.message":
		if e.complexity.UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.Message(childComplexity), true

	case "YahooAuctionCrawlSetting.categoryId":
		if e.complexity.YahooAuctionCrawlSetting.CategoryID == nil {
			break
		}

		return e.complexity.YahooAuctionCrawlSetting.CategoryID(childComplexity), true

	case "YahooAuctionCrawlSetting.createdAt":
		if e.complexity.YahooAuctionCrawlSetting.CreatedAt == nil {
			break
		}

		return e.complexity.YahooAuctionCrawlSetting.CreatedAt(childComplexity), true

	case "YahooAuctionCrawlSetting.enabled":
		if e.complexity.YahooAuctionCrawlSetting.Enabled == nil {
			break
		}

		return e.complexity.YahooAuctionCrawlSetting.Enabled(childComplexity), true

	case "YahooAuctionCrawlSetting.id":
		if e.complexity.YahooAuctionCrawlSetting.ID == nil {
			break
		}

		return e.complexity.YahooAuctionCrawlSetting.ID(childComplexity), true

	case "YahooAuctionCrawlSetting.keyword":
		if e.complexity.YahooAuctionCrawlSetting.Keyword == nil {
			break
		}

		return e.complexity.YahooAuctionCrawlSetting.Keyword(childComplexity), true

	case "YahooAuctionCrawlSetting.maxPrice":
		if e.complexity.YahooAuctionCrawlSetting.MaxPrice == nil {
			break
		}

		return e.complexity.YahooAuctionCrawlSetting.MaxPrice(childComplexity), true

	case "YahooAuctionCrawlSetting.minPrice":
		if e.complexity.YahooAuctionCrawlSetting.MinPrice == nil {
			break
		}

		return e.complexity.YahooAuctionCrawlSetting.MinPrice(childComplexity), true

	case "YahooAuctionCrawlSetting.productId":
		if e.complexity.YahooAuctionCrawlSetting.ProductID == nil {
			break
		}

		return e.complexity.YahooAuctionCrawlSetting.ProductID(childComplexity), true

	case "YahooAuctionCrawlSetting.updatedAt":
		if e.complexity.YahooAuctionCrawlSetting.UpdatedAt == nil {
			break
		}

		return e.complexity.YahooAuctionCrawlSetting.UpdatedAt(childComplexity), true

	case "YahooAuctionCrawlSetting.yahooAuctionCrawlSettingExcludeKeywords":
		if e.complexity.YahooAuctionCrawlSetting.YahooAuctionCrawlSettingExcludeKeywords == nil {
			break
		}

		return e.complexity.YahooAuctionCrawlSetting.YahooAuctionCrawlSettingExcludeKeywords(childComplexity), true

	case "YahooAuctionCrawlSetting.yahooAuctionCrawlSettingExcludeProducts":
		if e.complexity.YahooAuctionCrawlSetting.YahooAuctionCrawlSettingExcludeProducts == nil {
			break
		}

		return e.complexity.YahooAuctionCrawlSetting.YahooAuctionCrawlSettingExcludeProducts(childComplexity), true

	case "YahooAuctionCrawlSetting.yahooAuctionCrawlSettingRequiredKeywords":
		if e.complexity.YahooAuctionCrawlSetting.YahooAuctionCrawlSettingRequiredKeywords == nil {
			break
		}

		return e.complexity.YahooAuctionCrawlSetting.YahooAuctionCrawlSettingRequiredKeywords(childComplexity), true

	case "YahooAuctionCrawlSettingExcludeKeyword.createdAt":
		if e.complexity.YahooAuctionCrawlSettingExcludeKeyword.CreatedAt == nil {
			break
		}

		return e.complexity.YahooAuctionCrawlSettingExcludeKeyword.CreatedAt(childComplexity), true

	case "YahooAuctionCrawlSettingExcludeKeyword.id":
		if e.complexity.YahooAuctionCrawlSettingExcludeKeyword.ID == nil {
			break
		}

		return e.complexity.YahooAuctionCrawlSettingExcludeKeyword.ID(childComplexity), true

	case "YahooAuctionCrawlSettingExcludeKeyword.keyword":
		if e.complexity.YahooAuctionCrawlSettingExcludeKeyword.Keyword == nil {
			break
		}

		return e.complexity.YahooAuctionCrawlSettingExcludeKeyword.Keyword(childComplexity), true

	case "YahooAuctionCrawlSettingExcludeKeyword.updatedAt":
		if e.complexity.YahooAuctionCrawlSettingExcludeKeyword.UpdatedAt == nil {
			break
		}

		return e.complexity.YahooAuctionCrawlSettingExcludeKeyword.UpdatedAt(childComplexity), true

	case "YahooAuctionCrawlSettingExcludeKeyword.yahooAuctionCrawlSettingId":
		if e.complexity.YahooAuctionCrawlSettingExcludeKeyword.YahooAuctionCrawlSettingID == nil {
			break
		}

		return e.complexity.YahooAuctionCrawlSettingExcludeKeyword.YahooAuctionCrawlSettingID(childComplexity), true

	case "YahooAuctionCrawlSettingExcludeProduct.createdAt":
		if e.complexity.YahooAuctionCrawlSettingExcludeProduct.CreatedAt == nil {
			break
		}

		return e.complexity.YahooAuctionCrawlSettingExcludeProduct.CreatedAt(childComplexity), true

	case "YahooAuctionCrawlSettingExcludeProduct.externalId":
		if e.complexity.YahooAuctionCrawlSettingExcludeProduct.ExternalID == nil {
			break
		}

		return e.complexity.YahooAuctionCrawlSettingExcludeProduct.ExternalID(childComplexity), true

	case "YahooAuctionCrawlSettingExcludeProduct.id":
		if e.complexity.YahooAuctionCrawlSettingExcludeProduct.ID == nil {
			break
		}

		return e.complexity.YahooAuctionCrawlSettingExcludeProduct.ID(childComplexity), true

	case "YahooAuctionCrawlSettingExcludeProduct.updatedAt":
		if e.complexity.YahooAuctionCrawlSettingExcludeProduct.UpdatedAt == nil {
			break
		}

		return e.complexity.YahooAuctionCrawlSettingExcludeProduct.UpdatedAt(childComplexity), true

	case "YahooAuctionCrawlSettingExcludeProduct.yahooAuctionCrawlSettingId":
		if e.complexity.YahooAuctionCrawlSettingExcludeProduct.YahooAuctionCrawlSettingID == nil {
			break
		}

		return e.complexity.YahooAuctionCrawlSettingExcludeProduct.YahooAuctionCrawlSettingID(childComplexity), true

	case "YahooAuctionCrawlSettingRequiredKeyword.createdAt":
		if e.complexity.YahooAuctionCrawlSettingRequiredKeyword.CreatedAt == nil {
			break
		}

		return e.complexity.YahooAuctionCrawlSettingRequiredKeyword.CreatedAt(childComplexity), true

	case "YahooAuctionCrawlSettingRequiredKeyword.id":
		if e.complexity.YahooAuctionCrawlSettingRequiredKeyword.ID == nil {
			break
		}

		return e.complexity.YahooAuctionCrawlSettingRequiredKeyword.ID(childComplexity), true

	case "YahooAuctionCrawlSettingRequiredKeyword.keyword":
		if e.complexity.YahooAuctionCrawlSettingRequiredKeyword.Keyword == nil {
			break
		}

		return e.complexity.YahooAuctionCrawlSettingRequiredKeyword.Keyword(childComplexity), true

	case "YahooAuctionCrawlSettingRequiredKeyword.updatedAt":
		if e.complexity.YahooAuctionCrawlSettingRequiredKeyword.UpdatedAt == nil {
			break
		}

		return e.complexity.YahooAuctionCrawlSettingRequiredKeyword.UpdatedAt(childComplexity), true

	case "YahooAuctionCrawlSettingRequiredKeyword.yahooAuctionCrawlSettingId":
		if e.complexity.YahooAuctionCrawlSettingRequiredKeyword.YahooAuctionCrawlSettingID == nil {
			break
		}

		return e.complexity.YahooAuctionCrawlSettingRequiredKeyword.YahooAuctionCrawlSettingID(childComplexity), true

	case "YahooAuctionDailyPurchaseSummary.averagePurchasePrice":
		if e.complexity.YahooAuctionDailyPurchaseSummary.AveragePurchasePrice == nil {
			break
		}

		return e.complexity.YahooAuctionDailyPurchaseSummary.AveragePurchasePrice(childComplexity), true

	case "YahooAuctionDailyPurchaseSummary.createdAt":
		if e.complexity.YahooAuctionDailyPurchaseSummary.CreatedAt == nil {
			break
		}

		return e.complexity.YahooAuctionDailyPurchaseSummary.CreatedAt(childComplexity), true

	case "YahooAuctionDailyPurchaseSummary.date":
		if e.complexity.YahooAuctionDailyPurchaseSummary.Date == nil {
			break
		}

		return e.complexity.YahooAuctionDailyPurchaseSummary.Date(childComplexity), true

	case "YahooAuctionDailyPurchaseSummary.id":
		if e.complexity.YahooAuctionDailyPurchaseSummary.ID == nil {
			break
		}

		return e.complexity.YahooAuctionDailyPurchaseSummary.ID(childComplexity), true

	case "YahooAuctionDailyPurchaseSummary.productId":
		if e.complexity.YahooAuctionDailyPurchaseSummary.ProductID == nil {
			break
		}

		return e.complexity.YahooAuctionDailyPurchaseSummary.ProductID(childComplexity), true

	case "YahooAuctionDailyPurchaseSummary.purchaseCount":
		if e.complexity.YahooAuctionDailyPurchaseSummary.PurchaseCount == nil {
			break
		}

		return e.complexity.YahooAuctionDailyPurchaseSummary.PurchaseCount(childComplexity), true

	case "YahooAuctionDailyPurchaseSummary.updatedAt":
		if e.complexity.YahooAuctionDailyPurchaseSummary.UpdatedAt == nil {
			break
		}

		return e.complexity.YahooAuctionDailyPurchaseSummary.UpdatedAt(childComplexity), true

	case "YahooAuctionProduct.boughtDate":
		if e.complexity.YahooAuctionProduct.BoughtDate == nil {
			break
		}

		return e.complexity.YahooAuctionProduct.BoughtDate(childComplexity), true

	case "YahooAuctionProduct.createdAt":
		if e.complexity.YahooAuctionProduct.CreatedAt == nil {
			break
		}

		return e.complexity.YahooAuctionProduct.CreatedAt(childComplexity), true

	case "YahooAuctionProduct.id":
		if e.complexity.YahooAuctionProduct.ID == nil {
			break
		}

		return e.complexity.YahooAuctionProduct.ID(childComplexity), true

	case "YahooAuctionProduct.name":
		if e.complexity.YahooAuctionProduct.Name == nil {
			break
		}

		return e.complexity.YahooAuctionProduct.Name(childComplexity), true

	case "YahooAuctionProduct.price":
		if e.complexity.YahooAuctionProduct.Price == nil {
			break
		}

		return e.complexity.YahooAuctionProduct.Price(childComplexity), true

	case "YahooAuctionProduct.productId":
		if e.complexity.YahooAuctionProduct.ProductID == nil {
			break
		}

		return e.complexity.YahooAuctionProduct.ProductID(childComplexity), true

	case "YahooAuctionProduct.published":
		if e.complexity.YahooAuctionProduct.Published == nil {
			break
		}

		return e.complexity.YahooAuctionProduct.Published(childComplexity), true

	case "YahooAuctionProduct.thumbnailUrl":
		if e.complexity.YahooAuctionProduct.ThumbnailURL == nil {
			break
		}

		return e.complexity.YahooAuctionProduct.ThumbnailURL(childComplexity), true

	case "YahooAuctionProduct.updatedAt":
		if e.complexity.YahooAuctionProduct.UpdatedAt == nil {
			break
		}

		return e.complexity.YahooAuctionProduct.UpdatedAt(childComplexity), true

	case "YahooAuctionProduct.yahooAuctionId":
		if e.complexity.YahooAuctionProduct.YahooAuctionID == nil {
			break
		}

		return e.complexity.YahooAuctionProduct.YahooAuctionID(childComplexity), true

	case "YahooFleamarketDailyPurchaseSummary.averagePurchasePrice":
		if e.complexity.YahooFleamarketDailyPurchaseSummary.AveragePurchasePrice == nil {
			break
		}

		return e.complexity.YahooFleamarketDailyPurchaseSummary.AveragePurchasePrice(childComplexity), true

	case "YahooFleamarketDailyPurchaseSummary.createdAt":
		if e.complexity.YahooFleamarketDailyPurchaseSummary.CreatedAt == nil {
			break
		}

		return e.complexity.YahooFleamarketDailyPurchaseSummary.CreatedAt(childComplexity), true

	case "YahooFleamarketDailyPurchaseSummary.date":
		if e.complexity.YahooFleamarketDailyPurchaseSummary.Date == nil {
			break
		}

		return e.complexity.YahooFleamarketDailyPurchaseSummary.Date(childComplexity), true

	case "YahooFleamarketDailyPurchaseSummary.id":
		if e.complexity.YahooFleamarketDailyPurchaseSummary.ID == nil {
			break
		}

		return e.complexity.YahooFleamarketDailyPurchaseSummary.ID(childComplexity), true

	case "YahooFleamarketDailyPurchaseSummary.productId":
		if e.complexity.YahooFleamarketDailyPurchaseSummary.ProductID == nil {
			break
		}

		return e.complexity.YahooFleamarketDailyPurchaseSummary.ProductID(childComplexity), true

	case "YahooFleamarketDailyPurchaseSummary.purchaseCount":
		if e.complexity.YahooFleamarketDailyPurchaseSummary.PurchaseCount == nil {
			break
		}

		return e.complexity.YahooFleamarketDailyPurchaseSummary.PurchaseCount(childComplexity), true

	case "YahooFleamarketDailyPurchaseSummary.updatedAt":
		if e.complexity.YahooFleamarketDailyPurchaseSummary.UpdatedAt == nil {
			break
		}

		return e.complexity.YahooFleamarketDailyPurchaseSummary.UpdatedAt(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputCreateIosysCrawlSettingExcludeKeywordInput,
		ec.unmarshalInputCreateIosysCrawlSettingExcludeProductInput,
		ec.unmarshalInputCreateIosysCrawlSettingInput,
		ec.unmarshalInputCreateIosysCrawlSettingRequiredKeywordInput,
		ec.unmarshalInputCreateJanparaCrawlSettingExcludeKeywordInput,
		ec.unmarshalInputCreateJanparaCrawlSettingExcludeProductInput,
		ec.unmarshalInputCreateJanparaCrawlSettingInput,
		ec.unmarshalInputCreateJanparaCrawlSettingRequiredKeywordInput,
		ec.unmarshalInputCreateMercariCrawlSettingExcludeKeywordInput,
		ec.unmarshalInputCreateMercariCrawlSettingExcludeProductInput,
		ec.unmarshalInputCreateMercariCrawlSettingInput,
		ec.unmarshalInputCreateMercariCrawlSettingRequiredKeywordInput,
		ec.unmarshalInputCreatePcKoubouCrawlSettingExcludeKeywordInput,
		ec.unmarshalInputCreatePcKoubouCrawlSettingExcludeProductInput,
		ec.unmarshalInputCreatePcKoubouCrawlSettingInput,
		ec.unmarshalInputCreatePcKoubouCrawlSettingRequiredKeywordInput,
		ec.unmarshalInputCreateProductInput,
		ec.unmarshalInputCreateYahooAuctionCrawlSettingExcludeKeywordInput,
		ec.unmarshalInputCreateYahooAuctionCrawlSettingExcludeProductInput,
		ec.unmarshalInputCreateYahooAuctionCrawlSettingInput,
		ec.unmarshalInputCreateYahooAuctionCrawlSettingRequiredKeywordInput,
		ec.unmarshalInputUpdateIosysCrawlSettingExcludeKeywordInput,
		ec.unmarshalInputUpdateIosysCrawlSettingExcludeProductInput,
		ec.unmarshalInputUpdateIosysCrawlSettingInput,
		ec.unmarshalInputUpdateIosysCrawlSettingRequiredKeywordInput,
		ec.unmarshalInputUpdateJanparaCrawlSettingExcludeKeywordInput,
		ec.unmarshalInputUpdateJanparaCrawlSettingExcludeProductInput,
		ec.unmarshalInputUpdateJanparaCrawlSettingInput,
		ec.unmarshalInputUpdateJanparaCrawlSettingRequiredKeywordInput,
		ec.unmarshalInputUpdateMercariCrawlSettingExcludeKeywordInput,
		ec.unmarshalInputUpdateMercariCrawlSettingExcludeProductInput,
		ec.unmarshalInputUpdateMercariCrawlSettingInput,
		ec.unmarshalInputUpdateMercariCrawlSettingRequiredKeywordInput,
		ec.unmarshalInputUpdatePcKoubouCrawlSettingExcludeKeywordInput,
		ec.unmarshalInputUpdatePcKoubouCrawlSettingExcludeProductInput,
		ec.unmarshalInputUpdatePcKoubouCrawlSettingInput,
		ec.unmarshalInputUpdatePcKoubouCrawlSettingRequiredKeywordInput,
		ec.unmarshalInputUpdateProductInput,
		ec.unmarshalInputUpdateYahooAuctionCrawlSettingExcludeKeywordInput,
		ec.unmarshalInputUpdateYahooAuctionCrawlSettingExcludeProductInput,
		ec.unmarshalInputUpdateYahooAuctionCrawlSettingInput,
		ec.unmarshalInputUpdateYahooAuctionCrawlSettingRequiredKeywordInput,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, rc.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../graph/common.graphqls", Input: `interface Node {
  id: ID!
}
`, BuiltIn: false},
	{Name: "../graph/mutations.graphqls", Input: `type Mutation {
  createProduct(input: CreateProductInput!): CreateProductResult!
  updateProduct(id: ID!, input: UpdateProductInput!): UpdateProductResult!
  deleteProduct(id: ID!): DeleteProductResult!
  createYahooAuctionCrawlSettingExcludeKeyword(
    input: CreateYahooAuctionCrawlSettingExcludeKeywordInput!
  ): CreateYahooAuctionCrawlSettingExcludeKeywordResult!
  updateYahooAuctionCrawlSettingExcludeKeyword(
    input: UpdateYahooAuctionCrawlSettingExcludeKeywordInput!
  ): UpdateYahooAuctionCrawlSettingExcludeKeywordResult!
  deleteYahooAuctionCrawlSettingExcludeKeyword(
    id: ID!
    productId: ID!
  ): DeleteYahooAuctionCrawlSettingExcludeKeywordResult!
  createYahooAuctionCrawlSettingExcludeProduct(
    input: CreateYahooAuctionCrawlSettingExcludeProductInput!
  ): CreateYahooAuctionCrawlSettingExcludeProductResult!
  updateYahooAuctionCrawlSettingExcludeProduct(
    input: UpdateYahooAuctionCrawlSettingExcludeProductInput!
  ): UpdateYahooAuctionCrawlSettingExcludeProductResult!
  deleteYahooAuctionCrawlSettingExcludeProduct(
    id: ID!
    productId: ID!
  ): DeleteYahooAuctionCrawlSettingExcludeProductResult!
  createYahooAuctionCrawlSettingRequiredKeyword(
    input: CreateYahooAuctionCrawlSettingRequiredKeywordInput!
  ): CreateYahooAuctionCrawlSettingRequiredKeywordResult!
  updateYahooAuctionCrawlSettingRequiredKeyword(
    input: UpdateYahooAuctionCrawlSettingRequiredKeywordInput!
  ): UpdateYahooAuctionCrawlSettingRequiredKeywordResult!
  deleteYahooAuctionCrawlSettingRequiredKeyword(
    id: ID!
    productId: ID!
  ): DeleteYahooAuctionCrawlSettingRequiredKeywordResult!
  createMercariCrawlSettingExcludeKeyword(
    input: CreateMercariCrawlSettingExcludeKeywordInput!
  ): CreateMercariCrawlSettingExcludeKeywordResult!
  updateMercariCrawlSettingExcludeKeyword(
    input: UpdateMercariCrawlSettingExcludeKeywordInput!
  ): UpdateMercariCrawlSettingExcludeKeywordResult!
  deleteMercariCrawlSettingExcludeKeyword(
    id: ID!
    productId: ID!
  ): DeleteMercariCrawlSettingExcludeKeywordResult!
  createMercariCrawlSettingExcludeProduct(
    input: CreateMercariCrawlSettingExcludeProductInput!
  ): CreateMercariCrawlSettingExcludeProductResult!
  updateMercariCrawlSettingExcludeProduct(
    input: UpdateMercariCrawlSettingExcludeProductInput!
  ): UpdateMercariCrawlSettingExcludeProductResult!
  deleteMercariCrawlSettingExcludeProduct(
    id: ID!
    productId: ID!
  ): DeleteMercariCrawlSettingExcludeProductResult!
  createMercariCrawlSettingRequiredKeyword(
    input: CreateMercariCrawlSettingRequiredKeywordInput!
  ): CreateMercariCrawlSettingRequiredKeywordResult!
  updateMercariCrawlSettingRequiredKeyword(
    input: UpdateMercariCrawlSettingRequiredKeywordInput!
  ): UpdateMercariCrawlSettingRequiredKeywordResult!
  deleteMercariCrawlSettingRequiredKeyword(
    id: ID!
    productId: ID!
  ): DeleteMercariCrawlSettingRequiredKeywordResult!
  createJanparaCrawlSettingExcludeKeyword(
    input: CreateJanparaCrawlSettingExcludeKeywordInput!
  ): CreateJanparaCrawlSettingExcludeKeywordResult!
  updateJanparaCrawlSettingExcludeKeyword(
    input: UpdateJanparaCrawlSettingExcludeKeywordInput!
  ): UpdateJanparaCrawlSettingExcludeKeywordResult!
  deleteJanparaCrawlSettingExcludeKeyword(
    id: ID!
    productId: ID!
  ): DeleteJanparaCrawlSettingExcludeKeywordResult!
  createJanparaCrawlSettingExcludeProduct(
    input: CreateJanparaCrawlSettingExcludeProductInput!
  ): CreateJanparaCrawlSettingExcludeProductResult!
  updateJanparaCrawlSettingExcludeProduct(
    input: UpdateJanparaCrawlSettingExcludeProductInput!
  ): UpdateJanparaCrawlSettingExcludeProductResult!
  deleteJanparaCrawlSettingExcludeProduct(
    id: ID!
    productId: ID!
  ): DeleteJanparaCrawlSettingExcludeProductResult!
  createJanparaCrawlSettingRequiredKeyword(
    input: CreateJanparaCrawlSettingRequiredKeywordInput!
  ): CreateJanparaCrawlSettingRequiredKeywordResult!
  updateJanparaCrawlSettingRequiredKeyword(
    input: UpdateJanparaCrawlSettingRequiredKeywordInput!
  ): UpdateJanparaCrawlSettingRequiredKeywordResult!
  deleteJanparaCrawlSettingRequiredKeyword(
    id: ID!
    productId: ID!
  ): DeleteJanparaCrawlSettingRequiredKeywordResult!
  createIosysCrawlSettingExcludeKeyword(
    input: CreateIosysCrawlSettingExcludeKeywordInput!
  ): CreateIosysCrawlSettingExcludeKeywordResult!
  updateIosysCrawlSettingExcludeKeyword(
    input: UpdateIosysCrawlSettingExcludeKeywordInput!
  ): UpdateIosysCrawlSettingExcludeKeywordResult!
  deleteIosysCrawlSettingExcludeKeyword(
    id: ID!
    productId: ID!
  ): DeleteIosysCrawlSettingExcludeKeywordResult!
  createIosysCrawlSettingExcludeProduct(
    input: CreateIosysCrawlSettingExcludeProductInput!
  ): CreateIosysCrawlSettingExcludeProductResult!
  updateIosysCrawlSettingExcludeProduct(
    input: UpdateIosysCrawlSettingExcludeProductInput!
  ): UpdateIosysCrawlSettingExcludeProductResult!
  deleteIosysCrawlSettingExcludeProduct(
    id: ID!
    productId: ID!
  ): DeleteIosysCrawlSettingExcludeProductResult!
  createIosysCrawlSettingRequiredKeyword(
    input: CreateIosysCrawlSettingRequiredKeywordInput!
  ): CreateIosysCrawlSettingRequiredKeywordResult!
  updateIosysCrawlSettingRequiredKeyword(
    input: UpdateIosysCrawlSettingRequiredKeywordInput!
  ): UpdateIosysCrawlSettingRequiredKeywordResult!
  deleteIosysCrawlSettingRequiredKeyword(
    id: ID!
    productId: ID!
  ): DeleteIosysCrawlSettingRequiredKeywordResult!
  createPcKoubouCrawlSettingExcludeKeyword(
    input: CreatePcKoubouCrawlSettingExcludeKeywordInput!
  ): CreatePcKoubouCrawlSettingExcludeKeywordResult!
  updatePcKoubouCrawlSettingExcludeKeyword(
    input: UpdatePcKoubouCrawlSettingExcludeKeywordInput!
  ): UpdatePcKoubouCrawlSettingExcludeKeywordResult!
  deletePcKoubouCrawlSettingExcludeKeyword(
    id: ID!
    productId: ID!
  ): DeletePcKoubouCrawlSettingExcludeKeywordResult!
  createPcKoubouCrawlSettingExcludeProduct(
    input: CreatePcKoubouCrawlSettingExcludeProductInput!
  ): CreatePcKoubouCrawlSettingExcludeProductResult!
  updatePcKoubouCrawlSettingExcludeProduct(
    input: UpdatePcKoubouCrawlSettingExcludeProductInput!
  ): UpdatePcKoubouCrawlSettingExcludeProductResult!
  deletePcKoubouCrawlSettingExcludeProduct(
    id: ID!
    productId: ID!
  ): DeletePcKoubouCrawlSettingExcludeProductResult!
  createPcKoubouCrawlSettingRequiredKeyword(
    input: CreatePcKoubouCrawlSettingRequiredKeywordInput!
  ): CreatePcKoubouCrawlSettingRequiredKeywordResult!
  updatePcKoubouCrawlSettingRequiredKeyword(
    input: UpdatePcKoubouCrawlSettingRequiredKeywordInput!
  ): UpdatePcKoubouCrawlSettingRequiredKeywordResult!
  deletePcKoubouCrawlSettingRequiredKeyword(
    id: ID!
    productId: ID!
  ): DeletePcKoubouCrawlSettingRequiredKeywordResult!
}

## common ##

interface ResultBase {
  ok: Boolean!
}

interface UserError {
  code: String!
  message: String!
}

type ErrorDetail {
  field: String!
  message: String!
}

## CreateProduct ##

input CreateProductInput {
  name: String!
  yahoo_auction_crawl_setting: CreateYahooAuctionCrawlSettingInput!
  mercari_crawl_setting: CreateMercariCrawlSettingInput!
  janpara_crawl_setting: CreateJanparaCrawlSettingInput!
  iosys_crawl_setting: CreateIosysCrawlSettingInput!
  pc_koubou_crawl_setting: CreatePcKoubouCrawlSettingInput!
}

input CreateYahooAuctionCrawlSettingInput {
  keyword: String!
  category_id: Int
  min_price: Int!
  max_price: Int!
  enabled: Boolean!
}

input CreateMercariCrawlSettingInput {
  keyword: String!
  category_id: Int
  min_price: Int!
  max_price: Int!
  enabled: Boolean!
}

input CreateJanparaCrawlSettingInput {
  keyword: String!
  min_price: Int!
  max_price: Int!
  enabled: Boolean!
}

input CreateIosysCrawlSettingInput {
  keyword: String!
  min_price: Int!
  max_price: Int!
  enabled: Boolean!
}
input CreatePcKoubouCrawlSettingInput {
  keyword: String!
  min_price: Int!
  max_price: Int!
  enabled: Boolean!
}

union CreateProductResult =
    CreateProductResultSuccess
  | CreateProductResultError

type CreateProductResultSuccess implements ResultBase {
  ok: Boolean!
  product: Product!
}

type CreateProductResultError implements ResultBase {
  ok: Boolean!
  error: CreateProductResultErrors!
}

union CreateProductResultErrors = CreateProductResultValidationFailed

type CreateProductResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## UpdateProduct ##

input UpdateProductInput {
  name: String!
  yahoo_auction_crawl_setting: UpdateYahooAuctionCrawlSettingInput!
  mercari_crawl_setting: UpdateMercariCrawlSettingInput!
  janpara_crawl_setting: UpdateJanparaCrawlSettingInput!
  iosys_crawl_setting: UpdateIosysCrawlSettingInput!
  pc_koubou_crawl_setting: UpdatePcKoubouCrawlSettingInput!
}

input UpdateYahooAuctionCrawlSettingInput {
  keyword: String!
  category_id: Int
  min_price: Int!
  max_price: Int!
  enabled: Boolean!
}

input UpdateMercariCrawlSettingInput {
  keyword: String!
  category_id: Int
  min_price: Int!
  max_price: Int!
  enabled: Boolean!
}

input UpdateJanparaCrawlSettingInput {
  keyword: String!
  min_price: Int!
  max_price: Int!
  enabled: Boolean!
}

input UpdateIosysCrawlSettingInput {
  keyword: String!
  min_price: Int!
  max_price: Int!
  enabled: Boolean!
}

input UpdatePcKoubouCrawlSettingInput {
  keyword: String!
  min_price: Int!
  max_price: Int!
  enabled: Boolean!
}

union UpdateProductResult =
    UpdateProductResultSuccess
  | UpdateProductResultError

type UpdateProductResultSuccess implements ResultBase {
  ok: Boolean!
  product: Product!
}

type UpdateProductResultError implements ResultBase {
  ok: Boolean!
  error: UpdateProductResultErrors!
}

union UpdateProductResultErrors = UpdateProductResultValidationFailed

type UpdateProductResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## DeleteProduct ##

union DeleteProductResult =
    DeleteProductResultSuccess
  | DeleteProductResultError

type DeleteProductResultSuccess implements ResultBase {
  ok: Boolean!
}

type DeleteProductResultError implements ResultBase {
  ok: Boolean!
  error: DeleteProductResultErrors!
}

union DeleteProductResultErrors = DeleteProductResultValidationFailed

type DeleteProductResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## CreateYahooAuctionCrawlSettingExcludeKeyword ##

input CreateYahooAuctionCrawlSettingExcludeKeywordInput {
  productId: ID!
  keyword: String
}

union CreateYahooAuctionCrawlSettingExcludeKeywordResult =
    CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess
  | CreateYahooAuctionCrawlSettingExcludeKeywordResultError

type CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess implements ResultBase {
  ok: Boolean!
  yahooAuctionCrawlSettingExcludeKeyword: YahooAuctionCrawlSettingExcludeKeyword!
}

type CreateYahooAuctionCrawlSettingExcludeKeywordResultError implements ResultBase {
  ok: Boolean!
  error: CreateYahooAuctionCrawlSettingExcludeKeywordResultErrors!
}

union CreateYahooAuctionCrawlSettingExcludeKeywordResultErrors =
    CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed

type CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## UpdateYahooAuctionCrawlSettingExcludeKeyword ##

input UpdateYahooAuctionCrawlSettingExcludeKeywordInput {
  id: ID!
  productId: ID!
  keyword: String
}

union UpdateYahooAuctionCrawlSettingExcludeKeywordResult =
    UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess
  | UpdateYahooAuctionCrawlSettingExcludeKeywordResultError

type UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess implements ResultBase {
  ok: Boolean!
  yahooAuctionCrawlSettingExcludeKeyword: YahooAuctionCrawlSettingExcludeKeyword!
}

type UpdateYahooAuctionCrawlSettingExcludeKeywordResultError implements ResultBase {
  ok: Boolean!
  error: UpdateYahooAuctionCrawlSettingExcludeKeywordResultErrors!
}

union UpdateYahooAuctionCrawlSettingExcludeKeywordResultErrors =
    UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed

type UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## DeleteYahooAuctionCrawlSettingExcludeKeyword ##

union DeleteYahooAuctionCrawlSettingExcludeKeywordResult =
    DeleteYahooAuctionCrawlSettingExcludeKeywordResultSuccess
  | DeleteYahooAuctionCrawlSettingExcludeKeywordResultError

type DeleteYahooAuctionCrawlSettingExcludeKeywordResultSuccess implements ResultBase {
  ok: Boolean!
}

type DeleteYahooAuctionCrawlSettingExcludeKeywordResultError implements ResultBase {
  ok: Boolean!
  error: DeleteYahooAuctionCrawlSettingExcludeKeywordResultErrors!
}

union DeleteYahooAuctionCrawlSettingExcludeKeywordResultErrors =
    DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed

type DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## CreateYahooAuctionCrawlSettingExcludeProduct ##

input CreateYahooAuctionCrawlSettingExcludeProductInput {
  productId: ID!
  externalId: String!
}

union CreateYahooAuctionCrawlSettingExcludeProductResult =
    CreateYahooAuctionCrawlSettingExcludeProductResultSuccess
  | CreateYahooAuctionCrawlSettingExcludeProductResultError

type CreateYahooAuctionCrawlSettingExcludeProductResultSuccess implements ResultBase {
  ok: Boolean!
  yahooAuctionCrawlSettingExcludeProduct: YahooAuctionCrawlSettingExcludeProduct!
}

type CreateYahooAuctionCrawlSettingExcludeProductResultError implements ResultBase {
  ok: Boolean!
  error: CreateYahooAuctionCrawlSettingExcludeProductResultErrors!
}

union CreateYahooAuctionCrawlSettingExcludeProductResultErrors =
    CreateYahooAuctionCrawlSettingExcludeProductResultValidationFailed

type CreateYahooAuctionCrawlSettingExcludeProductResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## UpdateYahooAuctionCrawlSettingExcludeProduct ##

input UpdateYahooAuctionCrawlSettingExcludeProductInput {
  id: ID!
  productId: ID!
  externalId: String!
}

union UpdateYahooAuctionCrawlSettingExcludeProductResult =
    UpdateYahooAuctionCrawlSettingExcludeProductResultSuccess
  | UpdateYahooAuctionCrawlSettingExcludeProductResultError

type UpdateYahooAuctionCrawlSettingExcludeProductResultSuccess implements ResultBase {
  ok: Boolean!
  yahooAuctionCrawlSettingExcludeProduct: YahooAuctionCrawlSettingExcludeProduct!
}

type UpdateYahooAuctionCrawlSettingExcludeProductResultError implements ResultBase {
  ok: Boolean!
  error: UpdateYahooAuctionCrawlSettingExcludeProductResultErrors!
}

union UpdateYahooAuctionCrawlSettingExcludeProductResultErrors =
    UpdateYahooAuctionCrawlSettingExcludeProductResultValidationFailed

type UpdateYahooAuctionCrawlSettingExcludeProductResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## DeleteYahooAuctionCrawlSettingExcludeProduct ##

union DeleteYahooAuctionCrawlSettingExcludeProductResult =
    DeleteYahooAuctionCrawlSettingExcludeProductResultSuccess
  | DeleteYahooAuctionCrawlSettingExcludeProductResultError

type DeleteYahooAuctionCrawlSettingExcludeProductResultSuccess implements ResultBase {
  ok: Boolean!
}

type DeleteYahooAuctionCrawlSettingExcludeProductResultError implements ResultBase {
  ok: Boolean!
  error: DeleteYahooAuctionCrawlSettingExcludeProductResultErrors!
}

union DeleteYahooAuctionCrawlSettingExcludeProductResultErrors =
    DeleteYahooAuctionCrawlSettingExcludeProductResultValidationFailed

type DeleteYahooAuctionCrawlSettingExcludeProductResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## CreateYahooAuctionCrawlSettingRequiredKeyword ##

input CreateYahooAuctionCrawlSettingRequiredKeywordInput {
  productId: ID!
  keyword: String
}

union CreateYahooAuctionCrawlSettingRequiredKeywordResult =
    CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess
  | CreateYahooAuctionCrawlSettingRequiredKeywordResultError

type CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess implements ResultBase {
  ok: Boolean!
  yahooAuctionCrawlSettingRequiredKeyword: YahooAuctionCrawlSettingRequiredKeyword!
}

type CreateYahooAuctionCrawlSettingRequiredKeywordResultError implements ResultBase {
  ok: Boolean!
  error: CreateYahooAuctionCrawlSettingRequiredKeywordResultErrors!
}

union CreateYahooAuctionCrawlSettingRequiredKeywordResultErrors =
    CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed

type CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## UpdateYahooAuctionCrawlSettingRequiredKeyword ##

input UpdateYahooAuctionCrawlSettingRequiredKeywordInput {
  id: ID!
  productId: ID!
  keyword: String
}

union UpdateYahooAuctionCrawlSettingRequiredKeywordResult =
    UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess
  | UpdateYahooAuctionCrawlSettingRequiredKeywordResultError

type UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess implements ResultBase {
  ok: Boolean!
  yahooAuctionCrawlSettingRequiredKeyword: YahooAuctionCrawlSettingRequiredKeyword!
}

type UpdateYahooAuctionCrawlSettingRequiredKeywordResultError implements ResultBase {
  ok: Boolean!
  error: UpdateYahooAuctionCrawlSettingRequiredKeywordResultErrors!
}

union UpdateYahooAuctionCrawlSettingRequiredKeywordResultErrors =
    UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed

type UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## DeleteYahooAuctionCrawlSettingRequiredKeyword ##

union DeleteYahooAuctionCrawlSettingRequiredKeywordResult =
    DeleteYahooAuctionCrawlSettingRequiredKeywordResultSuccess
  | DeleteYahooAuctionCrawlSettingRequiredKeywordResultError

type DeleteYahooAuctionCrawlSettingRequiredKeywordResultSuccess implements ResultBase {
  ok: Boolean!
}

type DeleteYahooAuctionCrawlSettingRequiredKeywordResultError implements ResultBase {
  ok: Boolean!
  error: DeleteYahooAuctionCrawlSettingRequiredKeywordResultErrors!
}

union DeleteYahooAuctionCrawlSettingRequiredKeywordResultErrors =
    DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed

type DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## CreateMercariCrawlSettingExcludeKeyword ##

input CreateMercariCrawlSettingExcludeKeywordInput {
  productId: ID!
  keyword: String
}

union CreateMercariCrawlSettingExcludeKeywordResult =
    CreateMercariCrawlSettingExcludeKeywordResultSuccess
  | CreateMercariCrawlSettingExcludeKeywordResultError

type CreateMercariCrawlSettingExcludeKeywordResultSuccess implements ResultBase {
  ok: Boolean!
  mercariCrawlSettingExcludeKeyword: MercariCrawlSettingExcludeKeyword!
}

type CreateMercariCrawlSettingExcludeKeywordResultError implements ResultBase {
  ok: Boolean!
  error: CreateMercariCrawlSettingExcludeKeywordResultErrors!
}

union CreateMercariCrawlSettingExcludeKeywordResultErrors =
    CreateMercariCrawlSettingExcludeKeywordResultValidationFailed

type CreateMercariCrawlSettingExcludeKeywordResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## UpdateMercariCrawlSettingExcludeKeyword ##

input UpdateMercariCrawlSettingExcludeKeywordInput {
  id: ID!
  productId: ID!
  keyword: String
}

union UpdateMercariCrawlSettingExcludeKeywordResult =
    UpdateMercariCrawlSettingExcludeKeywordResultSuccess
  | UpdateMercariCrawlSettingExcludeKeywordResultError

type UpdateMercariCrawlSettingExcludeKeywordResultSuccess implements ResultBase {
  ok: Boolean!
  mercariCrawlSettingExcludeKeyword: MercariCrawlSettingExcludeKeyword!
}

type UpdateMercariCrawlSettingExcludeKeywordResultError implements ResultBase {
  ok: Boolean!
  error: UpdateMercariCrawlSettingExcludeKeywordResultErrors!
}

union UpdateMercariCrawlSettingExcludeKeywordResultErrors =
    UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed

type UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## DeleteMercariCrawlSettingExcludeKeyword ##

union DeleteMercariCrawlSettingExcludeKeywordResult =
    DeleteMercariCrawlSettingExcludeKeywordResultSuccess
  | DeleteMercariCrawlSettingExcludeKeywordResultError

type DeleteMercariCrawlSettingExcludeKeywordResultSuccess implements ResultBase {
  ok: Boolean!
}

type DeleteMercariCrawlSettingExcludeKeywordResultError implements ResultBase {
  ok: Boolean!
  error: DeleteMercariCrawlSettingExcludeKeywordResultErrors!
}

union DeleteMercariCrawlSettingExcludeKeywordResultErrors =
    DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed

type DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## CreateMercariCrawlSettingExcludeProduct ##

input CreateMercariCrawlSettingExcludeProductInput {
  productId: ID!
  externalId: String!
}

union CreateMercariCrawlSettingExcludeProductResult =
    CreateMercariCrawlSettingExcludeProductResultSuccess
  | CreateMercariCrawlSettingExcludeProductResultError

type CreateMercariCrawlSettingExcludeProductResultSuccess implements ResultBase {
  ok: Boolean!
  mercariCrawlSettingExcludeProduct: MercariCrawlSettingExcludeProduct!
}

type CreateMercariCrawlSettingExcludeProductResultError implements ResultBase {
  ok: Boolean!
  error: CreateMercariCrawlSettingExcludeProductResultErrors!
}

union CreateMercariCrawlSettingExcludeProductResultErrors =
    CreateMercariCrawlSettingExcludeProductResultValidationFailed

type CreateMercariCrawlSettingExcludeProductResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## UpdateMercariCrawlSettingExcludeProduct ##

input UpdateMercariCrawlSettingExcludeProductInput {
  id: ID!
  productId: ID!
  externalId: String!
}

union UpdateMercariCrawlSettingExcludeProductResult =
    UpdateMercariCrawlSettingExcludeProductResultSuccess
  | UpdateMercariCrawlSettingExcludeProductResultError

type UpdateMercariCrawlSettingExcludeProductResultSuccess implements ResultBase {
  ok: Boolean!
  mercariCrawlSettingExcludeProduct: MercariCrawlSettingExcludeProduct!
}

type UpdateMercariCrawlSettingExcludeProductResultError implements ResultBase {
  ok: Boolean!
  error: UpdateMercariCrawlSettingExcludeProductResultErrors!
}

union UpdateMercariCrawlSettingExcludeProductResultErrors =
    UpdateMercariCrawlSettingExcludeProductResultValidationFailed

type UpdateMercariCrawlSettingExcludeProductResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## DeleteMercariCrawlSettingExcludeProduct ##

union DeleteMercariCrawlSettingExcludeProductResult =
    DeleteMercariCrawlSettingExcludeProductResultSuccess
  | DeleteMercariCrawlSettingExcludeProductResultError

type DeleteMercariCrawlSettingExcludeProductResultSuccess implements ResultBase {
  ok: Boolean!
}

type DeleteMercariCrawlSettingExcludeProductResultError implements ResultBase {
  ok: Boolean!
  error: DeleteMercariCrawlSettingExcludeProductResultErrors!
}

union DeleteMercariCrawlSettingExcludeProductResultErrors =
    DeleteMercariCrawlSettingExcludeProductResultValidationFailed

type DeleteMercariCrawlSettingExcludeProductResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## CreateMercariCrawlSettingRequiredKeyword ##

input CreateMercariCrawlSettingRequiredKeywordInput {
  productId: ID!
  keyword: String
}

union CreateMercariCrawlSettingRequiredKeywordResult =
    CreateMercariCrawlSettingRequiredKeywordResultSuccess
  | CreateMercariCrawlSettingRequiredKeywordResultError

type CreateMercariCrawlSettingRequiredKeywordResultSuccess implements ResultBase {
  ok: Boolean!
  mercariCrawlSettingRequiredKeyword: MercariCrawlSettingRequiredKeyword!
}

type CreateMercariCrawlSettingRequiredKeywordResultError implements ResultBase {
  ok: Boolean!
  error: CreateMercariCrawlSettingRequiredKeywordResultErrors!
}

union CreateMercariCrawlSettingRequiredKeywordResultErrors =
    CreateMercariCrawlSettingRequiredKeywordResultValidationFailed

type CreateMercariCrawlSettingRequiredKeywordResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## UpdateMercariCrawlSettingRequiredKeyword ##

input UpdateMercariCrawlSettingRequiredKeywordInput {
  id: ID!
  productId: ID!
  keyword: String
}

union UpdateMercariCrawlSettingRequiredKeywordResult =
    UpdateMercariCrawlSettingRequiredKeywordResultSuccess
  | UpdateMercariCrawlSettingRequiredKeywordResultError

type UpdateMercariCrawlSettingRequiredKeywordResultSuccess implements ResultBase {
  ok: Boolean!
  mercariCrawlSettingRequiredKeyword: MercariCrawlSettingRequiredKeyword!
}

type UpdateMercariCrawlSettingRequiredKeywordResultError implements ResultBase {
  ok: Boolean!
  error: UpdateMercariCrawlSettingRequiredKeywordResultErrors!
}

union UpdateMercariCrawlSettingRequiredKeywordResultErrors =
    UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed

type UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## DeleteMercariCrawlSettingRequiredKeyword ##

union DeleteMercariCrawlSettingRequiredKeywordResult =
    DeleteMercariCrawlSettingRequiredKeywordResultSuccess
  | DeleteMercariCrawlSettingRequiredKeywordResultError

type DeleteMercariCrawlSettingRequiredKeywordResultSuccess implements ResultBase {
  ok: Boolean!
}

type DeleteMercariCrawlSettingRequiredKeywordResultError implements ResultBase {
  ok: Boolean!
  error: DeleteMercariCrawlSettingRequiredKeywordResultErrors!
}

union DeleteMercariCrawlSettingRequiredKeywordResultErrors =
    DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed

type DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## CreateJanparaCrawlSettingExcludeKeyword ##

input CreateJanparaCrawlSettingExcludeKeywordInput {
  productId: ID!
  keyword: String
}

union CreateJanparaCrawlSettingExcludeKeywordResult =
    CreateJanparaCrawlSettingExcludeKeywordResultSuccess
  | CreateJanparaCrawlSettingExcludeKeywordResultError

type CreateJanparaCrawlSettingExcludeKeywordResultSuccess implements ResultBase {
  ok: Boolean!
  janparaCrawlSettingExcludeKeyword: JanparaCrawlSettingExcludeKeyword!
}

type CreateJanparaCrawlSettingExcludeKeywordResultError implements ResultBase {
  ok: Boolean!
  error: CreateJanparaCrawlSettingExcludeKeywordResultErrors!
}

union CreateJanparaCrawlSettingExcludeKeywordResultErrors =
    CreateJanparaCrawlSettingExcludeKeywordResultValidationFailed

type CreateJanparaCrawlSettingExcludeKeywordResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## UpdateJanparaCrawlSettingExcludeKeyword ##

input UpdateJanparaCrawlSettingExcludeKeywordInput {
  id: ID!
  productId: ID!
  keyword: String
}

union UpdateJanparaCrawlSettingExcludeKeywordResult =
    UpdateJanparaCrawlSettingExcludeKeywordResultSuccess
  | UpdateJanparaCrawlSettingExcludeKeywordResultError

type UpdateJanparaCrawlSettingExcludeKeywordResultSuccess implements ResultBase {
  ok: Boolean!
  janparaCrawlSettingExcludeKeyword: JanparaCrawlSettingExcludeKeyword!
}

type UpdateJanparaCrawlSettingExcludeKeywordResultError implements ResultBase {
  ok: Boolean!
  error: UpdateJanparaCrawlSettingExcludeKeywordResultErrors!
}

union UpdateJanparaCrawlSettingExcludeKeywordResultErrors =
    UpdateJanparaCrawlSettingExcludeKeywordResultValidationFailed

type UpdateJanparaCrawlSettingExcludeKeywordResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## DeleteJanparaCrawlSettingExcludeKeyword ##

union DeleteJanparaCrawlSettingExcludeKeywordResult =
    DeleteJanparaCrawlSettingExcludeKeywordResultSuccess
  | DeleteJanparaCrawlSettingExcludeKeywordResultError

type DeleteJanparaCrawlSettingExcludeKeywordResultSuccess implements ResultBase {
  ok: Boolean!
}

type DeleteJanparaCrawlSettingExcludeKeywordResultError implements ResultBase {
  ok: Boolean!
  error: DeleteJanparaCrawlSettingExcludeKeywordResultErrors!
}

union DeleteJanparaCrawlSettingExcludeKeywordResultErrors =
    DeleteJanparaCrawlSettingExcludeKeywordResultValidationFailed

type DeleteJanparaCrawlSettingExcludeKeywordResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## CreateJanparaCrawlSettingExcludeProduct ##

input CreateJanparaCrawlSettingExcludeProductInput {
  productId: ID!
  externalId: String!
}

union CreateJanparaCrawlSettingExcludeProductResult =
    CreateJanparaCrawlSettingExcludeProductResultSuccess
  | CreateJanparaCrawlSettingExcludeProductResultError

type CreateJanparaCrawlSettingExcludeProductResultSuccess implements ResultBase {
  ok: Boolean!
  janparaCrawlSettingExcludeProduct: JanparaCrawlSettingExcludeProduct!
}

type CreateJanparaCrawlSettingExcludeProductResultError implements ResultBase {
  ok: Boolean!
  error: CreateJanparaCrawlSettingExcludeProductResultErrors!
}

union CreateJanparaCrawlSettingExcludeProductResultErrors =
    CreateJanparaCrawlSettingExcludeProductResultValidationFailed

type CreateJanparaCrawlSettingExcludeProductResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## UpdateJanparaCrawlSettingExcludeProduct ##

input UpdateJanparaCrawlSettingExcludeProductInput {
  id: ID!
  productId: ID!
  externalId: String!
}

union UpdateJanparaCrawlSettingExcludeProductResult =
    UpdateJanparaCrawlSettingExcludeProductResultSuccess
  | UpdateJanparaCrawlSettingExcludeProductResultError

type UpdateJanparaCrawlSettingExcludeProductResultSuccess implements ResultBase {
  ok: Boolean!
  janparaCrawlSettingExcludeProduct: JanparaCrawlSettingExcludeProduct!
}

type UpdateJanparaCrawlSettingExcludeProductResultError implements ResultBase {
  ok: Boolean!
  error: UpdateJanparaCrawlSettingExcludeProductResultErrors!
}

union UpdateJanparaCrawlSettingExcludeProductResultErrors =
    UpdateJanparaCrawlSettingExcludeProductResultValidationFailed

type UpdateJanparaCrawlSettingExcludeProductResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## DeleteJanparaCrawlSettingExcludeProduct ##

union DeleteJanparaCrawlSettingExcludeProductResult =
    DeleteJanparaCrawlSettingExcludeProductResultSuccess
  | DeleteJanparaCrawlSettingExcludeProductResultError

type DeleteJanparaCrawlSettingExcludeProductResultSuccess implements ResultBase {
  ok: Boolean!
}

type DeleteJanparaCrawlSettingExcludeProductResultError implements ResultBase {
  ok: Boolean!
  error: DeleteJanparaCrawlSettingExcludeProductResultErrors!
}

union DeleteJanparaCrawlSettingExcludeProductResultErrors =
    DeleteJanparaCrawlSettingExcludeProductResultValidationFailed

type DeleteJanparaCrawlSettingExcludeProductResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## CreateJanparaCrawlSettingRequiredKeyword ##

input CreateJanparaCrawlSettingRequiredKeywordInput {
  productId: ID!
  keyword: String
}

union CreateJanparaCrawlSettingRequiredKeywordResult =
    CreateJanparaCrawlSettingRequiredKeywordResultSuccess
  | CreateJanparaCrawlSettingRequiredKeywordResultError

type CreateJanparaCrawlSettingRequiredKeywordResultSuccess implements ResultBase {
  ok: Boolean!
  janparaCrawlSettingRequiredKeyword: JanparaCrawlSettingRequiredKeyword!
}

type CreateJanparaCrawlSettingRequiredKeywordResultError implements ResultBase {
  ok: Boolean!
  error: CreateJanparaCrawlSettingRequiredKeywordResultErrors!
}

union CreateJanparaCrawlSettingRequiredKeywordResultErrors =
    CreateJanparaCrawlSettingRequiredKeywordResultValidationFailed

type CreateJanparaCrawlSettingRequiredKeywordResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## UpdateJanparaCrawlSettingRequiredKeyword ##

input UpdateJanparaCrawlSettingRequiredKeywordInput {
  id: ID!
  productId: ID!
  keyword: String
}

union UpdateJanparaCrawlSettingRequiredKeywordResult =
    UpdateJanparaCrawlSettingRequiredKeywordResultSuccess
  | UpdateJanparaCrawlSettingRequiredKeywordResultError

type UpdateJanparaCrawlSettingRequiredKeywordResultSuccess implements ResultBase {
  ok: Boolean!
  janparaCrawlSettingRequiredKeyword: JanparaCrawlSettingRequiredKeyword!
}

type UpdateJanparaCrawlSettingRequiredKeywordResultError implements ResultBase {
  ok: Boolean!
  error: UpdateJanparaCrawlSettingRequiredKeywordResultErrors!
}

union UpdateJanparaCrawlSettingRequiredKeywordResultErrors =
    UpdateJanparaCrawlSettingRequiredKeywordResultValidationFailed

type UpdateJanparaCrawlSettingRequiredKeywordResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## DeleteJanparaCrawlSettingRequiredKeyword ##

union DeleteJanparaCrawlSettingRequiredKeywordResult =
    DeleteJanparaCrawlSettingRequiredKeywordResultSuccess
  | DeleteJanparaCrawlSettingRequiredKeywordResultError

type DeleteJanparaCrawlSettingRequiredKeywordResultSuccess implements ResultBase {
  ok: Boolean!
}

type DeleteJanparaCrawlSettingRequiredKeywordResultError implements ResultBase {
  ok: Boolean!
  error: DeleteJanparaCrawlSettingRequiredKeywordResultErrors!
}

union DeleteJanparaCrawlSettingRequiredKeywordResultErrors =
    DeleteJanparaCrawlSettingRequiredKeywordResultValidationFailed

type DeleteJanparaCrawlSettingRequiredKeywordResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## CreateIosysCrawlSettingExcludeKeyword ##

input CreateIosysCrawlSettingExcludeKeywordInput {
  productId: ID!
  keyword: String
}

union CreateIosysCrawlSettingExcludeKeywordResult =
    CreateIosysCrawlSettingExcludeKeywordResultSuccess
  | CreateIosysCrawlSettingExcludeKeywordResultError

type CreateIosysCrawlSettingExcludeKeywordResultSuccess implements ResultBase {
  ok: Boolean!
  iosysCrawlSettingExcludeKeyword: IosysCrawlSettingExcludeKeyword!
}

type CreateIosysCrawlSettingExcludeKeywordResultError implements ResultBase {
  ok: Boolean!
  error: CreateIosysCrawlSettingExcludeKeywordResultErrors!
}

union CreateIosysCrawlSettingExcludeKeywordResultErrors =
    CreateIosysCrawlSettingExcludeKeywordResultValidationFailed

type CreateIosysCrawlSettingExcludeKeywordResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## UpdateIosysCrawlSettingExcludeKeyword ##

input UpdateIosysCrawlSettingExcludeKeywordInput {
  id: ID!
  productId: ID!
  keyword: String
}

union UpdateIosysCrawlSettingExcludeKeywordResult =
    UpdateIosysCrawlSettingExcludeKeywordResultSuccess
  | UpdateIosysCrawlSettingExcludeKeywordResultError

type UpdateIosysCrawlSettingExcludeKeywordResultSuccess implements ResultBase {
  ok: Boolean!
  iosysCrawlSettingExcludeKeyword: IosysCrawlSettingExcludeKeyword!
}

type UpdateIosysCrawlSettingExcludeKeywordResultError implements ResultBase {
  ok: Boolean!
  error: UpdateIosysCrawlSettingExcludeKeywordResultErrors!
}

union UpdateIosysCrawlSettingExcludeKeywordResultErrors =
    UpdateIosysCrawlSettingExcludeKeywordResultValidationFailed

type UpdateIosysCrawlSettingExcludeKeywordResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## DeleteIosysCrawlSettingExcludeKeyword ##

union DeleteIosysCrawlSettingExcludeKeywordResult =
    DeleteIosysCrawlSettingExcludeKeywordResultSuccess
  | DeleteIosysCrawlSettingExcludeKeywordResultError

type DeleteIosysCrawlSettingExcludeKeywordResultSuccess implements ResultBase {
  ok: Boolean!
}

type DeleteIosysCrawlSettingExcludeKeywordResultError implements ResultBase {
  ok: Boolean!
  error: DeleteIosysCrawlSettingExcludeKeywordResultErrors!
}

union DeleteIosysCrawlSettingExcludeKeywordResultErrors =
    DeleteIosysCrawlSettingExcludeKeywordResultValidationFailed

type DeleteIosysCrawlSettingExcludeKeywordResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## CreateIosysCrawlSettingExcludeProduct ##

input CreateIosysCrawlSettingExcludeProductInput {
  productId: ID!
  externalId: String!
}

union CreateIosysCrawlSettingExcludeProductResult =
    CreateIosysCrawlSettingExcludeProductResultSuccess
  | CreateIosysCrawlSettingExcludeProductResultError

type CreateIosysCrawlSettingExcludeProductResultSuccess implements ResultBase {
  ok: Boolean!
  iosysCrawlSettingExcludeProduct: IosysCrawlSettingExcludeProduct!
}

type CreateIosysCrawlSettingExcludeProductResultError implements ResultBase {
  ok: Boolean!
  error: CreateIosysCrawlSettingExcludeProductResultErrors!
}

union CreateIosysCrawlSettingExcludeProductResultErrors =
    CreateIosysCrawlSettingExcludeProductResultValidationFailed

type CreateIosysCrawlSettingExcludeProductResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## UpdateIosysCrawlSettingExcludeProduct ##

input UpdateIosysCrawlSettingExcludeProductInput {
  id: ID!
  productId: ID!
  externalId: String!
}

union UpdateIosysCrawlSettingExcludeProductResult =
    UpdateIosysCrawlSettingExcludeProductResultSuccess
  | UpdateIosysCrawlSettingExcludeProductResultError

type UpdateIosysCrawlSettingExcludeProductResultSuccess implements ResultBase {
  ok: Boolean!
  iosysCrawlSettingExcludeProduct: IosysCrawlSettingExcludeProduct!
}

type UpdateIosysCrawlSettingExcludeProductResultError implements ResultBase {
  ok: Boolean!
  error: UpdateIosysCrawlSettingExcludeProductResultErrors!
}

union UpdateIosysCrawlSettingExcludeProductResultErrors =
    UpdateIosysCrawlSettingExcludeProductResultValidationFailed

type UpdateIosysCrawlSettingExcludeProductResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## DeleteIosysCrawlSettingExcludeProduct ##

union DeleteIosysCrawlSettingExcludeProductResult =
    DeleteIosysCrawlSettingExcludeProductResultSuccess
  | DeleteIosysCrawlSettingExcludeProductResultError

type DeleteIosysCrawlSettingExcludeProductResultSuccess implements ResultBase {
  ok: Boolean!
}

type DeleteIosysCrawlSettingExcludeProductResultError implements ResultBase {
  ok: Boolean!
  error: DeleteIosysCrawlSettingExcludeProductResultErrors!
}

union DeleteIosysCrawlSettingExcludeProductResultErrors =
    DeleteIosysCrawlSettingExcludeProductResultValidationFailed

type DeleteIosysCrawlSettingExcludeProductResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## CreateIosysCrawlSettingRequiredKeyword ##

input CreateIosysCrawlSettingRequiredKeywordInput {
  productId: ID!
  keyword: String
}

union CreateIosysCrawlSettingRequiredKeywordResult =
    CreateIosysCrawlSettingRequiredKeywordResultSuccess
  | CreateIosysCrawlSettingRequiredKeywordResultError

type CreateIosysCrawlSettingRequiredKeywordResultSuccess implements ResultBase {
  ok: Boolean!
  iosysCrawlSettingRequiredKeyword: IosysCrawlSettingRequiredKeyword!
}

type CreateIosysCrawlSettingRequiredKeywordResultError implements ResultBase {
  ok: Boolean!
  error: CreateIosysCrawlSettingRequiredKeywordResultErrors!
}

union CreateIosysCrawlSettingRequiredKeywordResultErrors =
    CreateIosysCrawlSettingRequiredKeywordResultValidationFailed

type CreateIosysCrawlSettingRequiredKeywordResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## UpdateIosysCrawlSettingRequiredKeyword ##

input UpdateIosysCrawlSettingRequiredKeywordInput {
  id: ID!
  productId: ID!
  keyword: String
}

union UpdateIosysCrawlSettingRequiredKeywordResult =
    UpdateIosysCrawlSettingRequiredKeywordResultSuccess
  | UpdateIosysCrawlSettingRequiredKeywordResultError

type UpdateIosysCrawlSettingRequiredKeywordResultSuccess implements ResultBase {
  ok: Boolean!
  iosysCrawlSettingRequiredKeyword: IosysCrawlSettingRequiredKeyword!
}

type UpdateIosysCrawlSettingRequiredKeywordResultError implements ResultBase {
  ok: Boolean!
  error: UpdateIosysCrawlSettingRequiredKeywordResultErrors!
}

union UpdateIosysCrawlSettingRequiredKeywordResultErrors =
    UpdateIosysCrawlSettingRequiredKeywordResultValidationFailed

type UpdateIosysCrawlSettingRequiredKeywordResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## DeleteIosysCrawlSettingRequiredKeyword ##

union DeleteIosysCrawlSettingRequiredKeywordResult =
    DeleteIosysCrawlSettingRequiredKeywordResultSuccess
  | DeleteIosysCrawlSettingRequiredKeywordResultError

type DeleteIosysCrawlSettingRequiredKeywordResultSuccess implements ResultBase {
  ok: Boolean!
}

type DeleteIosysCrawlSettingRequiredKeywordResultError implements ResultBase {
  ok: Boolean!
  error: DeleteIosysCrawlSettingRequiredKeywordResultErrors!
}

union DeleteIosysCrawlSettingRequiredKeywordResultErrors =
    DeleteIosysCrawlSettingRequiredKeywordResultValidationFailed

type DeleteIosysCrawlSettingRequiredKeywordResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## CreatePcKoubouCrawlSettingExcludeKeyword ##

input CreatePcKoubouCrawlSettingExcludeKeywordInput {
  productId: ID!
  keyword: String
}

union CreatePcKoubouCrawlSettingExcludeKeywordResult =
    CreatePcKoubouCrawlSettingExcludeKeywordResultSuccess
  | CreatePcKoubouCrawlSettingExcludeKeywordResultError

type CreatePcKoubouCrawlSettingExcludeKeywordResultSuccess implements ResultBase {
  ok: Boolean!
  pcKoubouCrawlSettingExcludeKeyword: PcKoubouCrawlSettingExcludeKeyword!
}

type CreatePcKoubouCrawlSettingExcludeKeywordResultError implements ResultBase {
  ok: Boolean!
  error: CreatePcKoubouCrawlSettingExcludeKeywordResultErrors!
}

union CreatePcKoubouCrawlSettingExcludeKeywordResultErrors =
    CreatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed

type CreatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## UpdatePcKoubouCrawlSettingExcludeKeyword ##

input UpdatePcKoubouCrawlSettingExcludeKeywordInput {
  id: ID!
  productId: ID!
  keyword: String
}

union UpdatePcKoubouCrawlSettingExcludeKeywordResult =
    UpdatePcKoubouCrawlSettingExcludeKeywordResultSuccess
  | UpdatePcKoubouCrawlSettingExcludeKeywordResultError

type UpdatePcKoubouCrawlSettingExcludeKeywordResultSuccess implements ResultBase {
  ok: Boolean!
  pcKoubouCrawlSettingExcludeKeyword: PcKoubouCrawlSettingExcludeKeyword!
}

type UpdatePcKoubouCrawlSettingExcludeKeywordResultError implements ResultBase {
  ok: Boolean!
  error: UpdatePcKoubouCrawlSettingExcludeKeywordResultErrors!
}

union UpdatePcKoubouCrawlSettingExcludeKeywordResultErrors =
    UpdatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed

type UpdatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## DeletePcKoubouCrawlSettingExcludeKeyword ##

union DeletePcKoubouCrawlSettingExcludeKeywordResult =
    DeletePcKoubouCrawlSettingExcludeKeywordResultSuccess
  | DeletePcKoubouCrawlSettingExcludeKeywordResultError

type DeletePcKoubouCrawlSettingExcludeKeywordResultSuccess implements ResultBase {
  ok: Boolean!
}

type DeletePcKoubouCrawlSettingExcludeKeywordResultError implements ResultBase {
  ok: Boolean!
  error: DeletePcKoubouCrawlSettingExcludeKeywordResultErrors!
}

union DeletePcKoubouCrawlSettingExcludeKeywordResultErrors =
    DeletePcKoubouCrawlSettingExcludeKeywordResultValidationFailed

type DeletePcKoubouCrawlSettingExcludeKeywordResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## CreatePcKoubouCrawlSettingExcludeProduct ##

input CreatePcKoubouCrawlSettingExcludeProductInput {
  productId: ID!
  externalId: String!
}

union CreatePcKoubouCrawlSettingExcludeProductResult =
    CreatePcKoubouCrawlSettingExcludeProductResultSuccess
  | CreatePcKoubouCrawlSettingExcludeProductResultError

type CreatePcKoubouCrawlSettingExcludeProductResultSuccess implements ResultBase {
  ok: Boolean!
  pcKoubouCrawlSettingExcludeProduct: PcKoubouCrawlSettingExcludeProduct!
}

type CreatePcKoubouCrawlSettingExcludeProductResultError implements ResultBase {
  ok: Boolean!
  error: CreatePcKoubouCrawlSettingExcludeProductResultErrors!
}

union CreatePcKoubouCrawlSettingExcludeProductResultErrors =
    CreatePcKoubouCrawlSettingExcludeProductResultValidationFailed

type CreatePcKoubouCrawlSettingExcludeProductResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## UpdatePcKoubouCrawlSettingExcludeProduct ##

input UpdatePcKoubouCrawlSettingExcludeProductInput {
  id: ID!
  productId: ID!
  externalId: String!
}

union UpdatePcKoubouCrawlSettingExcludeProductResult =
    UpdatePcKoubouCrawlSettingExcludeProductResultSuccess
  | UpdatePcKoubouCrawlSettingExcludeProductResultError

type UpdatePcKoubouCrawlSettingExcludeProductResultSuccess implements ResultBase {
  ok: Boolean!
  pcKoubouCrawlSettingExcludeProduct: PcKoubouCrawlSettingExcludeProduct!
}

type UpdatePcKoubouCrawlSettingExcludeProductResultError implements ResultBase {
  ok: Boolean!
  error: UpdatePcKoubouCrawlSettingExcludeProductResultErrors!
}

union UpdatePcKoubouCrawlSettingExcludeProductResultErrors =
    UpdatePcKoubouCrawlSettingExcludeProductResultValidationFailed

type UpdatePcKoubouCrawlSettingExcludeProductResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## DeletePcKoubouCrawlSettingExcludeProduct ##

union DeletePcKoubouCrawlSettingExcludeProductResult =
    DeletePcKoubouCrawlSettingExcludeProductResultSuccess
  | DeletePcKoubouCrawlSettingExcludeProductResultError

type DeletePcKoubouCrawlSettingExcludeProductResultSuccess implements ResultBase {
  ok: Boolean!
}

type DeletePcKoubouCrawlSettingExcludeProductResultError implements ResultBase {
  ok: Boolean!
  error: DeletePcKoubouCrawlSettingExcludeProductResultErrors!
}

union DeletePcKoubouCrawlSettingExcludeProductResultErrors =
    DeletePcKoubouCrawlSettingExcludeProductResultValidationFailed

type DeletePcKoubouCrawlSettingExcludeProductResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## CreatePcKoubouCrawlSettingRequiredKeyword ##

input CreatePcKoubouCrawlSettingRequiredKeywordInput {
  productId: ID!
  keyword: String
}

union CreatePcKoubouCrawlSettingRequiredKeywordResult =
    CreatePcKoubouCrawlSettingRequiredKeywordResultSuccess
  | CreatePcKoubouCrawlSettingRequiredKeywordResultError

type CreatePcKoubouCrawlSettingRequiredKeywordResultSuccess implements ResultBase {
  ok: Boolean!
  pcKoubouCrawlSettingRequiredKeyword: PcKoubouCrawlSettingRequiredKeyword!
}

type CreatePcKoubouCrawlSettingRequiredKeywordResultError implements ResultBase {
  ok: Boolean!
  error: CreatePcKoubouCrawlSettingRequiredKeywordResultErrors!
}

union CreatePcKoubouCrawlSettingRequiredKeywordResultErrors =
    CreatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed

type CreatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## UpdatePcKoubouCrawlSettingRequiredKeyword ##

input UpdatePcKoubouCrawlSettingRequiredKeywordInput {
  id: ID!
  productId: ID!
  keyword: String
}

union UpdatePcKoubouCrawlSettingRequiredKeywordResult =
    UpdatePcKoubouCrawlSettingRequiredKeywordResultSuccess
  | UpdatePcKoubouCrawlSettingRequiredKeywordResultError

type UpdatePcKoubouCrawlSettingRequiredKeywordResultSuccess implements ResultBase {
  ok: Boolean!
  pcKoubouCrawlSettingRequiredKeyword: PcKoubouCrawlSettingRequiredKeyword!
}

type UpdatePcKoubouCrawlSettingRequiredKeywordResultError implements ResultBase {
  ok: Boolean!
  error: UpdatePcKoubouCrawlSettingRequiredKeywordResultErrors!
}

union UpdatePcKoubouCrawlSettingRequiredKeywordResultErrors =
    UpdatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed

type UpdatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## DeletePcKoubouCrawlSettingRequiredKeyword ##

union DeletePcKoubouCrawlSettingRequiredKeywordResult =
    DeletePcKoubouCrawlSettingRequiredKeywordResultSuccess
  | DeletePcKoubouCrawlSettingRequiredKeywordResultError

type DeletePcKoubouCrawlSettingRequiredKeywordResultSuccess implements ResultBase {
  ok: Boolean!
}

type DeletePcKoubouCrawlSettingRequiredKeywordResultError implements ResultBase {
  ok: Boolean!
  error: DeletePcKoubouCrawlSettingRequiredKeywordResultErrors!
}

union DeletePcKoubouCrawlSettingRequiredKeywordResultErrors =
    DeletePcKoubouCrawlSettingRequiredKeywordResultValidationFailed

type DeletePcKoubouCrawlSettingRequiredKeywordResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}
`, BuiltIn: false},
	{Name: "../graph/product.graphqls", Input: `type Product implements Node {
  id: ID!
  name: String!
  yahooAuctionProducts(
    published: Boolean
    sort: String
    order: String
  ): [YahooAuctionProduct!]!
  yahooAuctionCrawlSetting: YahooAuctionCrawlSetting!
  yahooAuctionDailyPurchaseSummaries: [YahooAuctionDailyPurchaseSummary!]!
  yahooFleamarketDailyPurchaseSummaries: [YahooFleamarketDailyPurchaseSummary!]!
  mercariProducts(
    published: Boolean
    sort: String
    order: String
  ): [MercariProduct!]!
  mercariCrawlSetting: MercariCrawlSetting!
  mercariDailyPurchaseSummaries: [MercariDailyPurchaseSummary!]!
  janparaCrawlSetting: JanparaCrawlSetting!
  iosysCrawlSetting: IosysCrawlSetting!
  pcKoubouCrawlSetting: PcKoubouCrawlSetting!
  relatedProducts(
    platformMask: String!
    page: Int
    per: Int
    sort: String
    order: String
  ): [RelatedProduct!]!
}

type YahooAuctionProduct implements Node {
  id: ID!
  productId: Int!
  yahooAuctionId: String!
  name: String!
  thumbnailUrl: String!
  price: Int!
  published: Boolean!
  boughtDate: String
  createdAt: String!
  updatedAt: String!
}

type YahooAuctionCrawlSetting implements Node {
  id: ID!
  productId: Int!
  keyword: String!
  minPrice: Int!
  maxPrice: Int!
  categoryId: Int
  enabled: Boolean!
  createdAt: String!
  updatedAt: String!
  yahooAuctionCrawlSettingExcludeKeywords: [YahooAuctionCrawlSettingExcludeKeyword!]!
  yahooAuctionCrawlSettingExcludeProducts: [YahooAuctionCrawlSettingExcludeProduct!]!
  yahooAuctionCrawlSettingRequiredKeywords: [YahooAuctionCrawlSettingRequiredKeyword!]!
}

type YahooAuctionCrawlSettingExcludeKeyword implements Node {
  id: ID!
  yahooAuctionCrawlSettingId: Int!
  keyword: String
  createdAt: String!
  updatedAt: String!
}

type YahooAuctionCrawlSettingExcludeProduct implements Node {
  id: ID!
  yahooAuctionCrawlSettingId: Int!
  externalId: String!
  createdAt: String!
  updatedAt: String!
}

type YahooAuctionCrawlSettingRequiredKeyword implements Node {
  id: ID!
  yahooAuctionCrawlSettingId: Int!
  keyword: String
  createdAt: String!
  updatedAt: String!
}

type YahooAuctionDailyPurchaseSummary implements Node {
  id: ID!
  productId: Int!
  averagePurchasePrice: Int
  purchaseCount: Int!
  date: String!
  createdAt: String!
  updatedAt: String!
}

type YahooFleamarketDailyPurchaseSummary implements Node {
  id: ID!
  productId: Int!
  averagePurchasePrice: Int
  purchaseCount: Int!
  date: String!
  createdAt: String!
  updatedAt: String!
}

type MercariDailyPurchaseSummary implements Node {
  id: ID!
  productId: Int!
  averagePurchasePrice: Int
  purchaseCount: Int!
  date: String!
  createdAt: String!
  updatedAt: String!
}

type MercariProduct implements Node {
  id: ID!
  productId: Int!
  mercariId: String!
  name: String!
  thumbnailUrl: String!
  price: Int!
  published: Boolean!
  boughtDate: String
  createdAt: String!
  updatedAt: String!
}

type MercariCrawlSetting implements Node {
  id: ID!
  productId: Int!
  keyword: String!
  minPrice: Int!
  maxPrice: Int!
  categoryId: Int
  enabled: Boolean!
  createdAt: String!
  updatedAt: String!
  mercariCrawlSettingExcludeKeywords: [MercariCrawlSettingExcludeKeyword!]!
  mercariCrawlSettingExcludeProducts: [MercariCrawlSettingExcludeProduct!]!
  mercariCrawlSettingRequiredKeywords: [MercariCrawlSettingRequiredKeyword!]!
}

type MercariCrawlSettingExcludeKeyword implements Node {
  id: ID!
  mercariCrawlSettingId: Int!
  keyword: String
  createdAt: String!
  updatedAt: String!
}

type MercariCrawlSettingExcludeProduct implements Node {
  id: ID!
  mercariCrawlSettingId: Int!
  externalId: String!
  createdAt: String!
  updatedAt: String!
}

type MercariCrawlSettingRequiredKeyword implements Node {
  id: ID!
  mercariCrawlSettingId: Int!
  keyword: String
  createdAt: String!
  updatedAt: String!
}

type JanparaCrawlSetting implements Node {
  id: ID!
  productId: Int!
  keyword: String!
  minPrice: Int!
  maxPrice: Int!
  enabled: Boolean!
  createdAt: String!
  updatedAt: String!
  janparaCrawlSettingExcludeKeywords: [JanparaCrawlSettingExcludeKeyword!]!
  janparaCrawlSettingExcludeProducts: [JanparaCrawlSettingExcludeProduct!]!
  janparaCrawlSettingRequiredKeywords: [JanparaCrawlSettingRequiredKeyword!]!
}

type JanparaCrawlSettingExcludeKeyword implements Node {
  id: ID!
  janparaCrawlSettingId: Int!
  keyword: String
  createdAt: String!
  updatedAt: String!
}

type JanparaCrawlSettingExcludeProduct implements Node {
  id: ID!
  janparaCrawlSettingId: Int!
  externalId: String!
  createdAt: String!
  updatedAt: String!
}

type JanparaCrawlSettingRequiredKeyword implements Node {
  id: ID!
  janparaCrawlSettingId: Int!
  keyword: String
  createdAt: String!
  updatedAt: String!
}

type IosysCrawlSetting implements Node {
  id: ID!
  productId: Int!
  keyword: String!
  minPrice: Int!
  maxPrice: Int!
  enabled: Boolean!
  createdAt: String!
  updatedAt: String!
  iosysCrawlSettingExcludeKeywords: [IosysCrawlSettingExcludeKeyword!]!
  iosysCrawlSettingExcludeProducts: [IosysCrawlSettingExcludeProduct!]!
  iosysCrawlSettingRequiredKeywords: [IosysCrawlSettingRequiredKeyword!]!
}

type IosysCrawlSettingExcludeKeyword implements Node {
  id: ID!
  iosysCrawlSettingId: Int!
  keyword: String
  createdAt: String!
  updatedAt: String!
}

type IosysCrawlSettingExcludeProduct implements Node {
  id: ID!
  iosysCrawlSettingId: Int!
  externalId: String!
  createdAt: String!
  updatedAt: String!
}

type IosysCrawlSettingRequiredKeyword implements Node {
  id: ID!
  iosysCrawlSettingId: Int!
  keyword: String
  createdAt: String!
  updatedAt: String!
}

type PcKoubouCrawlSetting implements Node {
  id: ID!
  productId: Int!
  keyword: String!
  minPrice: Int!
  maxPrice: Int!
  enabled: Boolean!
  createdAt: String!
  updatedAt: String!
  pcKoubouCrawlSettingExcludeKeywords: [PcKoubouCrawlSettingExcludeKeyword!]!
  pcKoubouCrawlSettingExcludeProducts: [PcKoubouCrawlSettingExcludeProduct!]!
  pcKoubouCrawlSettingRequiredKeywords: [PcKoubouCrawlSettingRequiredKeyword!]!
}

type PcKoubouCrawlSettingExcludeKeyword implements Node {
  id: ID!
  pcKoubouCrawlSettingId: Int!
  keyword: String
  createdAt: String!
  updatedAt: String!
}

type PcKoubouCrawlSettingExcludeProduct implements Node {
  id: ID!
  pcKoubouCrawlSettingId: Int!
  externalId: String!
  createdAt: String!
  updatedAt: String!
}

type PcKoubouCrawlSettingRequiredKeyword implements Node {
  id: ID!
  pcKoubouCrawlSettingId: Int!
  keyword: String
  createdAt: String!
  updatedAt: String!
}

type RelatedProduct {
  platform: String!
  productId: Int!
  externalId: String!
  name: String!
  thumbnailUrl: String!
  price: Int!
  buyoutPrice: Int
  published: Boolean!
  boughtDate: String
  endDate: String
  createdAt: String!
  updatedAt: String!
}
`, BuiltIn: false},
	{Name: "../graph/query.graphqls", Input: `type Query {
  product(id: ID!): Product!
  products(id: ID, name: String): [Product!]!
  node(id: ID!): Node
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_createIosysCrawlSettingExcludeKeyword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateIosysCrawlSettingExcludeKeywordInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateIosysCrawlSettingExcludeKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateIosysCrawlSettingExcludeKeywordInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createIosysCrawlSettingExcludeProduct_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateIosysCrawlSettingExcludeProductInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateIosysCrawlSettingExcludeProductInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateIosysCrawlSettingExcludeProductInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createIosysCrawlSettingRequiredKeyword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateIosysCrawlSettingRequiredKeywordInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateIosysCrawlSettingRequiredKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateIosysCrawlSettingRequiredKeywordInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createJanparaCrawlSettingExcludeKeyword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateJanparaCrawlSettingExcludeKeywordInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateJanparaCrawlSettingExcludeKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateJanparaCrawlSettingExcludeKeywordInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createJanparaCrawlSettingExcludeProduct_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateJanparaCrawlSettingExcludeProductInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateJanparaCrawlSettingExcludeProductInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateJanparaCrawlSettingExcludeProductInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createJanparaCrawlSettingRequiredKeyword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateJanparaCrawlSettingRequiredKeywordInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateJanparaCrawlSettingRequiredKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateJanparaCrawlSettingRequiredKeywordInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createMercariCrawlSettingExcludeKeyword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateMercariCrawlSettingExcludeKeywordInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateMercariCrawlSettingExcludeKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateMercariCrawlSettingExcludeKeywordInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createMercariCrawlSettingExcludeProduct_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateMercariCrawlSettingExcludeProductInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateMercariCrawlSettingExcludeProductInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateMercariCrawlSettingExcludeProductInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createMercariCrawlSettingRequiredKeyword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateMercariCrawlSettingRequiredKeywordInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateMercariCrawlSettingRequiredKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateMercariCrawlSettingRequiredKeywordInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPcKoubouCrawlSettingExcludeKeyword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreatePcKoubouCrawlSettingExcludeKeywordInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreatePcKoubouCrawlSettingExcludeKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreatePcKoubouCrawlSettingExcludeKeywordInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPcKoubouCrawlSettingExcludeProduct_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreatePcKoubouCrawlSettingExcludeProductInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreatePcKoubouCrawlSettingExcludeProductInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreatePcKoubouCrawlSettingExcludeProductInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPcKoubouCrawlSettingRequiredKeyword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreatePcKoubouCrawlSettingRequiredKeywordInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreatePcKoubouCrawlSettingRequiredKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreatePcKoubouCrawlSettingRequiredKeywordInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createProduct_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateProductInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateProductInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateProductInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createYahooAuctionCrawlSettingExcludeKeyword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateYahooAuctionCrawlSettingExcludeKeywordInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateYahooAuctionCrawlSettingExcludeKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateYahooAuctionCrawlSettingExcludeKeywordInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createYahooAuctionCrawlSettingExcludeProduct_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateYahooAuctionCrawlSettingExcludeProductInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateYahooAuctionCrawlSettingExcludeProductInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateYahooAuctionCrawlSettingExcludeProductInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createYahooAuctionCrawlSettingRequiredKeyword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateYahooAuctionCrawlSettingRequiredKeywordInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateYahooAuctionCrawlSettingRequiredKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateYahooAuctionCrawlSettingRequiredKeywordInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteIosysCrawlSettingExcludeKeyword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["productId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["productId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteIosysCrawlSettingExcludeProduct_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["productId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["productId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteIosysCrawlSettingRequiredKeyword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["productId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["productId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteJanparaCrawlSettingExcludeKeyword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["productId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["productId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteJanparaCrawlSettingExcludeProduct_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["productId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["productId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteJanparaCrawlSettingRequiredKeyword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["productId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["productId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteMercariCrawlSettingExcludeKeyword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["productId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["productId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteMercariCrawlSettingExcludeProduct_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["productId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["productId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteMercariCrawlSettingRequiredKeyword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["productId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["productId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePcKoubouCrawlSettingExcludeKeyword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["productId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["productId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePcKoubouCrawlSettingExcludeProduct_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["productId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["productId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePcKoubouCrawlSettingRequiredKeyword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["productId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["productId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteProduct_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteYahooAuctionCrawlSettingExcludeKeyword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["productId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["productId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteYahooAuctionCrawlSettingExcludeProduct_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["productId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["productId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteYahooAuctionCrawlSettingRequiredKeyword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["productId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["productId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateIosysCrawlSettingExcludeKeyword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateIosysCrawlSettingExcludeKeywordInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateIosysCrawlSettingExcludeKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateIosysCrawlSettingExcludeKeywordInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateIosysCrawlSettingExcludeProduct_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateIosysCrawlSettingExcludeProductInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateIosysCrawlSettingExcludeProductInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateIosysCrawlSettingExcludeProductInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateIosysCrawlSettingRequiredKeyword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateIosysCrawlSettingRequiredKeywordInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateIosysCrawlSettingRequiredKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateIosysCrawlSettingRequiredKeywordInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateJanparaCrawlSettingExcludeKeyword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateJanparaCrawlSettingExcludeKeywordInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateJanparaCrawlSettingExcludeKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateJanparaCrawlSettingExcludeKeywordInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateJanparaCrawlSettingExcludeProduct_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateJanparaCrawlSettingExcludeProductInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateJanparaCrawlSettingExcludeProductInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateJanparaCrawlSettingExcludeProductInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateJanparaCrawlSettingRequiredKeyword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateJanparaCrawlSettingRequiredKeywordInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateJanparaCrawlSettingRequiredKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateJanparaCrawlSettingRequiredKeywordInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateMercariCrawlSettingExcludeKeyword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateMercariCrawlSettingExcludeKeywordInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateMercariCrawlSettingExcludeKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateMercariCrawlSettingExcludeKeywordInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateMercariCrawlSettingExcludeProduct_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateMercariCrawlSettingExcludeProductInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateMercariCrawlSettingExcludeProductInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateMercariCrawlSettingExcludeProductInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateMercariCrawlSettingRequiredKeyword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateMercariCrawlSettingRequiredKeywordInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateMercariCrawlSettingRequiredKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateMercariCrawlSettingRequiredKeywordInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePcKoubouCrawlSettingExcludeKeyword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdatePcKoubouCrawlSettingExcludeKeywordInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdatePcKoubouCrawlSettingExcludeKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdatePcKoubouCrawlSettingExcludeKeywordInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePcKoubouCrawlSettingExcludeProduct_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdatePcKoubouCrawlSettingExcludeProductInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdatePcKoubouCrawlSettingExcludeProductInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdatePcKoubouCrawlSettingExcludeProductInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePcKoubouCrawlSettingRequiredKeyword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdatePcKoubouCrawlSettingRequiredKeywordInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdatePcKoubouCrawlSettingRequiredKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdatePcKoubouCrawlSettingRequiredKeywordInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateProduct_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.UpdateProductInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateProductInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateProductInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateYahooAuctionCrawlSettingExcludeKeyword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateYahooAuctionCrawlSettingExcludeKeywordInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateYahooAuctionCrawlSettingExcludeKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateYahooAuctionCrawlSettingExcludeKeywordInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateYahooAuctionCrawlSettingExcludeProduct_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateYahooAuctionCrawlSettingExcludeProductInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateYahooAuctionCrawlSettingExcludeProductInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateYahooAuctionCrawlSettingExcludeProductInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateYahooAuctionCrawlSettingRequiredKeyword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateYahooAuctionCrawlSettingRequiredKeywordInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateYahooAuctionCrawlSettingRequiredKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateYahooAuctionCrawlSettingRequiredKeywordInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Product_mercariProducts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *bool
	if tmp, ok := rawArgs["published"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published"))
		arg0, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["published"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg2
	return args, nil
}

func (ec *executionContext) field_Product_relatedProducts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["platformMask"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("platformMask"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["platformMask"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["per"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("per"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["per"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg4
	return args, nil
}

func (ec *executionContext) field_Product_yahooAuctionProducts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *bool
	if tmp, ok := rawArgs["published"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published"))
		arg0, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["published"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_node_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_product_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_products_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg1
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _CreateIosysCrawlSettingExcludeKeywordResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.CreateIosysCrawlSettingExcludeKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateIosysCrawlSettingExcludeKeywordResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateIosysCrawlSettingExcludeKeywordResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateIosysCrawlSettingExcludeKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateIosysCrawlSettingExcludeKeywordResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.CreateIosysCrawlSettingExcludeKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateIosysCrawlSettingExcludeKeywordResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CreateIosysCrawlSettingExcludeKeywordResultErrors)
	fc.Result = res
	return ec.marshalNCreateIosysCrawlSettingExcludeKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateIosysCrawlSettingExcludeKeywordResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateIosysCrawlSettingExcludeKeywordResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateIosysCrawlSettingExcludeKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CreateIosysCrawlSettingExcludeKeywordResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateIosysCrawlSettingExcludeKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.CreateIosysCrawlSettingExcludeKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateIosysCrawlSettingExcludeKeywordResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateIosysCrawlSettingExcludeKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateIosysCrawlSettingExcludeKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateIosysCrawlSettingExcludeKeywordResultSuccess_iosysCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField, obj *model.CreateIosysCrawlSettingExcludeKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateIosysCrawlSettingExcludeKeywordResultSuccess_iosysCrawlSettingExcludeKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IosysCrawlSettingExcludeKeyword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.IosysCrawlSettingExcludeKeyword)
	fc.Result = res
	return ec.marshalNIosysCrawlSettingExcludeKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐIosysCrawlSettingExcludeKeyword(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateIosysCrawlSettingExcludeKeywordResultSuccess_iosysCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateIosysCrawlSettingExcludeKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_IosysCrawlSettingExcludeKeyword_id(ctx, field)
			case "iosysCrawlSettingId":
				return ec.fieldContext_IosysCrawlSettingExcludeKeyword_iosysCrawlSettingId(ctx, field)
			case "keyword":
				return ec.fieldContext_IosysCrawlSettingExcludeKeyword_keyword(ctx, field)
			case "createdAt":
				return ec.fieldContext_IosysCrawlSettingExcludeKeyword_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_IosysCrawlSettingExcludeKeyword_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type IosysCrawlSettingExcludeKeyword", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateIosysCrawlSettingExcludeKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.CreateIosysCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateIosysCrawlSettingExcludeKeywordResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateIosysCrawlSettingExcludeKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateIosysCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateIosysCrawlSettingExcludeKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.CreateIosysCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateIosysCrawlSettingExcludeKeywordResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateIosysCrawlSettingExcludeKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateIosysCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateIosysCrawlSettingExcludeKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.CreateIosysCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateIosysCrawlSettingExcludeKeywordResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateIosysCrawlSettingExcludeKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateIosysCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateIosysCrawlSettingExcludeProductResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.CreateIosysCrawlSettingExcludeProductResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateIosysCrawlSettingExcludeProductResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateIosysCrawlSettingExcludeProductResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateIosysCrawlSettingExcludeProductResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateIosysCrawlSettingExcludeProductResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.CreateIosysCrawlSettingExcludeProductResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateIosysCrawlSettingExcludeProductResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CreateIosysCrawlSettingExcludeProductResultErrors)
	fc.Result = res
	return ec.marshalNCreateIosysCrawlSettingExcludeProductResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateIosysCrawlSettingExcludeProductResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateIosysCrawlSettingExcludeProductResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateIosysCrawlSettingExcludeProductResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CreateIosysCrawlSettingExcludeProductResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateIosysCrawlSettingExcludeProductResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.CreateIosysCrawlSettingExcludeProductResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateIosysCrawlSettingExcludeProductResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateIosysCrawlSettingExcludeProductResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateIosysCrawlSettingExcludeProductResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateIosysCrawlSettingExcludeProductResultSuccess_iosysCrawlSettingExcludeProduct(ctx context.Context, field graphql.CollectedField, obj *model.CreateIosysCrawlSettingExcludeProductResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateIosysCrawlSettingExcludeProductResultSuccess_iosysCrawlSettingExcludeProduct(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IosysCrawlSettingExcludeProduct, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.IosysCrawlSettingExcludeProduct)
	fc.Result = res
	return ec.marshalNIosysCrawlSettingExcludeProduct2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐIosysCrawlSettingExcludeProduct(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateIosysCrawlSettingExcludeProductResultSuccess_iosysCrawlSettingExcludeProduct(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateIosysCrawlSettingExcludeProductResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_IosysCrawlSettingExcludeProduct_id(ctx, field)
			case "iosysCrawlSettingId":
				return ec.fieldContext_IosysCrawlSettingExcludeProduct_iosysCrawlSettingId(ctx, field)
			case "externalId":
				return ec.fieldContext_IosysCrawlSettingExcludeProduct_externalId(ctx, field)
			case "createdAt":
				return ec.fieldContext_IosysCrawlSettingExcludeProduct_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_IosysCrawlSettingExcludeProduct_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type IosysCrawlSettingExcludeProduct", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateIosysCrawlSettingExcludeProductResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.CreateIosysCrawlSettingExcludeProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateIosysCrawlSettingExcludeProductResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateIosysCrawlSettingExcludeProductResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateIosysCrawlSettingExcludeProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateIosysCrawlSettingExcludeProductResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.CreateIosysCrawlSettingExcludeProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateIosysCrawlSettingExcludeProductResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateIosysCrawlSettingExcludeProductResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateIosysCrawlSettingExcludeProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateIosysCrawlSettingExcludeProductResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.CreateIosysCrawlSettingExcludeProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateIosysCrawlSettingExcludeProductResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateIosysCrawlSettingExcludeProductResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateIosysCrawlSettingExcludeProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateIosysCrawlSettingRequiredKeywordResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.CreateIosysCrawlSettingRequiredKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateIosysCrawlSettingRequiredKeywordResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateIosysCrawlSettingRequiredKeywordResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateIosysCrawlSettingRequiredKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateIosysCrawlSettingRequiredKeywordResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.CreateIosysCrawlSettingRequiredKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateIosysCrawlSettingRequiredKeywordResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CreateIosysCrawlSettingRequiredKeywordResultErrors)
	fc.Result = res
	return ec.marshalNCreateIosysCrawlSettingRequiredKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateIosysCrawlSettingRequiredKeywordResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateIosysCrawlSettingRequiredKeywordResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateIosysCrawlSettingRequiredKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CreateIosysCrawlSettingRequiredKeywordResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateIosysCrawlSettingRequiredKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.CreateIosysCrawlSettingRequiredKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateIosysCrawlSettingRequiredKeywordResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateIosysCrawlSettingRequiredKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateIosysCrawlSettingRequiredKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateIosysCrawlSettingRequiredKeywordResultSuccess_iosysCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField, obj *model.CreateIosysCrawlSettingRequiredKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateIosysCrawlSettingRequiredKeywordResultSuccess_iosysCrawlSettingRequiredKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IosysCrawlSettingRequiredKeyword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.IosysCrawlSettingRequiredKeyword)
	fc.Result = res
	return ec.marshalNIosysCrawlSettingRequiredKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐIosysCrawlSettingRequiredKeyword(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateIosysCrawlSettingRequiredKeywordResultSuccess_iosysCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateIosysCrawlSettingRequiredKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_IosysCrawlSettingRequiredKeyword_id(ctx, field)
			case "iosysCrawlSettingId":
				return ec.fieldContext_IosysCrawlSettingRequiredKeyword_iosysCrawlSettingId(ctx, field)
			case "keyword":
				return ec.fieldContext_IosysCrawlSettingRequiredKeyword_keyword(ctx, field)
			case "createdAt":
				return ec.fieldContext_IosysCrawlSettingRequiredKeyword_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_IosysCrawlSettingRequiredKeyword_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type IosysCrawlSettingRequiredKeyword", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateIosysCrawlSettingRequiredKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.CreateIosysCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateIosysCrawlSettingRequiredKeywordResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateIosysCrawlSettingRequiredKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateIosysCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateIosysCrawlSettingRequiredKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.CreateIosysCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateIosysCrawlSettingRequiredKeywordResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateIosysCrawlSettingRequiredKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateIosysCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateIosysCrawlSettingRequiredKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.CreateIosysCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateIosysCrawlSettingRequiredKeywordResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateIosysCrawlSettingRequiredKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateIosysCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateJanparaCrawlSettingExcludeKeywordResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.CreateJanparaCrawlSettingExcludeKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateJanparaCrawlSettingExcludeKeywordResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateJanparaCrawlSettingExcludeKeywordResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateJanparaCrawlSettingExcludeKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateJanparaCrawlSettingExcludeKeywordResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.CreateJanparaCrawlSettingExcludeKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateJanparaCrawlSettingExcludeKeywordResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CreateJanparaCrawlSettingExcludeKeywordResultErrors)
	fc.Result = res
	return ec.marshalNCreateJanparaCrawlSettingExcludeKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateJanparaCrawlSettingExcludeKeywordResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateJanparaCrawlSettingExcludeKeywordResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateJanparaCrawlSettingExcludeKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CreateJanparaCrawlSettingExcludeKeywordResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateJanparaCrawlSettingExcludeKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.CreateJanparaCrawlSettingExcludeKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateJanparaCrawlSettingExcludeKeywordResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateJanparaCrawlSettingExcludeKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateJanparaCrawlSettingExcludeKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateJanparaCrawlSettingExcludeKeywordResultSuccess_janparaCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField, obj *model.CreateJanparaCrawlSettingExcludeKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateJanparaCrawlSettingExcludeKeywordResultSuccess_janparaCrawlSettingExcludeKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JanparaCrawlSettingExcludeKeyword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.JanparaCrawlSettingExcludeKeyword)
	fc.Result = res
	return ec.marshalNJanparaCrawlSettingExcludeKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐJanparaCrawlSettingExcludeKeyword(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateJanparaCrawlSettingExcludeKeywordResultSuccess_janparaCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateJanparaCrawlSettingExcludeKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_JanparaCrawlSettingExcludeKeyword_id(ctx, field)
			case "janparaCrawlSettingId":
				return ec.fieldContext_JanparaCrawlSettingExcludeKeyword_janparaCrawlSettingId(ctx, field)
			case "keyword":
				return ec.fieldContext_JanparaCrawlSettingExcludeKeyword_keyword(ctx, field)
			case "createdAt":
				return ec.fieldContext_JanparaCrawlSettingExcludeKeyword_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_JanparaCrawlSettingExcludeKeyword_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JanparaCrawlSettingExcludeKeyword", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateJanparaCrawlSettingExcludeKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.CreateJanparaCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateJanparaCrawlSettingExcludeKeywordResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateJanparaCrawlSettingExcludeKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateJanparaCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateJanparaCrawlSettingExcludeKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.CreateJanparaCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateJanparaCrawlSettingExcludeKeywordResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateJanparaCrawlSettingExcludeKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateJanparaCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateJanparaCrawlSettingExcludeKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.CreateJanparaCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateJanparaCrawlSettingExcludeKeywordResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateJanparaCrawlSettingExcludeKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateJanparaCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateJanparaCrawlSettingExcludeProductResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.CreateJanparaCrawlSettingExcludeProductResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateJanparaCrawlSettingExcludeProductResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateJanparaCrawlSettingExcludeProductResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateJanparaCrawlSettingExcludeProductResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateJanparaCrawlSettingExcludeProductResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.CreateJanparaCrawlSettingExcludeProductResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateJanparaCrawlSettingExcludeProductResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CreateJanparaCrawlSettingExcludeProductResultErrors)
	fc.Result = res
	return ec.marshalNCreateJanparaCrawlSettingExcludeProductResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateJanparaCrawlSettingExcludeProductResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateJanparaCrawlSettingExcludeProductResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateJanparaCrawlSettingExcludeProductResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CreateJanparaCrawlSettingExcludeProductResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateJanparaCrawlSettingExcludeProductResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.CreateJanparaCrawlSettingExcludeProductResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateJanparaCrawlSettingExcludeProductResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateJanparaCrawlSettingExcludeProductResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateJanparaCrawlSettingExcludeProductResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateJanparaCrawlSettingExcludeProductResultSuccess_janparaCrawlSettingExcludeProduct(ctx context.Context, field graphql.CollectedField, obj *model.CreateJanparaCrawlSettingExcludeProductResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateJanparaCrawlSettingExcludeProductResultSuccess_janparaCrawlSettingExcludeProduct(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JanparaCrawlSettingExcludeProduct, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.JanparaCrawlSettingExcludeProduct)
	fc.Result = res
	return ec.marshalNJanparaCrawlSettingExcludeProduct2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐJanparaCrawlSettingExcludeProduct(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateJanparaCrawlSettingExcludeProductResultSuccess_janparaCrawlSettingExcludeProduct(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateJanparaCrawlSettingExcludeProductResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_JanparaCrawlSettingExcludeProduct_id(ctx, field)
			case "janparaCrawlSettingId":
				return ec.fieldContext_JanparaCrawlSettingExcludeProduct_janparaCrawlSettingId(ctx, field)
			case "externalId":
				return ec.fieldContext_JanparaCrawlSettingExcludeProduct_externalId(ctx, field)
			case "createdAt":
				return ec.fieldContext_JanparaCrawlSettingExcludeProduct_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_JanparaCrawlSettingExcludeProduct_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JanparaCrawlSettingExcludeProduct", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateJanparaCrawlSettingExcludeProductResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.CreateJanparaCrawlSettingExcludeProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateJanparaCrawlSettingExcludeProductResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateJanparaCrawlSettingExcludeProductResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateJanparaCrawlSettingExcludeProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateJanparaCrawlSettingExcludeProductResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.CreateJanparaCrawlSettingExcludeProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateJanparaCrawlSettingExcludeProductResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateJanparaCrawlSettingExcludeProductResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateJanparaCrawlSettingExcludeProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateJanparaCrawlSettingExcludeProductResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.CreateJanparaCrawlSettingExcludeProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateJanparaCrawlSettingExcludeProductResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateJanparaCrawlSettingExcludeProductResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateJanparaCrawlSettingExcludeProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateJanparaCrawlSettingRequiredKeywordResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.CreateJanparaCrawlSettingRequiredKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateJanparaCrawlSettingRequiredKeywordResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateJanparaCrawlSettingRequiredKeywordResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateJanparaCrawlSettingRequiredKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateJanparaCrawlSettingRequiredKeywordResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.CreateJanparaCrawlSettingRequiredKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateJanparaCrawlSettingRequiredKeywordResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CreateJanparaCrawlSettingRequiredKeywordResultErrors)
	fc.Result = res
	return ec.marshalNCreateJanparaCrawlSettingRequiredKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateJanparaCrawlSettingRequiredKeywordResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateJanparaCrawlSettingRequiredKeywordResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateJanparaCrawlSettingRequiredKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CreateJanparaCrawlSettingRequiredKeywordResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateJanparaCrawlSettingRequiredKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.CreateJanparaCrawlSettingRequiredKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateJanparaCrawlSettingRequiredKeywordResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateJanparaCrawlSettingRequiredKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateJanparaCrawlSettingRequiredKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateJanparaCrawlSettingRequiredKeywordResultSuccess_janparaCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField, obj *model.CreateJanparaCrawlSettingRequiredKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateJanparaCrawlSettingRequiredKeywordResultSuccess_janparaCrawlSettingRequiredKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JanparaCrawlSettingRequiredKeyword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.JanparaCrawlSettingRequiredKeyword)
	fc.Result = res
	return ec.marshalNJanparaCrawlSettingRequiredKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐJanparaCrawlSettingRequiredKeyword(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateJanparaCrawlSettingRequiredKeywordResultSuccess_janparaCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateJanparaCrawlSettingRequiredKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_JanparaCrawlSettingRequiredKeyword_id(ctx, field)
			case "janparaCrawlSettingId":
				return ec.fieldContext_JanparaCrawlSettingRequiredKeyword_janparaCrawlSettingId(ctx, field)
			case "keyword":
				return ec.fieldContext_JanparaCrawlSettingRequiredKeyword_keyword(ctx, field)
			case "createdAt":
				return ec.fieldContext_JanparaCrawlSettingRequiredKeyword_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_JanparaCrawlSettingRequiredKeyword_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JanparaCrawlSettingRequiredKeyword", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateJanparaCrawlSettingRequiredKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.CreateJanparaCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateJanparaCrawlSettingRequiredKeywordResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateJanparaCrawlSettingRequiredKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateJanparaCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateJanparaCrawlSettingRequiredKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.CreateJanparaCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateJanparaCrawlSettingRequiredKeywordResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateJanparaCrawlSettingRequiredKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateJanparaCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateJanparaCrawlSettingRequiredKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.CreateJanparaCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateJanparaCrawlSettingRequiredKeywordResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateJanparaCrawlSettingRequiredKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateJanparaCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateMercariCrawlSettingExcludeKeywordResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.CreateMercariCrawlSettingExcludeKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateMercariCrawlSettingExcludeKeywordResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateMercariCrawlSettingExcludeKeywordResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateMercariCrawlSettingExcludeKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateMercariCrawlSettingExcludeKeywordResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.CreateMercariCrawlSettingExcludeKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateMercariCrawlSettingExcludeKeywordResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CreateMercariCrawlSettingExcludeKeywordResultErrors)
	fc.Result = res
	return ec.marshalNCreateMercariCrawlSettingExcludeKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateMercariCrawlSettingExcludeKeywordResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateMercariCrawlSettingExcludeKeywordResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateMercariCrawlSettingExcludeKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CreateMercariCrawlSettingExcludeKeywordResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateMercariCrawlSettingExcludeKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.CreateMercariCrawlSettingExcludeKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateMercariCrawlSettingExcludeKeywordResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateMercariCrawlSettingExcludeKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateMercariCrawlSettingExcludeKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateMercariCrawlSettingExcludeKeywordResultSuccess_mercariCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField, obj *model.CreateMercariCrawlSettingExcludeKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateMercariCrawlSettingExcludeKeywordResultSuccess_mercariCrawlSettingExcludeKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MercariCrawlSettingExcludeKeyword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MercariCrawlSettingExcludeKeyword)
	fc.Result = res
	return ec.marshalNMercariCrawlSettingExcludeKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariCrawlSettingExcludeKeyword(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateMercariCrawlSettingExcludeKeywordResultSuccess_mercariCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateMercariCrawlSettingExcludeKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MercariCrawlSettingExcludeKeyword_id(ctx, field)
			case "mercariCrawlSettingId":
				return ec.fieldContext_MercariCrawlSettingExcludeKeyword_mercariCrawlSettingId(ctx, field)
			case "keyword":
				return ec.fieldContext_MercariCrawlSettingExcludeKeyword_keyword(ctx, field)
			case "createdAt":
				return ec.fieldContext_MercariCrawlSettingExcludeKeyword_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MercariCrawlSettingExcludeKeyword_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MercariCrawlSettingExcludeKeyword", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateMercariCrawlSettingExcludeKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.CreateMercariCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateMercariCrawlSettingExcludeKeywordResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateMercariCrawlSettingExcludeKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateMercariCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateMercariCrawlSettingExcludeKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.CreateMercariCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateMercariCrawlSettingExcludeKeywordResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateMercariCrawlSettingExcludeKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateMercariCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateMercariCrawlSettingExcludeKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.CreateMercariCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateMercariCrawlSettingExcludeKeywordResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateMercariCrawlSettingExcludeKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateMercariCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateMercariCrawlSettingExcludeProductResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.CreateMercariCrawlSettingExcludeProductResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateMercariCrawlSettingExcludeProductResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateMercariCrawlSettingExcludeProductResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateMercariCrawlSettingExcludeProductResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateMercariCrawlSettingExcludeProductResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.CreateMercariCrawlSettingExcludeProductResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateMercariCrawlSettingExcludeProductResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CreateMercariCrawlSettingExcludeProductResultErrors)
	fc.Result = res
	return ec.marshalNCreateMercariCrawlSettingExcludeProductResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateMercariCrawlSettingExcludeProductResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateMercariCrawlSettingExcludeProductResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateMercariCrawlSettingExcludeProductResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CreateMercariCrawlSettingExcludeProductResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateMercariCrawlSettingExcludeProductResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.CreateMercariCrawlSettingExcludeProductResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateMercariCrawlSettingExcludeProductResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateMercariCrawlSettingExcludeProductResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateMercariCrawlSettingExcludeProductResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateMercariCrawlSettingExcludeProductResultSuccess_mercariCrawlSettingExcludeProduct(ctx context.Context, field graphql.CollectedField, obj *model.CreateMercariCrawlSettingExcludeProductResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateMercariCrawlSettingExcludeProductResultSuccess_mercariCrawlSettingExcludeProduct(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MercariCrawlSettingExcludeProduct, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MercariCrawlSettingExcludeProduct)
	fc.Result = res
	return ec.marshalNMercariCrawlSettingExcludeProduct2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariCrawlSettingExcludeProduct(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateMercariCrawlSettingExcludeProductResultSuccess_mercariCrawlSettingExcludeProduct(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateMercariCrawlSettingExcludeProductResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MercariCrawlSettingExcludeProduct_id(ctx, field)
			case "mercariCrawlSettingId":
				return ec.fieldContext_MercariCrawlSettingExcludeProduct_mercariCrawlSettingId(ctx, field)
			case "externalId":
				return ec.fieldContext_MercariCrawlSettingExcludeProduct_externalId(ctx, field)
			case "createdAt":
				return ec.fieldContext_MercariCrawlSettingExcludeProduct_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MercariCrawlSettingExcludeProduct_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MercariCrawlSettingExcludeProduct", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateMercariCrawlSettingExcludeProductResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.CreateMercariCrawlSettingExcludeProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateMercariCrawlSettingExcludeProductResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateMercariCrawlSettingExcludeProductResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateMercariCrawlSettingExcludeProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateMercariCrawlSettingExcludeProductResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.CreateMercariCrawlSettingExcludeProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateMercariCrawlSettingExcludeProductResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateMercariCrawlSettingExcludeProductResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateMercariCrawlSettingExcludeProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateMercariCrawlSettingExcludeProductResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.CreateMercariCrawlSettingExcludeProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateMercariCrawlSettingExcludeProductResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateMercariCrawlSettingExcludeProductResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateMercariCrawlSettingExcludeProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateMercariCrawlSettingRequiredKeywordResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.CreateMercariCrawlSettingRequiredKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateMercariCrawlSettingRequiredKeywordResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateMercariCrawlSettingRequiredKeywordResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateMercariCrawlSettingRequiredKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateMercariCrawlSettingRequiredKeywordResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.CreateMercariCrawlSettingRequiredKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateMercariCrawlSettingRequiredKeywordResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CreateMercariCrawlSettingRequiredKeywordResultErrors)
	fc.Result = res
	return ec.marshalNCreateMercariCrawlSettingRequiredKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateMercariCrawlSettingRequiredKeywordResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateMercariCrawlSettingRequiredKeywordResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateMercariCrawlSettingRequiredKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CreateMercariCrawlSettingRequiredKeywordResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateMercariCrawlSettingRequiredKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.CreateMercariCrawlSettingRequiredKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateMercariCrawlSettingRequiredKeywordResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateMercariCrawlSettingRequiredKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateMercariCrawlSettingRequiredKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateMercariCrawlSettingRequiredKeywordResultSuccess_mercariCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField, obj *model.CreateMercariCrawlSettingRequiredKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateMercariCrawlSettingRequiredKeywordResultSuccess_mercariCrawlSettingRequiredKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MercariCrawlSettingRequiredKeyword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MercariCrawlSettingRequiredKeyword)
	fc.Result = res
	return ec.marshalNMercariCrawlSettingRequiredKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariCrawlSettingRequiredKeyword(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateMercariCrawlSettingRequiredKeywordResultSuccess_mercariCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateMercariCrawlSettingRequiredKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MercariCrawlSettingRequiredKeyword_id(ctx, field)
			case "mercariCrawlSettingId":
				return ec.fieldContext_MercariCrawlSettingRequiredKeyword_mercariCrawlSettingId(ctx, field)
			case "keyword":
				return ec.fieldContext_MercariCrawlSettingRequiredKeyword_keyword(ctx, field)
			case "createdAt":
				return ec.fieldContext_MercariCrawlSettingRequiredKeyword_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MercariCrawlSettingRequiredKeyword_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MercariCrawlSettingRequiredKeyword", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateMercariCrawlSettingRequiredKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.CreateMercariCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateMercariCrawlSettingRequiredKeywordResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateMercariCrawlSettingRequiredKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateMercariCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateMercariCrawlSettingRequiredKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.CreateMercariCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateMercariCrawlSettingRequiredKeywordResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateMercariCrawlSettingRequiredKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateMercariCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateMercariCrawlSettingRequiredKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.CreateMercariCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateMercariCrawlSettingRequiredKeywordResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateMercariCrawlSettingRequiredKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateMercariCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreatePcKoubouCrawlSettingExcludeKeywordResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.CreatePcKoubouCrawlSettingExcludeKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreatePcKoubouCrawlSettingExcludeKeywordResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreatePcKoubouCrawlSettingExcludeKeywordResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreatePcKoubouCrawlSettingExcludeKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreatePcKoubouCrawlSettingExcludeKeywordResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.CreatePcKoubouCrawlSettingExcludeKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreatePcKoubouCrawlSettingExcludeKeywordResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CreatePcKoubouCrawlSettingExcludeKeywordResultErrors)
	fc.Result = res
	return ec.marshalNCreatePcKoubouCrawlSettingExcludeKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreatePcKoubouCrawlSettingExcludeKeywordResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreatePcKoubouCrawlSettingExcludeKeywordResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreatePcKoubouCrawlSettingExcludeKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CreatePcKoubouCrawlSettingExcludeKeywordResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreatePcKoubouCrawlSettingExcludeKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.CreatePcKoubouCrawlSettingExcludeKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreatePcKoubouCrawlSettingExcludeKeywordResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreatePcKoubouCrawlSettingExcludeKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreatePcKoubouCrawlSettingExcludeKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreatePcKoubouCrawlSettingExcludeKeywordResultSuccess_pcKoubouCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField, obj *model.CreatePcKoubouCrawlSettingExcludeKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreatePcKoubouCrawlSettingExcludeKeywordResultSuccess_pcKoubouCrawlSettingExcludeKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PcKoubouCrawlSettingExcludeKeyword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PcKoubouCrawlSettingExcludeKeyword)
	fc.Result = res
	return ec.marshalNPcKoubouCrawlSettingExcludeKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐPcKoubouCrawlSettingExcludeKeyword(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreatePcKoubouCrawlSettingExcludeKeywordResultSuccess_pcKoubouCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreatePcKoubouCrawlSettingExcludeKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PcKoubouCrawlSettingExcludeKeyword_id(ctx, field)
			case "pcKoubouCrawlSettingId":
				return ec.fieldContext_PcKoubouCrawlSettingExcludeKeyword_pcKoubouCrawlSettingId(ctx, field)
			case "keyword":
				return ec.fieldContext_PcKoubouCrawlSettingExcludeKeyword_keyword(ctx, field)
			case "createdAt":
				return ec.fieldContext_PcKoubouCrawlSettingExcludeKeyword_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PcKoubouCrawlSettingExcludeKeyword_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PcKoubouCrawlSettingExcludeKeyword", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.CreatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.CreatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.CreatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreatePcKoubouCrawlSettingExcludeProductResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.CreatePcKoubouCrawlSettingExcludeProductResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreatePcKoubouCrawlSettingExcludeProductResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreatePcKoubouCrawlSettingExcludeProductResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreatePcKoubouCrawlSettingExcludeProductResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreatePcKoubouCrawlSettingExcludeProductResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.CreatePcKoubouCrawlSettingExcludeProductResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreatePcKoubouCrawlSettingExcludeProductResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CreatePcKoubouCrawlSettingExcludeProductResultErrors)
	fc.Result = res
	return ec.marshalNCreatePcKoubouCrawlSettingExcludeProductResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreatePcKoubouCrawlSettingExcludeProductResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreatePcKoubouCrawlSettingExcludeProductResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreatePcKoubouCrawlSettingExcludeProductResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CreatePcKoubouCrawlSettingExcludeProductResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreatePcKoubouCrawlSettingExcludeProductResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.CreatePcKoubouCrawlSettingExcludeProductResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreatePcKoubouCrawlSettingExcludeProductResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreatePcKoubouCrawlSettingExcludeProductResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreatePcKoubouCrawlSettingExcludeProductResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreatePcKoubouCrawlSettingExcludeProductResultSuccess_pcKoubouCrawlSettingExcludeProduct(ctx context.Context, field graphql.CollectedField, obj *model.CreatePcKoubouCrawlSettingExcludeProductResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreatePcKoubouCrawlSettingExcludeProductResultSuccess_pcKoubouCrawlSettingExcludeProduct(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PcKoubouCrawlSettingExcludeProduct, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PcKoubouCrawlSettingExcludeProduct)
	fc.Result = res
	return ec.marshalNPcKoubouCrawlSettingExcludeProduct2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐPcKoubouCrawlSettingExcludeProduct(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreatePcKoubouCrawlSettingExcludeProductResultSuccess_pcKoubouCrawlSettingExcludeProduct(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreatePcKoubouCrawlSettingExcludeProductResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PcKoubouCrawlSettingExcludeProduct_id(ctx, field)
			case "pcKoubouCrawlSettingId":
				return ec.fieldContext_PcKoubouCrawlSettingExcludeProduct_pcKoubouCrawlSettingId(ctx, field)
			case "externalId":
				return ec.fieldContext_PcKoubouCrawlSettingExcludeProduct_externalId(ctx, field)
			case "createdAt":
				return ec.fieldContext_PcKoubouCrawlSettingExcludeProduct_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PcKoubouCrawlSettingExcludeProduct_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PcKoubouCrawlSettingExcludeProduct", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreatePcKoubouCrawlSettingExcludeProductResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.CreatePcKoubouCrawlSettingExcludeProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreatePcKoubouCrawlSettingExcludeProductResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreatePcKoubouCrawlSettingExcludeProductResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreatePcKoubouCrawlSettingExcludeProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreatePcKoubouCrawlSettingExcludeProductResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.CreatePcKoubouCrawlSettingExcludeProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreatePcKoubouCrawlSettingExcludeProductResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreatePcKoubouCrawlSettingExcludeProductResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreatePcKoubouCrawlSettingExcludeProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreatePcKoubouCrawlSettingExcludeProductResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.CreatePcKoubouCrawlSettingExcludeProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreatePcKoubouCrawlSettingExcludeProductResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreatePcKoubouCrawlSettingExcludeProductResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreatePcKoubouCrawlSettingExcludeProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreatePcKoubouCrawlSettingRequiredKeywordResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.CreatePcKoubouCrawlSettingRequiredKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreatePcKoubouCrawlSettingRequiredKeywordResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreatePcKoubouCrawlSettingRequiredKeywordResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreatePcKoubouCrawlSettingRequiredKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreatePcKoubouCrawlSettingRequiredKeywordResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.CreatePcKoubouCrawlSettingRequiredKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreatePcKoubouCrawlSettingRequiredKeywordResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CreatePcKoubouCrawlSettingRequiredKeywordResultErrors)
	fc.Result = res
	return ec.marshalNCreatePcKoubouCrawlSettingRequiredKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreatePcKoubouCrawlSettingRequiredKeywordResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreatePcKoubouCrawlSettingRequiredKeywordResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreatePcKoubouCrawlSettingRequiredKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CreatePcKoubouCrawlSettingRequiredKeywordResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreatePcKoubouCrawlSettingRequiredKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.CreatePcKoubouCrawlSettingRequiredKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreatePcKoubouCrawlSettingRequiredKeywordResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreatePcKoubouCrawlSettingRequiredKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreatePcKoubouCrawlSettingRequiredKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreatePcKoubouCrawlSettingRequiredKeywordResultSuccess_pcKoubouCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField, obj *model.CreatePcKoubouCrawlSettingRequiredKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreatePcKoubouCrawlSettingRequiredKeywordResultSuccess_pcKoubouCrawlSettingRequiredKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PcKoubouCrawlSettingRequiredKeyword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PcKoubouCrawlSettingRequiredKeyword)
	fc.Result = res
	return ec.marshalNPcKoubouCrawlSettingRequiredKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐPcKoubouCrawlSettingRequiredKeyword(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreatePcKoubouCrawlSettingRequiredKeywordResultSuccess_pcKoubouCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreatePcKoubouCrawlSettingRequiredKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PcKoubouCrawlSettingRequiredKeyword_id(ctx, field)
			case "pcKoubouCrawlSettingId":
				return ec.fieldContext_PcKoubouCrawlSettingRequiredKeyword_pcKoubouCrawlSettingId(ctx, field)
			case "keyword":
				return ec.fieldContext_PcKoubouCrawlSettingRequiredKeyword_keyword(ctx, field)
			case "createdAt":
				return ec.fieldContext_PcKoubouCrawlSettingRequiredKeyword_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PcKoubouCrawlSettingRequiredKeyword_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PcKoubouCrawlSettingRequiredKeyword", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.CreatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.CreatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.CreatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateProductResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.CreateProductResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateProductResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateProductResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateProductResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateProductResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.CreateProductResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateProductResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CreateProductResultErrors)
	fc.Result = res
	return ec.marshalNCreateProductResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateProductResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateProductResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateProductResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CreateProductResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateProductResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.CreateProductResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateProductResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateProductResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateProductResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateProductResultSuccess_product(ctx context.Context, field graphql.CollectedField, obj *model.CreateProductResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateProductResultSuccess_product(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Product, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Product)
	fc.Result = res
	return ec.marshalNProduct2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐProduct(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateProductResultSuccess_product(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateProductResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Product_id(ctx, field)
			case "name":
				return ec.fieldContext_Product_name(ctx, field)
			case "yahooAuctionProducts":
				return ec.fieldContext_Product_yahooAuctionProducts(ctx, field)
			case "yahooAuctionCrawlSetting":
				return ec.fieldContext_Product_yahooAuctionCrawlSetting(ctx, field)
			case "yahooAuctionDailyPurchaseSummaries":
				return ec.fieldContext_Product_yahooAuctionDailyPurchaseSummaries(ctx, field)
			case "yahooFleamarketDailyPurchaseSummaries":
				return ec.fieldContext_Product_yahooFleamarketDailyPurchaseSummaries(ctx, field)
			case "mercariProducts":
				return ec.fieldContext_Product_mercariProducts(ctx, field)
			case "mercariCrawlSetting":
				return ec.fieldContext_Product_mercariCrawlSetting(ctx, field)
			case "mercariDailyPurchaseSummaries":
				return ec.fieldContext_Product_mercariDailyPurchaseSummaries(ctx, field)
			case "janparaCrawlSetting":
				return ec.fieldContext_Product_janparaCrawlSetting(ctx, field)
			case "iosysCrawlSetting":
				return ec.fieldContext_Product_iosysCrawlSetting(ctx, field)
			case "pcKoubouCrawlSetting":
				return ec.fieldContext_Product_pcKoubouCrawlSetting(ctx, field)
			case "relatedProducts":
				return ec.fieldContext_Product_relatedProducts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Product", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateProductResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.CreateProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateProductResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateProductResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateProductResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.CreateProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateProductResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateProductResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateProductResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.CreateProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateProductResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateProductResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingExcludeKeywordResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.CreateYahooAuctionCrawlSettingExcludeKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateYahooAuctionCrawlSettingExcludeKeywordResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateYahooAuctionCrawlSettingExcludeKeywordResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateYahooAuctionCrawlSettingExcludeKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingExcludeKeywordResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.CreateYahooAuctionCrawlSettingExcludeKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateYahooAuctionCrawlSettingExcludeKeywordResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CreateYahooAuctionCrawlSettingExcludeKeywordResultErrors)
	fc.Result = res
	return ec.marshalNCreateYahooAuctionCrawlSettingExcludeKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateYahooAuctionCrawlSettingExcludeKeywordResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateYahooAuctionCrawlSettingExcludeKeywordResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateYahooAuctionCrawlSettingExcludeKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CreateYahooAuctionCrawlSettingExcludeKeywordResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess_yahooAuctionCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField, obj *model.CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess_yahooAuctionCrawlSettingExcludeKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YahooAuctionCrawlSettingExcludeKeyword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.YahooAuctionCrawlSettingExcludeKeyword)
	fc.Result = res
	return ec.marshalNYahooAuctionCrawlSettingExcludeKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionCrawlSettingExcludeKeyword(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess_yahooAuctionCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_YahooAuctionCrawlSettingExcludeKeyword_id(ctx, field)
			case "yahooAuctionCrawlSettingId":
				return ec.fieldContext_YahooAuctionCrawlSettingExcludeKeyword_yahooAuctionCrawlSettingId(ctx, field)
			case "keyword":
				return ec.fieldContext_YahooAuctionCrawlSettingExcludeKeyword_keyword(ctx, field)
			case "createdAt":
				return ec.fieldContext_YahooAuctionCrawlSettingExcludeKeyword_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_YahooAuctionCrawlSettingExcludeKeyword_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type YahooAuctionCrawlSettingExcludeKeyword", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingExcludeProductResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.CreateYahooAuctionCrawlSettingExcludeProductResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateYahooAuctionCrawlSettingExcludeProductResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateYahooAuctionCrawlSettingExcludeProductResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateYahooAuctionCrawlSettingExcludeProductResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingExcludeProductResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.CreateYahooAuctionCrawlSettingExcludeProductResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateYahooAuctionCrawlSettingExcludeProductResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CreateYahooAuctionCrawlSettingExcludeProductResultErrors)
	fc.Result = res
	return ec.marshalNCreateYahooAuctionCrawlSettingExcludeProductResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateYahooAuctionCrawlSettingExcludeProductResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateYahooAuctionCrawlSettingExcludeProductResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateYahooAuctionCrawlSettingExcludeProductResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CreateYahooAuctionCrawlSettingExcludeProductResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingExcludeProductResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.CreateYahooAuctionCrawlSettingExcludeProductResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateYahooAuctionCrawlSettingExcludeProductResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateYahooAuctionCrawlSettingExcludeProductResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateYahooAuctionCrawlSettingExcludeProductResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingExcludeProductResultSuccess_yahooAuctionCrawlSettingExcludeProduct(ctx context.Context, field graphql.CollectedField, obj *model.CreateYahooAuctionCrawlSettingExcludeProductResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateYahooAuctionCrawlSettingExcludeProductResultSuccess_yahooAuctionCrawlSettingExcludeProduct(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YahooAuctionCrawlSettingExcludeProduct, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.YahooAuctionCrawlSettingExcludeProduct)
	fc.Result = res
	return ec.marshalNYahooAuctionCrawlSettingExcludeProduct2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionCrawlSettingExcludeProduct(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateYahooAuctionCrawlSettingExcludeProductResultSuccess_yahooAuctionCrawlSettingExcludeProduct(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateYahooAuctionCrawlSettingExcludeProductResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_YahooAuctionCrawlSettingExcludeProduct_id(ctx, field)
			case "yahooAuctionCrawlSettingId":
				return ec.fieldContext_YahooAuctionCrawlSettingExcludeProduct_yahooAuctionCrawlSettingId(ctx, field)
			case "externalId":
				return ec.fieldContext_YahooAuctionCrawlSettingExcludeProduct_externalId(ctx, field)
			case "createdAt":
				return ec.fieldContext_YahooAuctionCrawlSettingExcludeProduct_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_YahooAuctionCrawlSettingExcludeProduct_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type YahooAuctionCrawlSettingExcludeProduct", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingExcludeProductResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.CreateYahooAuctionCrawlSettingExcludeProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateYahooAuctionCrawlSettingExcludeProductResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateYahooAuctionCrawlSettingExcludeProductResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateYahooAuctionCrawlSettingExcludeProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingExcludeProductResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.CreateYahooAuctionCrawlSettingExcludeProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateYahooAuctionCrawlSettingExcludeProductResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateYahooAuctionCrawlSettingExcludeProductResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateYahooAuctionCrawlSettingExcludeProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingExcludeProductResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.CreateYahooAuctionCrawlSettingExcludeProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateYahooAuctionCrawlSettingExcludeProductResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateYahooAuctionCrawlSettingExcludeProductResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateYahooAuctionCrawlSettingExcludeProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingRequiredKeywordResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.CreateYahooAuctionCrawlSettingRequiredKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateYahooAuctionCrawlSettingRequiredKeywordResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateYahooAuctionCrawlSettingRequiredKeywordResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateYahooAuctionCrawlSettingRequiredKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingRequiredKeywordResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.CreateYahooAuctionCrawlSettingRequiredKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateYahooAuctionCrawlSettingRequiredKeywordResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CreateYahooAuctionCrawlSettingRequiredKeywordResultErrors)
	fc.Result = res
	return ec.marshalNCreateYahooAuctionCrawlSettingRequiredKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateYahooAuctionCrawlSettingRequiredKeywordResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateYahooAuctionCrawlSettingRequiredKeywordResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateYahooAuctionCrawlSettingRequiredKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CreateYahooAuctionCrawlSettingRequiredKeywordResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess_yahooAuctionCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField, obj *model.CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess_yahooAuctionCrawlSettingRequiredKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YahooAuctionCrawlSettingRequiredKeyword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.YahooAuctionCrawlSettingRequiredKeyword)
	fc.Result = res
	return ec.marshalNYahooAuctionCrawlSettingRequiredKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionCrawlSettingRequiredKeyword(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess_yahooAuctionCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_YahooAuctionCrawlSettingRequiredKeyword_id(ctx, field)
			case "yahooAuctionCrawlSettingId":
				return ec.fieldContext_YahooAuctionCrawlSettingRequiredKeyword_yahooAuctionCrawlSettingId(ctx, field)
			case "keyword":
				return ec.fieldContext_YahooAuctionCrawlSettingRequiredKeyword_keyword(ctx, field)
			case "createdAt":
				return ec.fieldContext_YahooAuctionCrawlSettingRequiredKeyword_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_YahooAuctionCrawlSettingRequiredKeyword_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type YahooAuctionCrawlSettingRequiredKeyword", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteIosysCrawlSettingExcludeKeywordResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.DeleteIosysCrawlSettingExcludeKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteIosysCrawlSettingExcludeKeywordResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteIosysCrawlSettingExcludeKeywordResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteIosysCrawlSettingExcludeKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteIosysCrawlSettingExcludeKeywordResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.DeleteIosysCrawlSettingExcludeKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteIosysCrawlSettingExcludeKeywordResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DeleteIosysCrawlSettingExcludeKeywordResultErrors)
	fc.Result = res
	return ec.marshalNDeleteIosysCrawlSettingExcludeKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteIosysCrawlSettingExcludeKeywordResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteIosysCrawlSettingExcludeKeywordResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteIosysCrawlSettingExcludeKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeleteIosysCrawlSettingExcludeKeywordResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteIosysCrawlSettingExcludeKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.DeleteIosysCrawlSettingExcludeKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteIosysCrawlSettingExcludeKeywordResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteIosysCrawlSettingExcludeKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteIosysCrawlSettingExcludeKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteIosysCrawlSettingExcludeKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.DeleteIosysCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteIosysCrawlSettingExcludeKeywordResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteIosysCrawlSettingExcludeKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteIosysCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteIosysCrawlSettingExcludeKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.DeleteIosysCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteIosysCrawlSettingExcludeKeywordResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteIosysCrawlSettingExcludeKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteIosysCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteIosysCrawlSettingExcludeKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.DeleteIosysCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteIosysCrawlSettingExcludeKeywordResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteIosysCrawlSettingExcludeKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteIosysCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteIosysCrawlSettingExcludeProductResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.DeleteIosysCrawlSettingExcludeProductResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteIosysCrawlSettingExcludeProductResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteIosysCrawlSettingExcludeProductResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteIosysCrawlSettingExcludeProductResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteIosysCrawlSettingExcludeProductResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.DeleteIosysCrawlSettingExcludeProductResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteIosysCrawlSettingExcludeProductResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DeleteIosysCrawlSettingExcludeProductResultErrors)
	fc.Result = res
	return ec.marshalNDeleteIosysCrawlSettingExcludeProductResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteIosysCrawlSettingExcludeProductResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteIosysCrawlSettingExcludeProductResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteIosysCrawlSettingExcludeProductResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeleteIosysCrawlSettingExcludeProductResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteIosysCrawlSettingExcludeProductResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.DeleteIosysCrawlSettingExcludeProductResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteIosysCrawlSettingExcludeProductResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteIosysCrawlSettingExcludeProductResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteIosysCrawlSettingExcludeProductResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteIosysCrawlSettingExcludeProductResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.DeleteIosysCrawlSettingExcludeProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteIosysCrawlSettingExcludeProductResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteIosysCrawlSettingExcludeProductResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteIosysCrawlSettingExcludeProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteIosysCrawlSettingExcludeProductResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.DeleteIosysCrawlSettingExcludeProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteIosysCrawlSettingExcludeProductResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteIosysCrawlSettingExcludeProductResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteIosysCrawlSettingExcludeProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteIosysCrawlSettingExcludeProductResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.DeleteIosysCrawlSettingExcludeProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteIosysCrawlSettingExcludeProductResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteIosysCrawlSettingExcludeProductResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteIosysCrawlSettingExcludeProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteIosysCrawlSettingRequiredKeywordResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.DeleteIosysCrawlSettingRequiredKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteIosysCrawlSettingRequiredKeywordResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteIosysCrawlSettingRequiredKeywordResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteIosysCrawlSettingRequiredKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteIosysCrawlSettingRequiredKeywordResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.DeleteIosysCrawlSettingRequiredKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteIosysCrawlSettingRequiredKeywordResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DeleteIosysCrawlSettingRequiredKeywordResultErrors)
	fc.Result = res
	return ec.marshalNDeleteIosysCrawlSettingRequiredKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteIosysCrawlSettingRequiredKeywordResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteIosysCrawlSettingRequiredKeywordResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteIosysCrawlSettingRequiredKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeleteIosysCrawlSettingRequiredKeywordResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteIosysCrawlSettingRequiredKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.DeleteIosysCrawlSettingRequiredKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteIosysCrawlSettingRequiredKeywordResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteIosysCrawlSettingRequiredKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteIosysCrawlSettingRequiredKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteIosysCrawlSettingRequiredKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.DeleteIosysCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteIosysCrawlSettingRequiredKeywordResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteIosysCrawlSettingRequiredKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteIosysCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteIosysCrawlSettingRequiredKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.DeleteIosysCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteIosysCrawlSettingRequiredKeywordResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteIosysCrawlSettingRequiredKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteIosysCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteIosysCrawlSettingRequiredKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.DeleteIosysCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteIosysCrawlSettingRequiredKeywordResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteIosysCrawlSettingRequiredKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteIosysCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteJanparaCrawlSettingExcludeKeywordResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.DeleteJanparaCrawlSettingExcludeKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteJanparaCrawlSettingExcludeKeywordResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteJanparaCrawlSettingExcludeKeywordResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteJanparaCrawlSettingExcludeKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteJanparaCrawlSettingExcludeKeywordResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.DeleteJanparaCrawlSettingExcludeKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteJanparaCrawlSettingExcludeKeywordResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DeleteJanparaCrawlSettingExcludeKeywordResultErrors)
	fc.Result = res
	return ec.marshalNDeleteJanparaCrawlSettingExcludeKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteJanparaCrawlSettingExcludeKeywordResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteJanparaCrawlSettingExcludeKeywordResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteJanparaCrawlSettingExcludeKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeleteJanparaCrawlSettingExcludeKeywordResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteJanparaCrawlSettingExcludeKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.DeleteJanparaCrawlSettingExcludeKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteJanparaCrawlSettingExcludeKeywordResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteJanparaCrawlSettingExcludeKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteJanparaCrawlSettingExcludeKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteJanparaCrawlSettingExcludeKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.DeleteJanparaCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteJanparaCrawlSettingExcludeKeywordResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteJanparaCrawlSettingExcludeKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteJanparaCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteJanparaCrawlSettingExcludeKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.DeleteJanparaCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteJanparaCrawlSettingExcludeKeywordResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteJanparaCrawlSettingExcludeKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteJanparaCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteJanparaCrawlSettingExcludeKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.DeleteJanparaCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteJanparaCrawlSettingExcludeKeywordResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteJanparaCrawlSettingExcludeKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteJanparaCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteJanparaCrawlSettingExcludeProductResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.DeleteJanparaCrawlSettingExcludeProductResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteJanparaCrawlSettingExcludeProductResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteJanparaCrawlSettingExcludeProductResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteJanparaCrawlSettingExcludeProductResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteJanparaCrawlSettingExcludeProductResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.DeleteJanparaCrawlSettingExcludeProductResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteJanparaCrawlSettingExcludeProductResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DeleteJanparaCrawlSettingExcludeProductResultErrors)
	fc.Result = res
	return ec.marshalNDeleteJanparaCrawlSettingExcludeProductResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteJanparaCrawlSettingExcludeProductResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteJanparaCrawlSettingExcludeProductResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteJanparaCrawlSettingExcludeProductResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeleteJanparaCrawlSettingExcludeProductResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteJanparaCrawlSettingExcludeProductResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.DeleteJanparaCrawlSettingExcludeProductResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteJanparaCrawlSettingExcludeProductResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteJanparaCrawlSettingExcludeProductResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteJanparaCrawlSettingExcludeProductResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteJanparaCrawlSettingExcludeProductResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.DeleteJanparaCrawlSettingExcludeProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteJanparaCrawlSettingExcludeProductResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteJanparaCrawlSettingExcludeProductResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteJanparaCrawlSettingExcludeProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteJanparaCrawlSettingExcludeProductResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.DeleteJanparaCrawlSettingExcludeProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteJanparaCrawlSettingExcludeProductResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteJanparaCrawlSettingExcludeProductResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteJanparaCrawlSettingExcludeProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteJanparaCrawlSettingExcludeProductResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.DeleteJanparaCrawlSettingExcludeProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteJanparaCrawlSettingExcludeProductResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteJanparaCrawlSettingExcludeProductResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteJanparaCrawlSettingExcludeProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteJanparaCrawlSettingRequiredKeywordResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.DeleteJanparaCrawlSettingRequiredKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteJanparaCrawlSettingRequiredKeywordResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteJanparaCrawlSettingRequiredKeywordResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteJanparaCrawlSettingRequiredKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteJanparaCrawlSettingRequiredKeywordResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.DeleteJanparaCrawlSettingRequiredKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteJanparaCrawlSettingRequiredKeywordResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DeleteJanparaCrawlSettingRequiredKeywordResultErrors)
	fc.Result = res
	return ec.marshalNDeleteJanparaCrawlSettingRequiredKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteJanparaCrawlSettingRequiredKeywordResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteJanparaCrawlSettingRequiredKeywordResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteJanparaCrawlSettingRequiredKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeleteJanparaCrawlSettingRequiredKeywordResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteJanparaCrawlSettingRequiredKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.DeleteJanparaCrawlSettingRequiredKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteJanparaCrawlSettingRequiredKeywordResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteJanparaCrawlSettingRequiredKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteJanparaCrawlSettingRequiredKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteJanparaCrawlSettingRequiredKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.DeleteJanparaCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteJanparaCrawlSettingRequiredKeywordResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteJanparaCrawlSettingRequiredKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteJanparaCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteJanparaCrawlSettingRequiredKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.DeleteJanparaCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteJanparaCrawlSettingRequiredKeywordResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteJanparaCrawlSettingRequiredKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteJanparaCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteJanparaCrawlSettingRequiredKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.DeleteJanparaCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteJanparaCrawlSettingRequiredKeywordResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteJanparaCrawlSettingRequiredKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteJanparaCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteMercariCrawlSettingExcludeKeywordResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.DeleteMercariCrawlSettingExcludeKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteMercariCrawlSettingExcludeKeywordResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteMercariCrawlSettingExcludeKeywordResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteMercariCrawlSettingExcludeKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteMercariCrawlSettingExcludeKeywordResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.DeleteMercariCrawlSettingExcludeKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteMercariCrawlSettingExcludeKeywordResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DeleteMercariCrawlSettingExcludeKeywordResultErrors)
	fc.Result = res
	return ec.marshalNDeleteMercariCrawlSettingExcludeKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteMercariCrawlSettingExcludeKeywordResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteMercariCrawlSettingExcludeKeywordResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteMercariCrawlSettingExcludeKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeleteMercariCrawlSettingExcludeKeywordResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteMercariCrawlSettingExcludeKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.DeleteMercariCrawlSettingExcludeKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteMercariCrawlSettingExcludeKeywordResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteMercariCrawlSettingExcludeKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteMercariCrawlSettingExcludeKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteMercariCrawlSettingExcludeProductResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.DeleteMercariCrawlSettingExcludeProductResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteMercariCrawlSettingExcludeProductResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteMercariCrawlSettingExcludeProductResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteMercariCrawlSettingExcludeProductResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteMercariCrawlSettingExcludeProductResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.DeleteMercariCrawlSettingExcludeProductResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteMercariCrawlSettingExcludeProductResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DeleteMercariCrawlSettingExcludeProductResultErrors)
	fc.Result = res
	return ec.marshalNDeleteMercariCrawlSettingExcludeProductResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteMercariCrawlSettingExcludeProductResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteMercariCrawlSettingExcludeProductResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteMercariCrawlSettingExcludeProductResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeleteMercariCrawlSettingExcludeProductResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteMercariCrawlSettingExcludeProductResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.DeleteMercariCrawlSettingExcludeProductResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteMercariCrawlSettingExcludeProductResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteMercariCrawlSettingExcludeProductResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteMercariCrawlSettingExcludeProductResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteMercariCrawlSettingExcludeProductResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.DeleteMercariCrawlSettingExcludeProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteMercariCrawlSettingExcludeProductResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteMercariCrawlSettingExcludeProductResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteMercariCrawlSettingExcludeProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteMercariCrawlSettingExcludeProductResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.DeleteMercariCrawlSettingExcludeProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteMercariCrawlSettingExcludeProductResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteMercariCrawlSettingExcludeProductResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteMercariCrawlSettingExcludeProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteMercariCrawlSettingExcludeProductResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.DeleteMercariCrawlSettingExcludeProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteMercariCrawlSettingExcludeProductResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteMercariCrawlSettingExcludeProductResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteMercariCrawlSettingExcludeProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteMercariCrawlSettingRequiredKeywordResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.DeleteMercariCrawlSettingRequiredKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteMercariCrawlSettingRequiredKeywordResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteMercariCrawlSettingRequiredKeywordResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteMercariCrawlSettingRequiredKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteMercariCrawlSettingRequiredKeywordResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.DeleteMercariCrawlSettingRequiredKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteMercariCrawlSettingRequiredKeywordResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DeleteMercariCrawlSettingRequiredKeywordResultErrors)
	fc.Result = res
	return ec.marshalNDeleteMercariCrawlSettingRequiredKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteMercariCrawlSettingRequiredKeywordResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteMercariCrawlSettingRequiredKeywordResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteMercariCrawlSettingRequiredKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeleteMercariCrawlSettingRequiredKeywordResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteMercariCrawlSettingRequiredKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.DeleteMercariCrawlSettingRequiredKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteMercariCrawlSettingRequiredKeywordResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteMercariCrawlSettingRequiredKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteMercariCrawlSettingRequiredKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeletePcKoubouCrawlSettingExcludeKeywordResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.DeletePcKoubouCrawlSettingExcludeKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeletePcKoubouCrawlSettingExcludeKeywordResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeletePcKoubouCrawlSettingExcludeKeywordResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeletePcKoubouCrawlSettingExcludeKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeletePcKoubouCrawlSettingExcludeKeywordResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.DeletePcKoubouCrawlSettingExcludeKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeletePcKoubouCrawlSettingExcludeKeywordResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DeletePcKoubouCrawlSettingExcludeKeywordResultErrors)
	fc.Result = res
	return ec.marshalNDeletePcKoubouCrawlSettingExcludeKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeletePcKoubouCrawlSettingExcludeKeywordResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeletePcKoubouCrawlSettingExcludeKeywordResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeletePcKoubouCrawlSettingExcludeKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeletePcKoubouCrawlSettingExcludeKeywordResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeletePcKoubouCrawlSettingExcludeKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.DeletePcKoubouCrawlSettingExcludeKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeletePcKoubouCrawlSettingExcludeKeywordResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeletePcKoubouCrawlSettingExcludeKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeletePcKoubouCrawlSettingExcludeKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeletePcKoubouCrawlSettingExcludeKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.DeletePcKoubouCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeletePcKoubouCrawlSettingExcludeKeywordResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeletePcKoubouCrawlSettingExcludeKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeletePcKoubouCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeletePcKoubouCrawlSettingExcludeKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.DeletePcKoubouCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeletePcKoubouCrawlSettingExcludeKeywordResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeletePcKoubouCrawlSettingExcludeKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeletePcKoubouCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeletePcKoubouCrawlSettingExcludeKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.DeletePcKoubouCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeletePcKoubouCrawlSettingExcludeKeywordResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeletePcKoubouCrawlSettingExcludeKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeletePcKoubouCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeletePcKoubouCrawlSettingExcludeProductResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.DeletePcKoubouCrawlSettingExcludeProductResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeletePcKoubouCrawlSettingExcludeProductResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeletePcKoubouCrawlSettingExcludeProductResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeletePcKoubouCrawlSettingExcludeProductResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeletePcKoubouCrawlSettingExcludeProductResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.DeletePcKoubouCrawlSettingExcludeProductResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeletePcKoubouCrawlSettingExcludeProductResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DeletePcKoubouCrawlSettingExcludeProductResultErrors)
	fc.Result = res
	return ec.marshalNDeletePcKoubouCrawlSettingExcludeProductResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeletePcKoubouCrawlSettingExcludeProductResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeletePcKoubouCrawlSettingExcludeProductResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeletePcKoubouCrawlSettingExcludeProductResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeletePcKoubouCrawlSettingExcludeProductResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeletePcKoubouCrawlSettingExcludeProductResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.DeletePcKoubouCrawlSettingExcludeProductResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeletePcKoubouCrawlSettingExcludeProductResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeletePcKoubouCrawlSettingExcludeProductResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeletePcKoubouCrawlSettingExcludeProductResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeletePcKoubouCrawlSettingExcludeProductResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.DeletePcKoubouCrawlSettingExcludeProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeletePcKoubouCrawlSettingExcludeProductResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeletePcKoubouCrawlSettingExcludeProductResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeletePcKoubouCrawlSettingExcludeProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeletePcKoubouCrawlSettingExcludeProductResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.DeletePcKoubouCrawlSettingExcludeProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeletePcKoubouCrawlSettingExcludeProductResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeletePcKoubouCrawlSettingExcludeProductResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeletePcKoubouCrawlSettingExcludeProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeletePcKoubouCrawlSettingExcludeProductResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.DeletePcKoubouCrawlSettingExcludeProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeletePcKoubouCrawlSettingExcludeProductResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeletePcKoubouCrawlSettingExcludeProductResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeletePcKoubouCrawlSettingExcludeProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeletePcKoubouCrawlSettingRequiredKeywordResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.DeletePcKoubouCrawlSettingRequiredKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeletePcKoubouCrawlSettingRequiredKeywordResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeletePcKoubouCrawlSettingRequiredKeywordResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeletePcKoubouCrawlSettingRequiredKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeletePcKoubouCrawlSettingRequiredKeywordResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.DeletePcKoubouCrawlSettingRequiredKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeletePcKoubouCrawlSettingRequiredKeywordResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DeletePcKoubouCrawlSettingRequiredKeywordResultErrors)
	fc.Result = res
	return ec.marshalNDeletePcKoubouCrawlSettingRequiredKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeletePcKoubouCrawlSettingRequiredKeywordResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeletePcKoubouCrawlSettingRequiredKeywordResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeletePcKoubouCrawlSettingRequiredKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeletePcKoubouCrawlSettingRequiredKeywordResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeletePcKoubouCrawlSettingRequiredKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.DeletePcKoubouCrawlSettingRequiredKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeletePcKoubouCrawlSettingRequiredKeywordResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeletePcKoubouCrawlSettingRequiredKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeletePcKoubouCrawlSettingRequiredKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeletePcKoubouCrawlSettingRequiredKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.DeletePcKoubouCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeletePcKoubouCrawlSettingRequiredKeywordResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeletePcKoubouCrawlSettingRequiredKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeletePcKoubouCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeletePcKoubouCrawlSettingRequiredKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.DeletePcKoubouCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeletePcKoubouCrawlSettingRequiredKeywordResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeletePcKoubouCrawlSettingRequiredKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeletePcKoubouCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeletePcKoubouCrawlSettingRequiredKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.DeletePcKoubouCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeletePcKoubouCrawlSettingRequiredKeywordResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeletePcKoubouCrawlSettingRequiredKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeletePcKoubouCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteProductResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.DeleteProductResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteProductResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteProductResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteProductResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteProductResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.DeleteProductResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteProductResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DeleteProductResultErrors)
	fc.Result = res
	return ec.marshalNDeleteProductResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteProductResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteProductResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteProductResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeleteProductResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteProductResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.DeleteProductResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteProductResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteProductResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteProductResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteProductResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.DeleteProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteProductResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteProductResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteProductResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.DeleteProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteProductResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteProductResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteProductResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.DeleteProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteProductResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteProductResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingExcludeKeywordResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.DeleteYahooAuctionCrawlSettingExcludeKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteYahooAuctionCrawlSettingExcludeKeywordResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteYahooAuctionCrawlSettingExcludeKeywordResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteYahooAuctionCrawlSettingExcludeKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingExcludeKeywordResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.DeleteYahooAuctionCrawlSettingExcludeKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteYahooAuctionCrawlSettingExcludeKeywordResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DeleteYahooAuctionCrawlSettingExcludeKeywordResultErrors)
	fc.Result = res
	return ec.marshalNDeleteYahooAuctionCrawlSettingExcludeKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteYahooAuctionCrawlSettingExcludeKeywordResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteYahooAuctionCrawlSettingExcludeKeywordResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteYahooAuctionCrawlSettingExcludeKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeleteYahooAuctionCrawlSettingExcludeKeywordResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingExcludeKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.DeleteYahooAuctionCrawlSettingExcludeKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteYahooAuctionCrawlSettingExcludeKeywordResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteYahooAuctionCrawlSettingExcludeKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteYahooAuctionCrawlSettingExcludeKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingExcludeProductResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.DeleteYahooAuctionCrawlSettingExcludeProductResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteYahooAuctionCrawlSettingExcludeProductResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteYahooAuctionCrawlSettingExcludeProductResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteYahooAuctionCrawlSettingExcludeProductResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingExcludeProductResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.DeleteYahooAuctionCrawlSettingExcludeProductResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteYahooAuctionCrawlSettingExcludeProductResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DeleteYahooAuctionCrawlSettingExcludeProductResultErrors)
	fc.Result = res
	return ec.marshalNDeleteYahooAuctionCrawlSettingExcludeProductResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteYahooAuctionCrawlSettingExcludeProductResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteYahooAuctionCrawlSettingExcludeProductResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteYahooAuctionCrawlSettingExcludeProductResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeleteYahooAuctionCrawlSettingExcludeProductResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingExcludeProductResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.DeleteYahooAuctionCrawlSettingExcludeProductResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteYahooAuctionCrawlSettingExcludeProductResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteYahooAuctionCrawlSettingExcludeProductResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteYahooAuctionCrawlSettingExcludeProductResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingExcludeProductResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.DeleteYahooAuctionCrawlSettingExcludeProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteYahooAuctionCrawlSettingExcludeProductResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteYahooAuctionCrawlSettingExcludeProductResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteYahooAuctionCrawlSettingExcludeProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingExcludeProductResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.DeleteYahooAuctionCrawlSettingExcludeProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteYahooAuctionCrawlSettingExcludeProductResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteYahooAuctionCrawlSettingExcludeProductResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteYahooAuctionCrawlSettingExcludeProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingExcludeProductResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.DeleteYahooAuctionCrawlSettingExcludeProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteYahooAuctionCrawlSettingExcludeProductResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteYahooAuctionCrawlSettingExcludeProductResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteYahooAuctionCrawlSettingExcludeProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingRequiredKeywordResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.DeleteYahooAuctionCrawlSettingRequiredKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteYahooAuctionCrawlSettingRequiredKeywordResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteYahooAuctionCrawlSettingRequiredKeywordResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteYahooAuctionCrawlSettingRequiredKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingRequiredKeywordResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.DeleteYahooAuctionCrawlSettingRequiredKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteYahooAuctionCrawlSettingRequiredKeywordResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DeleteYahooAuctionCrawlSettingRequiredKeywordResultErrors)
	fc.Result = res
	return ec.marshalNDeleteYahooAuctionCrawlSettingRequiredKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteYahooAuctionCrawlSettingRequiredKeywordResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteYahooAuctionCrawlSettingRequiredKeywordResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteYahooAuctionCrawlSettingRequiredKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeleteYahooAuctionCrawlSettingRequiredKeywordResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingRequiredKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.DeleteYahooAuctionCrawlSettingRequiredKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteYahooAuctionCrawlSettingRequiredKeywordResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteYahooAuctionCrawlSettingRequiredKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteYahooAuctionCrawlSettingRequiredKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ErrorDetail_field(ctx context.Context, field graphql.CollectedField, obj *model.ErrorDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ErrorDetail_field(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Field, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ErrorDetail_field(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ErrorDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ErrorDetail_message(ctx context.Context, field graphql.CollectedField, obj *model.ErrorDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ErrorDetail_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ErrorDetail_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ErrorDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IosysCrawlSetting_id(ctx context.Context, field graphql.CollectedField, obj *model.IosysCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IosysCrawlSetting_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IosysCrawlSetting_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IosysCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IosysCrawlSetting_productId(ctx context.Context, field graphql.CollectedField, obj *model.IosysCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IosysCrawlSetting_productId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IosysCrawlSetting_productId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IosysCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IosysCrawlSetting_keyword(ctx context.Context, field graphql.CollectedField, obj *model.IosysCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IosysCrawlSetting_keyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Keyword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IosysCrawlSetting_keyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IosysCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IosysCrawlSetting_minPrice(ctx context.Context, field graphql.CollectedField, obj *model.IosysCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IosysCrawlSetting_minPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IosysCrawlSetting_minPrice(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IosysCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IosysCrawlSetting_maxPrice(ctx context.Context, field graphql.CollectedField, obj *model.IosysCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IosysCrawlSetting_maxPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IosysCrawlSetting_maxPrice(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IosysCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IosysCrawlSetting_enabled(ctx context.Context, field graphql.CollectedField, obj *model.IosysCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IosysCrawlSetting_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IosysCrawlSetting_enabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IosysCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IosysCrawlSetting_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.IosysCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IosysCrawlSetting_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IosysCrawlSetting_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IosysCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IosysCrawlSetting_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.IosysCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IosysCrawlSetting_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IosysCrawlSetting_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IosysCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IosysCrawlSetting_iosysCrawlSettingExcludeKeywords(ctx context.Context, field graphql.CollectedField, obj *model.IosysCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IosysCrawlSetting_iosysCrawlSettingExcludeKeywords(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.IosysCrawlSetting().IosysCrawlSettingExcludeKeywords(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.IosysCrawlSettingExcludeKeyword)
	fc.Result = res
	return ec.marshalNIosysCrawlSettingExcludeKeyword2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐIosysCrawlSettingExcludeKeywordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IosysCrawlSetting_iosysCrawlSettingExcludeKeywords(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IosysCrawlSetting",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_IosysCrawlSettingExcludeKeyword_id(ctx, field)
			case "iosysCrawlSettingId":
				return ec.fieldContext_IosysCrawlSettingExcludeKeyword_iosysCrawlSettingId(ctx, field)
			case "keyword":
				return ec.fieldContext_IosysCrawlSettingExcludeKeyword_keyword(ctx, field)
			case "createdAt":
				return ec.fieldContext_IosysCrawlSettingExcludeKeyword_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_IosysCrawlSettingExcludeKeyword_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type IosysCrawlSettingExcludeKeyword", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _IosysCrawlSetting_iosysCrawlSettingExcludeProducts(ctx context.Context, field graphql.CollectedField, obj *model.IosysCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IosysCrawlSetting_iosysCrawlSettingExcludeProducts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.IosysCrawlSetting().IosysCrawlSettingExcludeProducts(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.IosysCrawlSettingExcludeProduct)
	fc.Result = res
	return ec.marshalNIosysCrawlSettingExcludeProduct2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐIosysCrawlSettingExcludeProductᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IosysCrawlSetting_iosysCrawlSettingExcludeProducts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IosysCrawlSetting",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_IosysCrawlSettingExcludeProduct_id(ctx, field)
			case "iosysCrawlSettingId":
				return ec.fieldContext_IosysCrawlSettingExcludeProduct_iosysCrawlSettingId(ctx, field)
			case "externalId":
				return ec.fieldContext_IosysCrawlSettingExcludeProduct_externalId(ctx, field)
			case "createdAt":
				return ec.fieldContext_IosysCrawlSettingExcludeProduct_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_IosysCrawlSettingExcludeProduct_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type IosysCrawlSettingExcludeProduct", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _IosysCrawlSetting_iosysCrawlSettingRequiredKeywords(ctx context.Context, field graphql.CollectedField, obj *model.IosysCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IosysCrawlSetting_iosysCrawlSettingRequiredKeywords(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.IosysCrawlSetting().IosysCrawlSettingRequiredKeywords(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.IosysCrawlSettingRequiredKeyword)
	fc.Result = res
	return ec.marshalNIosysCrawlSettingRequiredKeyword2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐIosysCrawlSettingRequiredKeywordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IosysCrawlSetting_iosysCrawlSettingRequiredKeywords(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IosysCrawlSetting",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_IosysCrawlSettingRequiredKeyword_id(ctx, field)
			case "iosysCrawlSettingId":
				return ec.fieldContext_IosysCrawlSettingRequiredKeyword_iosysCrawlSettingId(ctx, field)
			case "keyword":
				return ec.fieldContext_IosysCrawlSettingRequiredKeyword_keyword(ctx, field)
			case "createdAt":
				return ec.fieldContext_IosysCrawlSettingRequiredKeyword_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_IosysCrawlSettingRequiredKeyword_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type IosysCrawlSettingRequiredKeyword", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _IosysCrawlSettingExcludeKeyword_id(ctx context.Context, field graphql.CollectedField, obj *model.IosysCrawlSettingExcludeKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IosysCrawlSettingExcludeKeyword_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IosysCrawlSettingExcludeKeyword_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IosysCrawlSettingExcludeKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IosysCrawlSettingExcludeKeyword_iosysCrawlSettingId(ctx context.Context, field graphql.CollectedField, obj *model.IosysCrawlSettingExcludeKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IosysCrawlSettingExcludeKeyword_iosysCrawlSettingId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IosysCrawlSettingID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IosysCrawlSettingExcludeKeyword_iosysCrawlSettingId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IosysCrawlSettingExcludeKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IosysCrawlSettingExcludeKeyword_keyword(ctx context.Context, field graphql.CollectedField, obj *model.IosysCrawlSettingExcludeKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IosysCrawlSettingExcludeKeyword_keyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Keyword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IosysCrawlSettingExcludeKeyword_keyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IosysCrawlSettingExcludeKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IosysCrawlSettingExcludeKeyword_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.IosysCrawlSettingExcludeKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IosysCrawlSettingExcludeKeyword_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IosysCrawlSettingExcludeKeyword_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IosysCrawlSettingExcludeKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IosysCrawlSettingExcludeKeyword_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.IosysCrawlSettingExcludeKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IosysCrawlSettingExcludeKeyword_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IosysCrawlSettingExcludeKeyword_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IosysCrawlSettingExcludeKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IosysCrawlSettingExcludeProduct_id(ctx context.Context, field graphql.CollectedField, obj *model.IosysCrawlSettingExcludeProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IosysCrawlSettingExcludeProduct_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IosysCrawlSettingExcludeProduct_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IosysCrawlSettingExcludeProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IosysCrawlSettingExcludeProduct_iosysCrawlSettingId(ctx context.Context, field graphql.CollectedField, obj *model.IosysCrawlSettingExcludeProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IosysCrawlSettingExcludeProduct_iosysCrawlSettingId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IosysCrawlSettingID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IosysCrawlSettingExcludeProduct_iosysCrawlSettingId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IosysCrawlSettingExcludeProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IosysCrawlSettingExcludeProduct_externalId(ctx context.Context, field graphql.CollectedField, obj *model.IosysCrawlSettingExcludeProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IosysCrawlSettingExcludeProduct_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IosysCrawlSettingExcludeProduct_externalId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IosysCrawlSettingExcludeProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IosysCrawlSettingExcludeProduct_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.IosysCrawlSettingExcludeProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IosysCrawlSettingExcludeProduct_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IosysCrawlSettingExcludeProduct_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IosysCrawlSettingExcludeProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IosysCrawlSettingExcludeProduct_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.IosysCrawlSettingExcludeProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IosysCrawlSettingExcludeProduct_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IosysCrawlSettingExcludeProduct_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IosysCrawlSettingExcludeProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IosysCrawlSettingRequiredKeyword_id(ctx context.Context, field graphql.CollectedField, obj *model.IosysCrawlSettingRequiredKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IosysCrawlSettingRequiredKeyword_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IosysCrawlSettingRequiredKeyword_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IosysCrawlSettingRequiredKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IosysCrawlSettingRequiredKeyword_iosysCrawlSettingId(ctx context.Context, field graphql.CollectedField, obj *model.IosysCrawlSettingRequiredKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IosysCrawlSettingRequiredKeyword_iosysCrawlSettingId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IosysCrawlSettingID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IosysCrawlSettingRequiredKeyword_iosysCrawlSettingId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IosysCrawlSettingRequiredKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IosysCrawlSettingRequiredKeyword_keyword(ctx context.Context, field graphql.CollectedField, obj *model.IosysCrawlSettingRequiredKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IosysCrawlSettingRequiredKeyword_keyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Keyword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IosysCrawlSettingRequiredKeyword_keyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IosysCrawlSettingRequiredKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IosysCrawlSettingRequiredKeyword_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.IosysCrawlSettingRequiredKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IosysCrawlSettingRequiredKeyword_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IosysCrawlSettingRequiredKeyword_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IosysCrawlSettingRequiredKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IosysCrawlSettingRequiredKeyword_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.IosysCrawlSettingRequiredKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IosysCrawlSettingRequiredKeyword_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IosysCrawlSettingRequiredKeyword_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IosysCrawlSettingRequiredKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JanparaCrawlSetting_id(ctx context.Context, field graphql.CollectedField, obj *model.JanparaCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JanparaCrawlSetting_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JanparaCrawlSetting_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JanparaCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JanparaCrawlSetting_productId(ctx context.Context, field graphql.CollectedField, obj *model.JanparaCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JanparaCrawlSetting_productId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JanparaCrawlSetting_productId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JanparaCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JanparaCrawlSetting_keyword(ctx context.Context, field graphql.CollectedField, obj *model.JanparaCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JanparaCrawlSetting_keyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Keyword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JanparaCrawlSetting_keyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JanparaCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JanparaCrawlSetting_minPrice(ctx context.Context, field graphql.CollectedField, obj *model.JanparaCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JanparaCrawlSetting_minPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JanparaCrawlSetting_minPrice(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JanparaCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JanparaCrawlSetting_maxPrice(ctx context.Context, field graphql.CollectedField, obj *model.JanparaCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JanparaCrawlSetting_maxPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JanparaCrawlSetting_maxPrice(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JanparaCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JanparaCrawlSetting_enabled(ctx context.Context, field graphql.CollectedField, obj *model.JanparaCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JanparaCrawlSetting_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JanparaCrawlSetting_enabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JanparaCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JanparaCrawlSetting_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.JanparaCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JanparaCrawlSetting_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JanparaCrawlSetting_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JanparaCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JanparaCrawlSetting_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.JanparaCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JanparaCrawlSetting_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JanparaCrawlSetting_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JanparaCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JanparaCrawlSetting_janparaCrawlSettingExcludeKeywords(ctx context.Context, field graphql.CollectedField, obj *model.JanparaCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JanparaCrawlSetting_janparaCrawlSettingExcludeKeywords(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.JanparaCrawlSetting().JanparaCrawlSettingExcludeKeywords(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.JanparaCrawlSettingExcludeKeyword)
	fc.Result = res
	return ec.marshalNJanparaCrawlSettingExcludeKeyword2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐJanparaCrawlSettingExcludeKeywordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JanparaCrawlSetting_janparaCrawlSettingExcludeKeywords(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JanparaCrawlSetting",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_JanparaCrawlSettingExcludeKeyword_id(ctx, field)
			case "janparaCrawlSettingId":
				return ec.fieldContext_JanparaCrawlSettingExcludeKeyword_janparaCrawlSettingId(ctx, field)
			case "keyword":
				return ec.fieldContext_JanparaCrawlSettingExcludeKeyword_keyword(ctx, field)
			case "createdAt":
				return ec.fieldContext_JanparaCrawlSettingExcludeKeyword_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_JanparaCrawlSettingExcludeKeyword_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JanparaCrawlSettingExcludeKeyword", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JanparaCrawlSetting_janparaCrawlSettingExcludeProducts(ctx context.Context, field graphql.CollectedField, obj *model.JanparaCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JanparaCrawlSetting_janparaCrawlSettingExcludeProducts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.JanparaCrawlSetting().JanparaCrawlSettingExcludeProducts(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.JanparaCrawlSettingExcludeProduct)
	fc.Result = res
	return ec.marshalNJanparaCrawlSettingExcludeProduct2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐJanparaCrawlSettingExcludeProductᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JanparaCrawlSetting_janparaCrawlSettingExcludeProducts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JanparaCrawlSetting",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_JanparaCrawlSettingExcludeProduct_id(ctx, field)
			case "janparaCrawlSettingId":
				return ec.fieldContext_JanparaCrawlSettingExcludeProduct_janparaCrawlSettingId(ctx, field)
			case "externalId":
				return ec.fieldContext_JanparaCrawlSettingExcludeProduct_externalId(ctx, field)
			case "createdAt":
				return ec.fieldContext_JanparaCrawlSettingExcludeProduct_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_JanparaCrawlSettingExcludeProduct_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JanparaCrawlSettingExcludeProduct", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JanparaCrawlSetting_janparaCrawlSettingRequiredKeywords(ctx context.Context, field graphql.CollectedField, obj *model.JanparaCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JanparaCrawlSetting_janparaCrawlSettingRequiredKeywords(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.JanparaCrawlSetting().JanparaCrawlSettingRequiredKeywords(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.JanparaCrawlSettingRequiredKeyword)
	fc.Result = res
	return ec.marshalNJanparaCrawlSettingRequiredKeyword2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐJanparaCrawlSettingRequiredKeywordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JanparaCrawlSetting_janparaCrawlSettingRequiredKeywords(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JanparaCrawlSetting",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_JanparaCrawlSettingRequiredKeyword_id(ctx, field)
			case "janparaCrawlSettingId":
				return ec.fieldContext_JanparaCrawlSettingRequiredKeyword_janparaCrawlSettingId(ctx, field)
			case "keyword":
				return ec.fieldContext_JanparaCrawlSettingRequiredKeyword_keyword(ctx, field)
			case "createdAt":
				return ec.fieldContext_JanparaCrawlSettingRequiredKeyword_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_JanparaCrawlSettingRequiredKeyword_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JanparaCrawlSettingRequiredKeyword", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JanparaCrawlSettingExcludeKeyword_id(ctx context.Context, field graphql.CollectedField, obj *model.JanparaCrawlSettingExcludeKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JanparaCrawlSettingExcludeKeyword_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JanparaCrawlSettingExcludeKeyword_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JanparaCrawlSettingExcludeKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JanparaCrawlSettingExcludeKeyword_janparaCrawlSettingId(ctx context.Context, field graphql.CollectedField, obj *model.JanparaCrawlSettingExcludeKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JanparaCrawlSettingExcludeKeyword_janparaCrawlSettingId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JanparaCrawlSettingID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JanparaCrawlSettingExcludeKeyword_janparaCrawlSettingId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JanparaCrawlSettingExcludeKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JanparaCrawlSettingExcludeKeyword_keyword(ctx context.Context, field graphql.CollectedField, obj *model.JanparaCrawlSettingExcludeKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JanparaCrawlSettingExcludeKeyword_keyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Keyword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JanparaCrawlSettingExcludeKeyword_keyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JanparaCrawlSettingExcludeKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JanparaCrawlSettingExcludeKeyword_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.JanparaCrawlSettingExcludeKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JanparaCrawlSettingExcludeKeyword_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JanparaCrawlSettingExcludeKeyword_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JanparaCrawlSettingExcludeKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JanparaCrawlSettingExcludeKeyword_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.JanparaCrawlSettingExcludeKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JanparaCrawlSettingExcludeKeyword_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JanparaCrawlSettingExcludeKeyword_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JanparaCrawlSettingExcludeKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JanparaCrawlSettingExcludeProduct_id(ctx context.Context, field graphql.CollectedField, obj *model.JanparaCrawlSettingExcludeProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JanparaCrawlSettingExcludeProduct_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JanparaCrawlSettingExcludeProduct_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JanparaCrawlSettingExcludeProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JanparaCrawlSettingExcludeProduct_janparaCrawlSettingId(ctx context.Context, field graphql.CollectedField, obj *model.JanparaCrawlSettingExcludeProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JanparaCrawlSettingExcludeProduct_janparaCrawlSettingId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JanparaCrawlSettingID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JanparaCrawlSettingExcludeProduct_janparaCrawlSettingId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JanparaCrawlSettingExcludeProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JanparaCrawlSettingExcludeProduct_externalId(ctx context.Context, field graphql.CollectedField, obj *model.JanparaCrawlSettingExcludeProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JanparaCrawlSettingExcludeProduct_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JanparaCrawlSettingExcludeProduct_externalId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JanparaCrawlSettingExcludeProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JanparaCrawlSettingExcludeProduct_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.JanparaCrawlSettingExcludeProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JanparaCrawlSettingExcludeProduct_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JanparaCrawlSettingExcludeProduct_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JanparaCrawlSettingExcludeProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JanparaCrawlSettingExcludeProduct_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.JanparaCrawlSettingExcludeProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JanparaCrawlSettingExcludeProduct_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JanparaCrawlSettingExcludeProduct_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JanparaCrawlSettingExcludeProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JanparaCrawlSettingRequiredKeyword_id(ctx context.Context, field graphql.CollectedField, obj *model.JanparaCrawlSettingRequiredKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JanparaCrawlSettingRequiredKeyword_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JanparaCrawlSettingRequiredKeyword_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JanparaCrawlSettingRequiredKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JanparaCrawlSettingRequiredKeyword_janparaCrawlSettingId(ctx context.Context, field graphql.CollectedField, obj *model.JanparaCrawlSettingRequiredKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JanparaCrawlSettingRequiredKeyword_janparaCrawlSettingId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JanparaCrawlSettingID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JanparaCrawlSettingRequiredKeyword_janparaCrawlSettingId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JanparaCrawlSettingRequiredKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JanparaCrawlSettingRequiredKeyword_keyword(ctx context.Context, field graphql.CollectedField, obj *model.JanparaCrawlSettingRequiredKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JanparaCrawlSettingRequiredKeyword_keyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Keyword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JanparaCrawlSettingRequiredKeyword_keyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JanparaCrawlSettingRequiredKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JanparaCrawlSettingRequiredKeyword_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.JanparaCrawlSettingRequiredKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JanparaCrawlSettingRequiredKeyword_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JanparaCrawlSettingRequiredKeyword_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JanparaCrawlSettingRequiredKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JanparaCrawlSettingRequiredKeyword_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.JanparaCrawlSettingRequiredKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JanparaCrawlSettingRequiredKeyword_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JanparaCrawlSettingRequiredKeyword_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JanparaCrawlSettingRequiredKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariCrawlSetting_id(ctx context.Context, field graphql.CollectedField, obj *model.MercariCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariCrawlSetting_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariCrawlSetting_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariCrawlSetting_productId(ctx context.Context, field graphql.CollectedField, obj *model.MercariCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariCrawlSetting_productId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariCrawlSetting_productId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariCrawlSetting_keyword(ctx context.Context, field graphql.CollectedField, obj *model.MercariCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariCrawlSetting_keyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Keyword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariCrawlSetting_keyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariCrawlSetting_minPrice(ctx context.Context, field graphql.CollectedField, obj *model.MercariCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariCrawlSetting_minPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariCrawlSetting_minPrice(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariCrawlSetting_maxPrice(ctx context.Context, field graphql.CollectedField, obj *model.MercariCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariCrawlSetting_maxPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariCrawlSetting_maxPrice(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariCrawlSetting_categoryId(ctx context.Context, field graphql.CollectedField, obj *model.MercariCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariCrawlSetting_categoryId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CategoryID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariCrawlSetting_categoryId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariCrawlSetting_enabled(ctx context.Context, field graphql.CollectedField, obj *model.MercariCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariCrawlSetting_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariCrawlSetting_enabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariCrawlSetting_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.MercariCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariCrawlSetting_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariCrawlSetting_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariCrawlSetting_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.MercariCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariCrawlSetting_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariCrawlSetting_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariCrawlSetting_mercariCrawlSettingExcludeKeywords(ctx context.Context, field graphql.CollectedField, obj *model.MercariCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariCrawlSetting_mercariCrawlSettingExcludeKeywords(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MercariCrawlSetting().MercariCrawlSettingExcludeKeywords(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.MercariCrawlSettingExcludeKeyword)
	fc.Result = res
	return ec.marshalNMercariCrawlSettingExcludeKeyword2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariCrawlSettingExcludeKeywordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariCrawlSetting_mercariCrawlSettingExcludeKeywords(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariCrawlSetting",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MercariCrawlSettingExcludeKeyword_id(ctx, field)
			case "mercariCrawlSettingId":
				return ec.fieldContext_MercariCrawlSettingExcludeKeyword_mercariCrawlSettingId(ctx, field)
			case "keyword":
				return ec.fieldContext_MercariCrawlSettingExcludeKeyword_keyword(ctx, field)
			case "createdAt":
				return ec.fieldContext_MercariCrawlSettingExcludeKeyword_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MercariCrawlSettingExcludeKeyword_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MercariCrawlSettingExcludeKeyword", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariCrawlSetting_mercariCrawlSettingExcludeProducts(ctx context.Context, field graphql.CollectedField, obj *model.MercariCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariCrawlSetting_mercariCrawlSettingExcludeProducts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MercariCrawlSetting().MercariCrawlSettingExcludeProducts(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.MercariCrawlSettingExcludeProduct)
	fc.Result = res
	return ec.marshalNMercariCrawlSettingExcludeProduct2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariCrawlSettingExcludeProductᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariCrawlSetting_mercariCrawlSettingExcludeProducts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariCrawlSetting",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MercariCrawlSettingExcludeProduct_id(ctx, field)
			case "mercariCrawlSettingId":
				return ec.fieldContext_MercariCrawlSettingExcludeProduct_mercariCrawlSettingId(ctx, field)
			case "externalId":
				return ec.fieldContext_MercariCrawlSettingExcludeProduct_externalId(ctx, field)
			case "createdAt":
				return ec.fieldContext_MercariCrawlSettingExcludeProduct_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MercariCrawlSettingExcludeProduct_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MercariCrawlSettingExcludeProduct", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariCrawlSetting_mercariCrawlSettingRequiredKeywords(ctx context.Context, field graphql.CollectedField, obj *model.MercariCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariCrawlSetting_mercariCrawlSettingRequiredKeywords(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MercariCrawlSetting().MercariCrawlSettingRequiredKeywords(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.MercariCrawlSettingRequiredKeyword)
	fc.Result = res
	return ec.marshalNMercariCrawlSettingRequiredKeyword2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariCrawlSettingRequiredKeywordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariCrawlSetting_mercariCrawlSettingRequiredKeywords(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariCrawlSetting",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MercariCrawlSettingRequiredKeyword_id(ctx, field)
			case "mercariCrawlSettingId":
				return ec.fieldContext_MercariCrawlSettingRequiredKeyword_mercariCrawlSettingId(ctx, field)
			case "keyword":
				return ec.fieldContext_MercariCrawlSettingRequiredKeyword_keyword(ctx, field)
			case "createdAt":
				return ec.fieldContext_MercariCrawlSettingRequiredKeyword_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MercariCrawlSettingRequiredKeyword_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MercariCrawlSettingRequiredKeyword", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariCrawlSettingExcludeKeyword_id(ctx context.Context, field graphql.CollectedField, obj *model.MercariCrawlSettingExcludeKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariCrawlSettingExcludeKeyword_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariCrawlSettingExcludeKeyword_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariCrawlSettingExcludeKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariCrawlSettingExcludeKeyword_mercariCrawlSettingId(ctx context.Context, field graphql.CollectedField, obj *model.MercariCrawlSettingExcludeKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariCrawlSettingExcludeKeyword_mercariCrawlSettingId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MercariCrawlSettingID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariCrawlSettingExcludeKeyword_mercariCrawlSettingId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariCrawlSettingExcludeKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariCrawlSettingExcludeKeyword_keyword(ctx context.Context, field graphql.CollectedField, obj *model.MercariCrawlSettingExcludeKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariCrawlSettingExcludeKeyword_keyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Keyword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariCrawlSettingExcludeKeyword_keyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariCrawlSettingExcludeKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariCrawlSettingExcludeKeyword_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.MercariCrawlSettingExcludeKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariCrawlSettingExcludeKeyword_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariCrawlSettingExcludeKeyword_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariCrawlSettingExcludeKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariCrawlSettingExcludeKeyword_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.MercariCrawlSettingExcludeKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariCrawlSettingExcludeKeyword_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariCrawlSettingExcludeKeyword_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariCrawlSettingExcludeKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariCrawlSettingExcludeProduct_id(ctx context.Context, field graphql.CollectedField, obj *model.MercariCrawlSettingExcludeProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariCrawlSettingExcludeProduct_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariCrawlSettingExcludeProduct_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariCrawlSettingExcludeProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariCrawlSettingExcludeProduct_mercariCrawlSettingId(ctx context.Context, field graphql.CollectedField, obj *model.MercariCrawlSettingExcludeProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariCrawlSettingExcludeProduct_mercariCrawlSettingId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MercariCrawlSettingID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariCrawlSettingExcludeProduct_mercariCrawlSettingId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariCrawlSettingExcludeProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariCrawlSettingExcludeProduct_externalId(ctx context.Context, field graphql.CollectedField, obj *model.MercariCrawlSettingExcludeProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariCrawlSettingExcludeProduct_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariCrawlSettingExcludeProduct_externalId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariCrawlSettingExcludeProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariCrawlSettingExcludeProduct_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.MercariCrawlSettingExcludeProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariCrawlSettingExcludeProduct_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariCrawlSettingExcludeProduct_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariCrawlSettingExcludeProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariCrawlSettingExcludeProduct_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.MercariCrawlSettingExcludeProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariCrawlSettingExcludeProduct_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariCrawlSettingExcludeProduct_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariCrawlSettingExcludeProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariCrawlSettingRequiredKeyword_id(ctx context.Context, field graphql.CollectedField, obj *model.MercariCrawlSettingRequiredKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariCrawlSettingRequiredKeyword_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariCrawlSettingRequiredKeyword_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariCrawlSettingRequiredKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariCrawlSettingRequiredKeyword_mercariCrawlSettingId(ctx context.Context, field graphql.CollectedField, obj *model.MercariCrawlSettingRequiredKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariCrawlSettingRequiredKeyword_mercariCrawlSettingId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MercariCrawlSettingID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariCrawlSettingRequiredKeyword_mercariCrawlSettingId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariCrawlSettingRequiredKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariCrawlSettingRequiredKeyword_keyword(ctx context.Context, field graphql.CollectedField, obj *model.MercariCrawlSettingRequiredKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariCrawlSettingRequiredKeyword_keyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Keyword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariCrawlSettingRequiredKeyword_keyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariCrawlSettingRequiredKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariCrawlSettingRequiredKeyword_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.MercariCrawlSettingRequiredKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariCrawlSettingRequiredKeyword_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariCrawlSettingRequiredKeyword_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariCrawlSettingRequiredKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariCrawlSettingRequiredKeyword_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.MercariCrawlSettingRequiredKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariCrawlSettingRequiredKeyword_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariCrawlSettingRequiredKeyword_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariCrawlSettingRequiredKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariDailyPurchaseSummary_id(ctx context.Context, field graphql.CollectedField, obj *model.MercariDailyPurchaseSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariDailyPurchaseSummary_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariDailyPurchaseSummary_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariDailyPurchaseSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariDailyPurchaseSummary_productId(ctx context.Context, field graphql.CollectedField, obj *model.MercariDailyPurchaseSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariDailyPurchaseSummary_productId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariDailyPurchaseSummary_productId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariDailyPurchaseSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariDailyPurchaseSummary_averagePurchasePrice(ctx context.Context, field graphql.CollectedField, obj *model.MercariDailyPurchaseSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariDailyPurchaseSummary_averagePurchasePrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AveragePurchasePrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariDailyPurchaseSummary_averagePurchasePrice(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariDailyPurchaseSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariDailyPurchaseSummary_purchaseCount(ctx context.Context, field graphql.CollectedField, obj *model.MercariDailyPurchaseSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariDailyPurchaseSummary_purchaseCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PurchaseCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariDailyPurchaseSummary_purchaseCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariDailyPurchaseSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariDailyPurchaseSummary_date(ctx context.Context, field graphql.CollectedField, obj *model.MercariDailyPurchaseSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariDailyPurchaseSummary_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariDailyPurchaseSummary_date(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariDailyPurchaseSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariDailyPurchaseSummary_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.MercariDailyPurchaseSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariDailyPurchaseSummary_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariDailyPurchaseSummary_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariDailyPurchaseSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariDailyPurchaseSummary_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.MercariDailyPurchaseSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariDailyPurchaseSummary_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariDailyPurchaseSummary_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariDailyPurchaseSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariProduct_id(ctx context.Context, field graphql.CollectedField, obj *model.MercariProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariProduct_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariProduct_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariProduct_productId(ctx context.Context, field graphql.CollectedField, obj *model.MercariProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariProduct_productId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariProduct_productId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariProduct_mercariId(ctx context.Context, field graphql.CollectedField, obj *model.MercariProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariProduct_mercariId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MercariID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariProduct_mercariId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariProduct_name(ctx context.Context, field graphql.CollectedField, obj *model.MercariProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariProduct_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariProduct_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariProduct_thumbnailUrl(ctx context.Context, field graphql.CollectedField, obj *model.MercariProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariProduct_thumbnailUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThumbnailURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariProduct_thumbnailUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariProduct_price(ctx context.Context, field graphql.CollectedField, obj *model.MercariProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariProduct_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariProduct_price(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariProduct_published(ctx context.Context, field graphql.CollectedField, obj *model.MercariProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariProduct_published(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Published, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariProduct_published(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariProduct_boughtDate(ctx context.Context, field graphql.CollectedField, obj *model.MercariProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariProduct_boughtDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BoughtDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariProduct_boughtDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariProduct_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.MercariProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariProduct_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariProduct_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariProduct_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.MercariProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariProduct_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariProduct_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createProduct(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createProduct(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateProduct(rctx, fc.Args["input"].(model.CreateProductInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CreateProductResult)
	fc.Result = res
	return ec.marshalNCreateProductResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateProductResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createProduct(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CreateProductResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createProduct_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateProduct(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateProduct(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateProduct(rctx, fc.Args["id"].(string), fc.Args["input"].(model.UpdateProductInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.UpdateProductResult)
	fc.Result = res
	return ec.marshalNUpdateProductResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateProductResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateProduct(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UpdateProductResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateProduct_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteProduct(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteProduct(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteProduct(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DeleteProductResult)
	fc.Result = res
	return ec.marshalNDeleteProductResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteProductResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteProduct(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeleteProductResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteProduct_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createYahooAuctionCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createYahooAuctionCrawlSettingExcludeKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateYahooAuctionCrawlSettingExcludeKeyword(rctx, fc.Args["input"].(model.CreateYahooAuctionCrawlSettingExcludeKeywordInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CreateYahooAuctionCrawlSettingExcludeKeywordResult)
	fc.Result = res
	return ec.marshalNCreateYahooAuctionCrawlSettingExcludeKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateYahooAuctionCrawlSettingExcludeKeywordResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createYahooAuctionCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CreateYahooAuctionCrawlSettingExcludeKeywordResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createYahooAuctionCrawlSettingExcludeKeyword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateYahooAuctionCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateYahooAuctionCrawlSettingExcludeKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateYahooAuctionCrawlSettingExcludeKeyword(rctx, fc.Args["input"].(model.UpdateYahooAuctionCrawlSettingExcludeKeywordInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.UpdateYahooAuctionCrawlSettingExcludeKeywordResult)
	fc.Result = res
	return ec.marshalNUpdateYahooAuctionCrawlSettingExcludeKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateYahooAuctionCrawlSettingExcludeKeywordResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateYahooAuctionCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UpdateYahooAuctionCrawlSettingExcludeKeywordResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateYahooAuctionCrawlSettingExcludeKeyword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteYahooAuctionCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteYahooAuctionCrawlSettingExcludeKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteYahooAuctionCrawlSettingExcludeKeyword(rctx, fc.Args["id"].(string), fc.Args["productId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DeleteYahooAuctionCrawlSettingExcludeKeywordResult)
	fc.Result = res
	return ec.marshalNDeleteYahooAuctionCrawlSettingExcludeKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteYahooAuctionCrawlSettingExcludeKeywordResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteYahooAuctionCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeleteYahooAuctionCrawlSettingExcludeKeywordResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteYahooAuctionCrawlSettingExcludeKeyword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createYahooAuctionCrawlSettingExcludeProduct(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createYahooAuctionCrawlSettingExcludeProduct(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateYahooAuctionCrawlSettingExcludeProduct(rctx, fc.Args["input"].(model.CreateYahooAuctionCrawlSettingExcludeProductInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CreateYahooAuctionCrawlSettingExcludeProductResult)
	fc.Result = res
	return ec.marshalNCreateYahooAuctionCrawlSettingExcludeProductResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateYahooAuctionCrawlSettingExcludeProductResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createYahooAuctionCrawlSettingExcludeProduct(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CreateYahooAuctionCrawlSettingExcludeProductResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createYahooAuctionCrawlSettingExcludeProduct_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateYahooAuctionCrawlSettingExcludeProduct(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateYahooAuctionCrawlSettingExcludeProduct(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateYahooAuctionCrawlSettingExcludeProduct(rctx, fc.Args["input"].(model.UpdateYahooAuctionCrawlSettingExcludeProductInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.UpdateYahooAuctionCrawlSettingExcludeProductResult)
	fc.Result = res
	return ec.marshalNUpdateYahooAuctionCrawlSettingExcludeProductResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateYahooAuctionCrawlSettingExcludeProductResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateYahooAuctionCrawlSettingExcludeProduct(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UpdateYahooAuctionCrawlSettingExcludeProductResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateYahooAuctionCrawlSettingExcludeProduct_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteYahooAuctionCrawlSettingExcludeProduct(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteYahooAuctionCrawlSettingExcludeProduct(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteYahooAuctionCrawlSettingExcludeProduct(rctx, fc.Args["id"].(string), fc.Args["productId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DeleteYahooAuctionCrawlSettingExcludeProductResult)
	fc.Result = res
	return ec.marshalNDeleteYahooAuctionCrawlSettingExcludeProductResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteYahooAuctionCrawlSettingExcludeProductResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteYahooAuctionCrawlSettingExcludeProduct(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeleteYahooAuctionCrawlSettingExcludeProductResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteYahooAuctionCrawlSettingExcludeProduct_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createYahooAuctionCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createYahooAuctionCrawlSettingRequiredKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateYahooAuctionCrawlSettingRequiredKeyword(rctx, fc.Args["input"].(model.CreateYahooAuctionCrawlSettingRequiredKeywordInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CreateYahooAuctionCrawlSettingRequiredKeywordResult)
	fc.Result = res
	return ec.marshalNCreateYahooAuctionCrawlSettingRequiredKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateYahooAuctionCrawlSettingRequiredKeywordResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createYahooAuctionCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CreateYahooAuctionCrawlSettingRequiredKeywordResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createYahooAuctionCrawlSettingRequiredKeyword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateYahooAuctionCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateYahooAuctionCrawlSettingRequiredKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateYahooAuctionCrawlSettingRequiredKeyword(rctx, fc.Args["input"].(model.UpdateYahooAuctionCrawlSettingRequiredKeywordInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.UpdateYahooAuctionCrawlSettingRequiredKeywordResult)
	fc.Result = res
	return ec.marshalNUpdateYahooAuctionCrawlSettingRequiredKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateYahooAuctionCrawlSettingRequiredKeywordResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateYahooAuctionCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UpdateYahooAuctionCrawlSettingRequiredKeywordResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateYahooAuctionCrawlSettingRequiredKeyword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteYahooAuctionCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteYahooAuctionCrawlSettingRequiredKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteYahooAuctionCrawlSettingRequiredKeyword(rctx, fc.Args["id"].(string), fc.Args["productId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DeleteYahooAuctionCrawlSettingRequiredKeywordResult)
	fc.Result = res
	return ec.marshalNDeleteYahooAuctionCrawlSettingRequiredKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteYahooAuctionCrawlSettingRequiredKeywordResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteYahooAuctionCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeleteYahooAuctionCrawlSettingRequiredKeywordResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteYahooAuctionCrawlSettingRequiredKeyword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createMercariCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createMercariCrawlSettingExcludeKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateMercariCrawlSettingExcludeKeyword(rctx, fc.Args["input"].(model.CreateMercariCrawlSettingExcludeKeywordInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CreateMercariCrawlSettingExcludeKeywordResult)
	fc.Result = res
	return ec.marshalNCreateMercariCrawlSettingExcludeKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateMercariCrawlSettingExcludeKeywordResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createMercariCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CreateMercariCrawlSettingExcludeKeywordResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createMercariCrawlSettingExcludeKeyword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateMercariCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateMercariCrawlSettingExcludeKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateMercariCrawlSettingExcludeKeyword(rctx, fc.Args["input"].(model.UpdateMercariCrawlSettingExcludeKeywordInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.UpdateMercariCrawlSettingExcludeKeywordResult)
	fc.Result = res
	return ec.marshalNUpdateMercariCrawlSettingExcludeKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateMercariCrawlSettingExcludeKeywordResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateMercariCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UpdateMercariCrawlSettingExcludeKeywordResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateMercariCrawlSettingExcludeKeyword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteMercariCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteMercariCrawlSettingExcludeKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteMercariCrawlSettingExcludeKeyword(rctx, fc.Args["id"].(string), fc.Args["productId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DeleteMercariCrawlSettingExcludeKeywordResult)
	fc.Result = res
	return ec.marshalNDeleteMercariCrawlSettingExcludeKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteMercariCrawlSettingExcludeKeywordResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteMercariCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeleteMercariCrawlSettingExcludeKeywordResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteMercariCrawlSettingExcludeKeyword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createMercariCrawlSettingExcludeProduct(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createMercariCrawlSettingExcludeProduct(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateMercariCrawlSettingExcludeProduct(rctx, fc.Args["input"].(model.CreateMercariCrawlSettingExcludeProductInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CreateMercariCrawlSettingExcludeProductResult)
	fc.Result = res
	return ec.marshalNCreateMercariCrawlSettingExcludeProductResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateMercariCrawlSettingExcludeProductResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createMercariCrawlSettingExcludeProduct(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CreateMercariCrawlSettingExcludeProductResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createMercariCrawlSettingExcludeProduct_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateMercariCrawlSettingExcludeProduct(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateMercariCrawlSettingExcludeProduct(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateMercariCrawlSettingExcludeProduct(rctx, fc.Args["input"].(model.UpdateMercariCrawlSettingExcludeProductInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.UpdateMercariCrawlSettingExcludeProductResult)
	fc.Result = res
	return ec.marshalNUpdateMercariCrawlSettingExcludeProductResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateMercariCrawlSettingExcludeProductResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateMercariCrawlSettingExcludeProduct(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UpdateMercariCrawlSettingExcludeProductResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateMercariCrawlSettingExcludeProduct_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteMercariCrawlSettingExcludeProduct(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteMercariCrawlSettingExcludeProduct(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteMercariCrawlSettingExcludeProduct(rctx, fc.Args["id"].(string), fc.Args["productId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DeleteMercariCrawlSettingExcludeProductResult)
	fc.Result = res
	return ec.marshalNDeleteMercariCrawlSettingExcludeProductResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteMercariCrawlSettingExcludeProductResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteMercariCrawlSettingExcludeProduct(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeleteMercariCrawlSettingExcludeProductResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteMercariCrawlSettingExcludeProduct_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createMercariCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createMercariCrawlSettingRequiredKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateMercariCrawlSettingRequiredKeyword(rctx, fc.Args["input"].(model.CreateMercariCrawlSettingRequiredKeywordInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CreateMercariCrawlSettingRequiredKeywordResult)
	fc.Result = res
	return ec.marshalNCreateMercariCrawlSettingRequiredKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateMercariCrawlSettingRequiredKeywordResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createMercariCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CreateMercariCrawlSettingRequiredKeywordResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createMercariCrawlSettingRequiredKeyword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateMercariCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateMercariCrawlSettingRequiredKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateMercariCrawlSettingRequiredKeyword(rctx, fc.Args["input"].(model.UpdateMercariCrawlSettingRequiredKeywordInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.UpdateMercariCrawlSettingRequiredKeywordResult)
	fc.Result = res
	return ec.marshalNUpdateMercariCrawlSettingRequiredKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateMercariCrawlSettingRequiredKeywordResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateMercariCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UpdateMercariCrawlSettingRequiredKeywordResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateMercariCrawlSettingRequiredKeyword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteMercariCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteMercariCrawlSettingRequiredKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteMercariCrawlSettingRequiredKeyword(rctx, fc.Args["id"].(string), fc.Args["productId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DeleteMercariCrawlSettingRequiredKeywordResult)
	fc.Result = res
	return ec.marshalNDeleteMercariCrawlSettingRequiredKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteMercariCrawlSettingRequiredKeywordResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteMercariCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeleteMercariCrawlSettingRequiredKeywordResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteMercariCrawlSettingRequiredKeyword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createJanparaCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createJanparaCrawlSettingExcludeKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateJanparaCrawlSettingExcludeKeyword(rctx, fc.Args["input"].(model.CreateJanparaCrawlSettingExcludeKeywordInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CreateJanparaCrawlSettingExcludeKeywordResult)
	fc.Result = res
	return ec.marshalNCreateJanparaCrawlSettingExcludeKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateJanparaCrawlSettingExcludeKeywordResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createJanparaCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CreateJanparaCrawlSettingExcludeKeywordResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createJanparaCrawlSettingExcludeKeyword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateJanparaCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateJanparaCrawlSettingExcludeKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateJanparaCrawlSettingExcludeKeyword(rctx, fc.Args["input"].(model.UpdateJanparaCrawlSettingExcludeKeywordInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.UpdateJanparaCrawlSettingExcludeKeywordResult)
	fc.Result = res
	return ec.marshalNUpdateJanparaCrawlSettingExcludeKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateJanparaCrawlSettingExcludeKeywordResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateJanparaCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UpdateJanparaCrawlSettingExcludeKeywordResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateJanparaCrawlSettingExcludeKeyword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteJanparaCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteJanparaCrawlSettingExcludeKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteJanparaCrawlSettingExcludeKeyword(rctx, fc.Args["id"].(string), fc.Args["productId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DeleteJanparaCrawlSettingExcludeKeywordResult)
	fc.Result = res
	return ec.marshalNDeleteJanparaCrawlSettingExcludeKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteJanparaCrawlSettingExcludeKeywordResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteJanparaCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeleteJanparaCrawlSettingExcludeKeywordResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteJanparaCrawlSettingExcludeKeyword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createJanparaCrawlSettingExcludeProduct(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createJanparaCrawlSettingExcludeProduct(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateJanparaCrawlSettingExcludeProduct(rctx, fc.Args["input"].(model.CreateJanparaCrawlSettingExcludeProductInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CreateJanparaCrawlSettingExcludeProductResult)
	fc.Result = res
	return ec.marshalNCreateJanparaCrawlSettingExcludeProductResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateJanparaCrawlSettingExcludeProductResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createJanparaCrawlSettingExcludeProduct(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CreateJanparaCrawlSettingExcludeProductResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createJanparaCrawlSettingExcludeProduct_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateJanparaCrawlSettingExcludeProduct(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateJanparaCrawlSettingExcludeProduct(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateJanparaCrawlSettingExcludeProduct(rctx, fc.Args["input"].(model.UpdateJanparaCrawlSettingExcludeProductInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.UpdateJanparaCrawlSettingExcludeProductResult)
	fc.Result = res
	return ec.marshalNUpdateJanparaCrawlSettingExcludeProductResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateJanparaCrawlSettingExcludeProductResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateJanparaCrawlSettingExcludeProduct(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UpdateJanparaCrawlSettingExcludeProductResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateJanparaCrawlSettingExcludeProduct_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteJanparaCrawlSettingExcludeProduct(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteJanparaCrawlSettingExcludeProduct(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteJanparaCrawlSettingExcludeProduct(rctx, fc.Args["id"].(string), fc.Args["productId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DeleteJanparaCrawlSettingExcludeProductResult)
	fc.Result = res
	return ec.marshalNDeleteJanparaCrawlSettingExcludeProductResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteJanparaCrawlSettingExcludeProductResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteJanparaCrawlSettingExcludeProduct(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeleteJanparaCrawlSettingExcludeProductResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteJanparaCrawlSettingExcludeProduct_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createJanparaCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createJanparaCrawlSettingRequiredKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateJanparaCrawlSettingRequiredKeyword(rctx, fc.Args["input"].(model.CreateJanparaCrawlSettingRequiredKeywordInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CreateJanparaCrawlSettingRequiredKeywordResult)
	fc.Result = res
	return ec.marshalNCreateJanparaCrawlSettingRequiredKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateJanparaCrawlSettingRequiredKeywordResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createJanparaCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CreateJanparaCrawlSettingRequiredKeywordResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createJanparaCrawlSettingRequiredKeyword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateJanparaCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateJanparaCrawlSettingRequiredKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateJanparaCrawlSettingRequiredKeyword(rctx, fc.Args["input"].(model.UpdateJanparaCrawlSettingRequiredKeywordInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.UpdateJanparaCrawlSettingRequiredKeywordResult)
	fc.Result = res
	return ec.marshalNUpdateJanparaCrawlSettingRequiredKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateJanparaCrawlSettingRequiredKeywordResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateJanparaCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UpdateJanparaCrawlSettingRequiredKeywordResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateJanparaCrawlSettingRequiredKeyword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteJanparaCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteJanparaCrawlSettingRequiredKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteJanparaCrawlSettingRequiredKeyword(rctx, fc.Args["id"].(string), fc.Args["productId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DeleteJanparaCrawlSettingRequiredKeywordResult)
	fc.Result = res
	return ec.marshalNDeleteJanparaCrawlSettingRequiredKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteJanparaCrawlSettingRequiredKeywordResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteJanparaCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeleteJanparaCrawlSettingRequiredKeywordResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteJanparaCrawlSettingRequiredKeyword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createIosysCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createIosysCrawlSettingExcludeKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateIosysCrawlSettingExcludeKeyword(rctx, fc.Args["input"].(model.CreateIosysCrawlSettingExcludeKeywordInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CreateIosysCrawlSettingExcludeKeywordResult)
	fc.Result = res
	return ec.marshalNCreateIosysCrawlSettingExcludeKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateIosysCrawlSettingExcludeKeywordResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createIosysCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CreateIosysCrawlSettingExcludeKeywordResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createIosysCrawlSettingExcludeKeyword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateIosysCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateIosysCrawlSettingExcludeKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateIosysCrawlSettingExcludeKeyword(rctx, fc.Args["input"].(model.UpdateIosysCrawlSettingExcludeKeywordInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.UpdateIosysCrawlSettingExcludeKeywordResult)
	fc.Result = res
	return ec.marshalNUpdateIosysCrawlSettingExcludeKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateIosysCrawlSettingExcludeKeywordResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateIosysCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UpdateIosysCrawlSettingExcludeKeywordResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateIosysCrawlSettingExcludeKeyword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteIosysCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteIosysCrawlSettingExcludeKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteIosysCrawlSettingExcludeKeyword(rctx, fc.Args["id"].(string), fc.Args["productId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DeleteIosysCrawlSettingExcludeKeywordResult)
	fc.Result = res
	return ec.marshalNDeleteIosysCrawlSettingExcludeKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteIosysCrawlSettingExcludeKeywordResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteIosysCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeleteIosysCrawlSettingExcludeKeywordResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteIosysCrawlSettingExcludeKeyword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createIosysCrawlSettingExcludeProduct(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createIosysCrawlSettingExcludeProduct(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateIosysCrawlSettingExcludeProduct(rctx, fc.Args["input"].(model.CreateIosysCrawlSettingExcludeProductInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CreateIosysCrawlSettingExcludeProductResult)
	fc.Result = res
	return ec.marshalNCreateIosysCrawlSettingExcludeProductResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateIosysCrawlSettingExcludeProductResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createIosysCrawlSettingExcludeProduct(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CreateIosysCrawlSettingExcludeProductResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createIosysCrawlSettingExcludeProduct_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateIosysCrawlSettingExcludeProduct(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateIosysCrawlSettingExcludeProduct(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateIosysCrawlSettingExcludeProduct(rctx, fc.Args["input"].(model.UpdateIosysCrawlSettingExcludeProductInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.UpdateIosysCrawlSettingExcludeProductResult)
	fc.Result = res
	return ec.marshalNUpdateIosysCrawlSettingExcludeProductResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateIosysCrawlSettingExcludeProductResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateIosysCrawlSettingExcludeProduct(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UpdateIosysCrawlSettingExcludeProductResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateIosysCrawlSettingExcludeProduct_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteIosysCrawlSettingExcludeProduct(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteIosysCrawlSettingExcludeProduct(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteIosysCrawlSettingExcludeProduct(rctx, fc.Args["id"].(string), fc.Args["productId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DeleteIosysCrawlSettingExcludeProductResult)
	fc.Result = res
	return ec.marshalNDeleteIosysCrawlSettingExcludeProductResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteIosysCrawlSettingExcludeProductResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteIosysCrawlSettingExcludeProduct(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeleteIosysCrawlSettingExcludeProductResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteIosysCrawlSettingExcludeProduct_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createIosysCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createIosysCrawlSettingRequiredKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateIosysCrawlSettingRequiredKeyword(rctx, fc.Args["input"].(model.CreateIosysCrawlSettingRequiredKeywordInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CreateIosysCrawlSettingRequiredKeywordResult)
	fc.Result = res
	return ec.marshalNCreateIosysCrawlSettingRequiredKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateIosysCrawlSettingRequiredKeywordResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createIosysCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CreateIosysCrawlSettingRequiredKeywordResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createIosysCrawlSettingRequiredKeyword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateIosysCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateIosysCrawlSettingRequiredKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateIosysCrawlSettingRequiredKeyword(rctx, fc.Args["input"].(model.UpdateIosysCrawlSettingRequiredKeywordInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.UpdateIosysCrawlSettingRequiredKeywordResult)
	fc.Result = res
	return ec.marshalNUpdateIosysCrawlSettingRequiredKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateIosysCrawlSettingRequiredKeywordResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateIosysCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UpdateIosysCrawlSettingRequiredKeywordResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateIosysCrawlSettingRequiredKeyword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteIosysCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteIosysCrawlSettingRequiredKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteIosysCrawlSettingRequiredKeyword(rctx, fc.Args["id"].(string), fc.Args["productId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DeleteIosysCrawlSettingRequiredKeywordResult)
	fc.Result = res
	return ec.marshalNDeleteIosysCrawlSettingRequiredKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteIosysCrawlSettingRequiredKeywordResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteIosysCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeleteIosysCrawlSettingRequiredKeywordResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteIosysCrawlSettingRequiredKeyword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createPcKoubouCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createPcKoubouCrawlSettingExcludeKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatePcKoubouCrawlSettingExcludeKeyword(rctx, fc.Args["input"].(model.CreatePcKoubouCrawlSettingExcludeKeywordInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CreatePcKoubouCrawlSettingExcludeKeywordResult)
	fc.Result = res
	return ec.marshalNCreatePcKoubouCrawlSettingExcludeKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreatePcKoubouCrawlSettingExcludeKeywordResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createPcKoubouCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CreatePcKoubouCrawlSettingExcludeKeywordResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createPcKoubouCrawlSettingExcludeKeyword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updatePcKoubouCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updatePcKoubouCrawlSettingExcludeKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePcKoubouCrawlSettingExcludeKeyword(rctx, fc.Args["input"].(model.UpdatePcKoubouCrawlSettingExcludeKeywordInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.UpdatePcKoubouCrawlSettingExcludeKeywordResult)
	fc.Result = res
	return ec.marshalNUpdatePcKoubouCrawlSettingExcludeKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdatePcKoubouCrawlSettingExcludeKeywordResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updatePcKoubouCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UpdatePcKoubouCrawlSettingExcludeKeywordResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updatePcKoubouCrawlSettingExcludeKeyword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deletePcKoubouCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deletePcKoubouCrawlSettingExcludeKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeletePcKoubouCrawlSettingExcludeKeyword(rctx, fc.Args["id"].(string), fc.Args["productId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DeletePcKoubouCrawlSettingExcludeKeywordResult)
	fc.Result = res
	return ec.marshalNDeletePcKoubouCrawlSettingExcludeKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeletePcKoubouCrawlSettingExcludeKeywordResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deletePcKoubouCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeletePcKoubouCrawlSettingExcludeKeywordResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deletePcKoubouCrawlSettingExcludeKeyword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createPcKoubouCrawlSettingExcludeProduct(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createPcKoubouCrawlSettingExcludeProduct(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatePcKoubouCrawlSettingExcludeProduct(rctx, fc.Args["input"].(model.CreatePcKoubouCrawlSettingExcludeProductInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CreatePcKoubouCrawlSettingExcludeProductResult)
	fc.Result = res
	return ec.marshalNCreatePcKoubouCrawlSettingExcludeProductResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreatePcKoubouCrawlSettingExcludeProductResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createPcKoubouCrawlSettingExcludeProduct(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CreatePcKoubouCrawlSettingExcludeProductResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createPcKoubouCrawlSettingExcludeProduct_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updatePcKoubouCrawlSettingExcludeProduct(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updatePcKoubouCrawlSettingExcludeProduct(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePcKoubouCrawlSettingExcludeProduct(rctx, fc.Args["input"].(model.UpdatePcKoubouCrawlSettingExcludeProductInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.UpdatePcKoubouCrawlSettingExcludeProductResult)
	fc.Result = res
	return ec.marshalNUpdatePcKoubouCrawlSettingExcludeProductResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdatePcKoubouCrawlSettingExcludeProductResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updatePcKoubouCrawlSettingExcludeProduct(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UpdatePcKoubouCrawlSettingExcludeProductResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updatePcKoubouCrawlSettingExcludeProduct_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deletePcKoubouCrawlSettingExcludeProduct(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deletePcKoubouCrawlSettingExcludeProduct(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeletePcKoubouCrawlSettingExcludeProduct(rctx, fc.Args["id"].(string), fc.Args["productId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DeletePcKoubouCrawlSettingExcludeProductResult)
	fc.Result = res
	return ec.marshalNDeletePcKoubouCrawlSettingExcludeProductResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeletePcKoubouCrawlSettingExcludeProductResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deletePcKoubouCrawlSettingExcludeProduct(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeletePcKoubouCrawlSettingExcludeProductResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deletePcKoubouCrawlSettingExcludeProduct_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createPcKoubouCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createPcKoubouCrawlSettingRequiredKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatePcKoubouCrawlSettingRequiredKeyword(rctx, fc.Args["input"].(model.CreatePcKoubouCrawlSettingRequiredKeywordInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CreatePcKoubouCrawlSettingRequiredKeywordResult)
	fc.Result = res
	return ec.marshalNCreatePcKoubouCrawlSettingRequiredKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreatePcKoubouCrawlSettingRequiredKeywordResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createPcKoubouCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CreatePcKoubouCrawlSettingRequiredKeywordResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createPcKoubouCrawlSettingRequiredKeyword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updatePcKoubouCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updatePcKoubouCrawlSettingRequiredKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePcKoubouCrawlSettingRequiredKeyword(rctx, fc.Args["input"].(model.UpdatePcKoubouCrawlSettingRequiredKeywordInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.UpdatePcKoubouCrawlSettingRequiredKeywordResult)
	fc.Result = res
	return ec.marshalNUpdatePcKoubouCrawlSettingRequiredKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdatePcKoubouCrawlSettingRequiredKeywordResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updatePcKoubouCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UpdatePcKoubouCrawlSettingRequiredKeywordResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updatePcKoubouCrawlSettingRequiredKeyword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deletePcKoubouCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deletePcKoubouCrawlSettingRequiredKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeletePcKoubouCrawlSettingRequiredKeyword(rctx, fc.Args["id"].(string), fc.Args["productId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DeletePcKoubouCrawlSettingRequiredKeywordResult)
	fc.Result = res
	return ec.marshalNDeletePcKoubouCrawlSettingRequiredKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeletePcKoubouCrawlSettingRequiredKeywordResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deletePcKoubouCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeletePcKoubouCrawlSettingRequiredKeywordResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deletePcKoubouCrawlSettingRequiredKeyword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _PcKoubouCrawlSetting_id(ctx context.Context, field graphql.CollectedField, obj *model.PcKoubouCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PcKoubouCrawlSetting_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PcKoubouCrawlSetting_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PcKoubouCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PcKoubouCrawlSetting_productId(ctx context.Context, field graphql.CollectedField, obj *model.PcKoubouCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PcKoubouCrawlSetting_productId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PcKoubouCrawlSetting_productId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PcKoubouCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PcKoubouCrawlSetting_keyword(ctx context.Context, field graphql.CollectedField, obj *model.PcKoubouCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PcKoubouCrawlSetting_keyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Keyword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PcKoubouCrawlSetting_keyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PcKoubouCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PcKoubouCrawlSetting_minPrice(ctx context.Context, field graphql.CollectedField, obj *model.PcKoubouCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PcKoubouCrawlSetting_minPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PcKoubouCrawlSetting_minPrice(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PcKoubouCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PcKoubouCrawlSetting_maxPrice(ctx context.Context, field graphql.CollectedField, obj *model.PcKoubouCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PcKoubouCrawlSetting_maxPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PcKoubouCrawlSetting_maxPrice(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PcKoubouCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PcKoubouCrawlSetting_enabled(ctx context.Context, field graphql.CollectedField, obj *model.PcKoubouCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PcKoubouCrawlSetting_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PcKoubouCrawlSetting_enabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PcKoubouCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PcKoubouCrawlSetting_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.PcKoubouCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PcKoubouCrawlSetting_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PcKoubouCrawlSetting_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PcKoubouCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PcKoubouCrawlSetting_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.PcKoubouCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PcKoubouCrawlSetting_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PcKoubouCrawlSetting_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PcKoubouCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PcKoubouCrawlSetting_pcKoubouCrawlSettingExcludeKeywords(ctx context.Context, field graphql.CollectedField, obj *model.PcKoubouCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PcKoubouCrawlSetting_pcKoubouCrawlSettingExcludeKeywords(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PcKoubouCrawlSetting().PcKoubouCrawlSettingExcludeKeywords(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.PcKoubouCrawlSettingExcludeKeyword)
	fc.Result = res
	return ec.marshalNPcKoubouCrawlSettingExcludeKeyword2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐPcKoubouCrawlSettingExcludeKeywordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PcKoubouCrawlSetting_pcKoubouCrawlSettingExcludeKeywords(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PcKoubouCrawlSetting",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PcKoubouCrawlSettingExcludeKeyword_id(ctx, field)
			case "pcKoubouCrawlSettingId":
				return ec.fieldContext_PcKoubouCrawlSettingExcludeKeyword_pcKoubouCrawlSettingId(ctx, field)
			case "keyword":
				return ec.fieldContext_PcKoubouCrawlSettingExcludeKeyword_keyword(ctx, field)
			case "createdAt":
				return ec.fieldContext_PcKoubouCrawlSettingExcludeKeyword_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PcKoubouCrawlSettingExcludeKeyword_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PcKoubouCrawlSettingExcludeKeyword", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PcKoubouCrawlSetting_pcKoubouCrawlSettingExcludeProducts(ctx context.Context, field graphql.CollectedField, obj *model.PcKoubouCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PcKoubouCrawlSetting_pcKoubouCrawlSettingExcludeProducts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PcKoubouCrawlSetting().PcKoubouCrawlSettingExcludeProducts(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.PcKoubouCrawlSettingExcludeProduct)
	fc.Result = res
	return ec.marshalNPcKoubouCrawlSettingExcludeProduct2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐPcKoubouCrawlSettingExcludeProductᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PcKoubouCrawlSetting_pcKoubouCrawlSettingExcludeProducts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PcKoubouCrawlSetting",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PcKoubouCrawlSettingExcludeProduct_id(ctx, field)
			case "pcKoubouCrawlSettingId":
				return ec.fieldContext_PcKoubouCrawlSettingExcludeProduct_pcKoubouCrawlSettingId(ctx, field)
			case "externalId":
				return ec.fieldContext_PcKoubouCrawlSettingExcludeProduct_externalId(ctx, field)
			case "createdAt":
				return ec.fieldContext_PcKoubouCrawlSettingExcludeProduct_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PcKoubouCrawlSettingExcludeProduct_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PcKoubouCrawlSettingExcludeProduct", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PcKoubouCrawlSetting_pcKoubouCrawlSettingRequiredKeywords(ctx context.Context, field graphql.CollectedField, obj *model.PcKoubouCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PcKoubouCrawlSetting_pcKoubouCrawlSettingRequiredKeywords(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PcKoubouCrawlSetting().PcKoubouCrawlSettingRequiredKeywords(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.PcKoubouCrawlSettingRequiredKeyword)
	fc.Result = res
	return ec.marshalNPcKoubouCrawlSettingRequiredKeyword2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐPcKoubouCrawlSettingRequiredKeywordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PcKoubouCrawlSetting_pcKoubouCrawlSettingRequiredKeywords(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PcKoubouCrawlSetting",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PcKoubouCrawlSettingRequiredKeyword_id(ctx, field)
			case "pcKoubouCrawlSettingId":
				return ec.fieldContext_PcKoubouCrawlSettingRequiredKeyword_pcKoubouCrawlSettingId(ctx, field)
			case "keyword":
				return ec.fieldContext_PcKoubouCrawlSettingRequiredKeyword_keyword(ctx, field)
			case "createdAt":
				return ec.fieldContext_PcKoubouCrawlSettingRequiredKeyword_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PcKoubouCrawlSettingRequiredKeyword_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PcKoubouCrawlSettingRequiredKeyword", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PcKoubouCrawlSettingExcludeKeyword_id(ctx context.Context, field graphql.CollectedField, obj *model.PcKoubouCrawlSettingExcludeKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PcKoubouCrawlSettingExcludeKeyword_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PcKoubouCrawlSettingExcludeKeyword_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PcKoubouCrawlSettingExcludeKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PcKoubouCrawlSettingExcludeKeyword_pcKoubouCrawlSettingId(ctx context.Context, field graphql.CollectedField, obj *model.PcKoubouCrawlSettingExcludeKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PcKoubouCrawlSettingExcludeKeyword_pcKoubouCrawlSettingId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PcKoubouCrawlSettingID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PcKoubouCrawlSettingExcludeKeyword_pcKoubouCrawlSettingId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PcKoubouCrawlSettingExcludeKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PcKoubouCrawlSettingExcludeKeyword_keyword(ctx context.Context, field graphql.CollectedField, obj *model.PcKoubouCrawlSettingExcludeKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PcKoubouCrawlSettingExcludeKeyword_keyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Keyword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PcKoubouCrawlSettingExcludeKeyword_keyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PcKoubouCrawlSettingExcludeKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PcKoubouCrawlSettingExcludeKeyword_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.PcKoubouCrawlSettingExcludeKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PcKoubouCrawlSettingExcludeKeyword_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PcKoubouCrawlSettingExcludeKeyword_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PcKoubouCrawlSettingExcludeKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PcKoubouCrawlSettingExcludeKeyword_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.PcKoubouCrawlSettingExcludeKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PcKoubouCrawlSettingExcludeKeyword_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PcKoubouCrawlSettingExcludeKeyword_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PcKoubouCrawlSettingExcludeKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PcKoubouCrawlSettingExcludeProduct_id(ctx context.Context, field graphql.CollectedField, obj *model.PcKoubouCrawlSettingExcludeProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PcKoubouCrawlSettingExcludeProduct_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PcKoubouCrawlSettingExcludeProduct_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PcKoubouCrawlSettingExcludeProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PcKoubouCrawlSettingExcludeProduct_pcKoubouCrawlSettingId(ctx context.Context, field graphql.CollectedField, obj *model.PcKoubouCrawlSettingExcludeProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PcKoubouCrawlSettingExcludeProduct_pcKoubouCrawlSettingId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PcKoubouCrawlSettingID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PcKoubouCrawlSettingExcludeProduct_pcKoubouCrawlSettingId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PcKoubouCrawlSettingExcludeProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PcKoubouCrawlSettingExcludeProduct_externalId(ctx context.Context, field graphql.CollectedField, obj *model.PcKoubouCrawlSettingExcludeProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PcKoubouCrawlSettingExcludeProduct_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PcKoubouCrawlSettingExcludeProduct_externalId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PcKoubouCrawlSettingExcludeProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PcKoubouCrawlSettingExcludeProduct_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.PcKoubouCrawlSettingExcludeProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PcKoubouCrawlSettingExcludeProduct_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PcKoubouCrawlSettingExcludeProduct_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PcKoubouCrawlSettingExcludeProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PcKoubouCrawlSettingExcludeProduct_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.PcKoubouCrawlSettingExcludeProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PcKoubouCrawlSettingExcludeProduct_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PcKoubouCrawlSettingExcludeProduct_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PcKoubouCrawlSettingExcludeProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PcKoubouCrawlSettingRequiredKeyword_id(ctx context.Context, field graphql.CollectedField, obj *model.PcKoubouCrawlSettingRequiredKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PcKoubouCrawlSettingRequiredKeyword_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PcKoubouCrawlSettingRequiredKeyword_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PcKoubouCrawlSettingRequiredKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PcKoubouCrawlSettingRequiredKeyword_pcKoubouCrawlSettingId(ctx context.Context, field graphql.CollectedField, obj *model.PcKoubouCrawlSettingRequiredKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PcKoubouCrawlSettingRequiredKeyword_pcKoubouCrawlSettingId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PcKoubouCrawlSettingID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PcKoubouCrawlSettingRequiredKeyword_pcKoubouCrawlSettingId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PcKoubouCrawlSettingRequiredKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PcKoubouCrawlSettingRequiredKeyword_keyword(ctx context.Context, field graphql.CollectedField, obj *model.PcKoubouCrawlSettingRequiredKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PcKoubouCrawlSettingRequiredKeyword_keyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Keyword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PcKoubouCrawlSettingRequiredKeyword_keyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PcKoubouCrawlSettingRequiredKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PcKoubouCrawlSettingRequiredKeyword_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.PcKoubouCrawlSettingRequiredKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PcKoubouCrawlSettingRequiredKeyword_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PcKoubouCrawlSettingRequiredKeyword_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PcKoubouCrawlSettingRequiredKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PcKoubouCrawlSettingRequiredKeyword_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.PcKoubouCrawlSettingRequiredKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PcKoubouCrawlSettingRequiredKeyword_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PcKoubouCrawlSettingRequiredKeyword_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PcKoubouCrawlSettingRequiredKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_id(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_name(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_yahooAuctionProducts(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_yahooAuctionProducts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Product().YahooAuctionProducts(rctx, obj, fc.Args["published"].(*bool), fc.Args["sort"].(*string), fc.Args["order"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.YahooAuctionProduct)
	fc.Result = res
	return ec.marshalNYahooAuctionProduct2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionProductᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_yahooAuctionProducts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_YahooAuctionProduct_id(ctx, field)
			case "productId":
				return ec.fieldContext_YahooAuctionProduct_productId(ctx, field)
			case "yahooAuctionId":
				return ec.fieldContext_YahooAuctionProduct_yahooAuctionId(ctx, field)
			case "name":
				return ec.fieldContext_YahooAuctionProduct_name(ctx, field)
			case "thumbnailUrl":
				return ec.fieldContext_YahooAuctionProduct_thumbnailUrl(ctx, field)
			case "price":
				return ec.fieldContext_YahooAuctionProduct_price(ctx, field)
			case "published":
				return ec.fieldContext_YahooAuctionProduct_published(ctx, field)
			case "boughtDate":
				return ec.fieldContext_YahooAuctionProduct_boughtDate(ctx, field)
			case "createdAt":
				return ec.fieldContext_YahooAuctionProduct_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_YahooAuctionProduct_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type YahooAuctionProduct", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Product_yahooAuctionProducts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Product_yahooAuctionCrawlSetting(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_yahooAuctionCrawlSetting(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Product().YahooAuctionCrawlSetting(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.YahooAuctionCrawlSetting)
	fc.Result = res
	return ec.marshalNYahooAuctionCrawlSetting2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionCrawlSetting(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_yahooAuctionCrawlSetting(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_YahooAuctionCrawlSetting_id(ctx, field)
			case "productId":
				return ec.fieldContext_YahooAuctionCrawlSetting_productId(ctx, field)
			case "keyword":
				return ec.fieldContext_YahooAuctionCrawlSetting_keyword(ctx, field)
			case "minPrice":
				return ec.fieldContext_YahooAuctionCrawlSetting_minPrice(ctx, field)
			case "maxPrice":
				return ec.fieldContext_YahooAuctionCrawlSetting_maxPrice(ctx, field)
			case "categoryId":
				return ec.fieldContext_YahooAuctionCrawlSetting_categoryId(ctx, field)
			case "enabled":
				return ec.fieldContext_YahooAuctionCrawlSetting_enabled(ctx, field)
			case "createdAt":
				return ec.fieldContext_YahooAuctionCrawlSetting_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_YahooAuctionCrawlSetting_updatedAt(ctx, field)
			case "yahooAuctionCrawlSettingExcludeKeywords":
				return ec.fieldContext_YahooAuctionCrawlSetting_yahooAuctionCrawlSettingExcludeKeywords(ctx, field)
			case "yahooAuctionCrawlSettingExcludeProducts":
				return ec.fieldContext_YahooAuctionCrawlSetting_yahooAuctionCrawlSettingExcludeProducts(ctx, field)
			case "yahooAuctionCrawlSettingRequiredKeywords":
				return ec.fieldContext_YahooAuctionCrawlSetting_yahooAuctionCrawlSettingRequiredKeywords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type YahooAuctionCrawlSetting", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_yahooAuctionDailyPurchaseSummaries(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_yahooAuctionDailyPurchaseSummaries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Product().YahooAuctionDailyPurchaseSummaries(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.YahooAuctionDailyPurchaseSummary)
	fc.Result = res
	return ec.marshalNYahooAuctionDailyPurchaseSummary2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionDailyPurchaseSummaryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_yahooAuctionDailyPurchaseSummaries(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_YahooAuctionDailyPurchaseSummary_id(ctx, field)
			case "productId":
				return ec.fieldContext_YahooAuctionDailyPurchaseSummary_productId(ctx, field)
			case "averagePurchasePrice":
				return ec.fieldContext_YahooAuctionDailyPurchaseSummary_averagePurchasePrice(ctx, field)
			case "purchaseCount":
				return ec.fieldContext_YahooAuctionDailyPurchaseSummary_purchaseCount(ctx, field)
			case "date":
				return ec.fieldContext_YahooAuctionDailyPurchaseSummary_date(ctx, field)
			case "createdAt":
				return ec.fieldContext_YahooAuctionDailyPurchaseSummary_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_YahooAuctionDailyPurchaseSummary_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type YahooAuctionDailyPurchaseSummary", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_yahooFleamarketDailyPurchaseSummaries(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_yahooFleamarketDailyPurchaseSummaries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Product().YahooFleamarketDailyPurchaseSummaries(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.YahooFleamarketDailyPurchaseSummary)
	fc.Result = res
	return ec.marshalNYahooFleamarketDailyPurchaseSummary2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooFleamarketDailyPurchaseSummaryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_yahooFleamarketDailyPurchaseSummaries(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_YahooFleamarketDailyPurchaseSummary_id(ctx, field)
			case "productId":
				return ec.fieldContext_YahooFleamarketDailyPurchaseSummary_productId(ctx, field)
			case "averagePurchasePrice":
				return ec.fieldContext_YahooFleamarketDailyPurchaseSummary_averagePurchasePrice(ctx, field)
			case "purchaseCount":
				return ec.fieldContext_YahooFleamarketDailyPurchaseSummary_purchaseCount(ctx, field)
			case "date":
				return ec.fieldContext_YahooFleamarketDailyPurchaseSummary_date(ctx, field)
			case "createdAt":
				return ec.fieldContext_YahooFleamarketDailyPurchaseSummary_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_YahooFleamarketDailyPurchaseSummary_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type YahooFleamarketDailyPurchaseSummary", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_mercariProducts(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_mercariProducts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Product().MercariProducts(rctx, obj, fc.Args["published"].(*bool), fc.Args["sort"].(*string), fc.Args["order"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.MercariProduct)
	fc.Result = res
	return ec.marshalNMercariProduct2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariProductᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_mercariProducts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MercariProduct_id(ctx, field)
			case "productId":
				return ec.fieldContext_MercariProduct_productId(ctx, field)
			case "mercariId":
				return ec.fieldContext_MercariProduct_mercariId(ctx, field)
			case "name":
				return ec.fieldContext_MercariProduct_name(ctx, field)
			case "thumbnailUrl":
				return ec.fieldContext_MercariProduct_thumbnailUrl(ctx, field)
			case "price":
				return ec.fieldContext_MercariProduct_price(ctx, field)
			case "published":
				return ec.fieldContext_MercariProduct_published(ctx, field)
			case "boughtDate":
				return ec.fieldContext_MercariProduct_boughtDate(ctx, field)
			case "createdAt":
				return ec.fieldContext_MercariProduct_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MercariProduct_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MercariProduct", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Product_mercariProducts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Product_mercariCrawlSetting(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_mercariCrawlSetting(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Product().MercariCrawlSetting(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MercariCrawlSetting)
	fc.Result = res
	return ec.marshalNMercariCrawlSetting2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariCrawlSetting(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_mercariCrawlSetting(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MercariCrawlSetting_id(ctx, field)
			case "productId":
				return ec.fieldContext_MercariCrawlSetting_productId(ctx, field)
			case "keyword":
				return ec.fieldContext_MercariCrawlSetting_keyword(ctx, field)
			case "minPrice":
				return ec.fieldContext_MercariCrawlSetting_minPrice(ctx, field)
			case "maxPrice":
				return ec.fieldContext_MercariCrawlSetting_maxPrice(ctx, field)
			case "categoryId":
				return ec.fieldContext_MercariCrawlSetting_categoryId(ctx, field)
			case "enabled":
				return ec.fieldContext_MercariCrawlSetting_enabled(ctx, field)
			case "createdAt":
				return ec.fieldContext_MercariCrawlSetting_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MercariCrawlSetting_updatedAt(ctx, field)
			case "mercariCrawlSettingExcludeKeywords":
				return ec.fieldContext_MercariCrawlSetting_mercariCrawlSettingExcludeKeywords(ctx, field)
			case "mercariCrawlSettingExcludeProducts":
				return ec.fieldContext_MercariCrawlSetting_mercariCrawlSettingExcludeProducts(ctx, field)
			case "mercariCrawlSettingRequiredKeywords":
				return ec.fieldContext_MercariCrawlSetting_mercariCrawlSettingRequiredKeywords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MercariCrawlSetting", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_mercariDailyPurchaseSummaries(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_mercariDailyPurchaseSummaries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Product().MercariDailyPurchaseSummaries(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.MercariDailyPurchaseSummary)
	fc.Result = res
	return ec.marshalNMercariDailyPurchaseSummary2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariDailyPurchaseSummaryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_mercariDailyPurchaseSummaries(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MercariDailyPurchaseSummary_id(ctx, field)
			case "productId":
				return ec.fieldContext_MercariDailyPurchaseSummary_productId(ctx, field)
			case "averagePurchasePrice":
				return ec.fieldContext_MercariDailyPurchaseSummary_averagePurchasePrice(ctx, field)
			case "purchaseCount":
				return ec.fieldContext_MercariDailyPurchaseSummary_purchaseCount(ctx, field)
			case "date":
				return ec.fieldContext_MercariDailyPurchaseSummary_date(ctx, field)
			case "createdAt":
				return ec.fieldContext_MercariDailyPurchaseSummary_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MercariDailyPurchaseSummary_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MercariDailyPurchaseSummary", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_janparaCrawlSetting(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_janparaCrawlSetting(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Product().JanparaCrawlSetting(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.JanparaCrawlSetting)
	fc.Result = res
	return ec.marshalNJanparaCrawlSetting2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐJanparaCrawlSetting(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_janparaCrawlSetting(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_JanparaCrawlSetting_id(ctx, field)
			case "productId":
				return ec.fieldContext_JanparaCrawlSetting_productId(ctx, field)
			case "keyword":
				return ec.fieldContext_JanparaCrawlSetting_keyword(ctx, field)
			case "minPrice":
				return ec.fieldContext_JanparaCrawlSetting_minPrice(ctx, field)
			case "maxPrice":
				return ec.fieldContext_JanparaCrawlSetting_maxPrice(ctx, field)
			case "enabled":
				return ec.fieldContext_JanparaCrawlSetting_enabled(ctx, field)
			case "createdAt":
				return ec.fieldContext_JanparaCrawlSetting_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_JanparaCrawlSetting_updatedAt(ctx, field)
			case "janparaCrawlSettingExcludeKeywords":
				return ec.fieldContext_JanparaCrawlSetting_janparaCrawlSettingExcludeKeywords(ctx, field)
			case "janparaCrawlSettingExcludeProducts":
				return ec.fieldContext_JanparaCrawlSetting_janparaCrawlSettingExcludeProducts(ctx, field)
			case "janparaCrawlSettingRequiredKeywords":
				return ec.fieldContext_JanparaCrawlSetting_janparaCrawlSettingRequiredKeywords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JanparaCrawlSetting", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_iosysCrawlSetting(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_iosysCrawlSetting(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Product().IosysCrawlSetting(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.IosysCrawlSetting)
	fc.Result = res
	return ec.marshalNIosysCrawlSetting2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐIosysCrawlSetting(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_iosysCrawlSetting(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_IosysCrawlSetting_id(ctx, field)
			case "productId":
				return ec.fieldContext_IosysCrawlSetting_productId(ctx, field)
			case "keyword":
				return ec.fieldContext_IosysCrawlSetting_keyword(ctx, field)
			case "minPrice":
				return ec.fieldContext_IosysCrawlSetting_minPrice(ctx, field)
			case "maxPrice":
				return ec.fieldContext_IosysCrawlSetting_maxPrice(ctx, field)
			case "enabled":
				return ec.fieldContext_IosysCrawlSetting_enabled(ctx, field)
			case "createdAt":
				return ec.fieldContext_IosysCrawlSetting_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_IosysCrawlSetting_updatedAt(ctx, field)
			case "iosysCrawlSettingExcludeKeywords":
				return ec.fieldContext_IosysCrawlSetting_iosysCrawlSettingExcludeKeywords(ctx, field)
			case "iosysCrawlSettingExcludeProducts":
				return ec.fieldContext_IosysCrawlSetting_iosysCrawlSettingExcludeProducts(ctx, field)
			case "iosysCrawlSettingRequiredKeywords":
				return ec.fieldContext_IosysCrawlSetting_iosysCrawlSettingRequiredKeywords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type IosysCrawlSetting", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_pcKoubouCrawlSetting(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_pcKoubouCrawlSetting(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Product().PcKoubouCrawlSetting(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PcKoubouCrawlSetting)
	fc.Result = res
	return ec.marshalNPcKoubouCrawlSetting2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐPcKoubouCrawlSetting(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_pcKoubouCrawlSetting(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PcKoubouCrawlSetting_id(ctx, field)
			case "productId":
				return ec.fieldContext_PcKoubouCrawlSetting_productId(ctx, field)
			case "keyword":
				return ec.fieldContext_PcKoubouCrawlSetting_keyword(ctx, field)
			case "minPrice":
				return ec.fieldContext_PcKoubouCrawlSetting_minPrice(ctx, field)
			case "maxPrice":
				return ec.fieldContext_PcKoubouCrawlSetting_maxPrice(ctx, field)
			case "enabled":
				return ec.fieldContext_PcKoubouCrawlSetting_enabled(ctx, field)
			case "createdAt":
				return ec.fieldContext_PcKoubouCrawlSetting_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PcKoubouCrawlSetting_updatedAt(ctx, field)
			case "pcKoubouCrawlSettingExcludeKeywords":
				return ec.fieldContext_PcKoubouCrawlSetting_pcKoubouCrawlSettingExcludeKeywords(ctx, field)
			case "pcKoubouCrawlSettingExcludeProducts":
				return ec.fieldContext_PcKoubouCrawlSetting_pcKoubouCrawlSettingExcludeProducts(ctx, field)
			case "pcKoubouCrawlSettingRequiredKeywords":
				return ec.fieldContext_PcKoubouCrawlSetting_pcKoubouCrawlSettingRequiredKeywords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PcKoubouCrawlSetting", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_relatedProducts(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_relatedProducts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Product().RelatedProducts(rctx, obj, fc.Args["platformMask"].(string), fc.Args["page"].(*int), fc.Args["per"].(*int), fc.Args["sort"].(*string), fc.Args["order"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.RelatedProduct)
	fc.Result = res
	return ec.marshalNRelatedProduct2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐRelatedProductᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_relatedProducts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "platform":
				return ec.fieldContext_RelatedProduct_platform(ctx, field)
			case "productId":
				return ec.fieldContext_RelatedProduct_productId(ctx, field)
			case "externalId":
				return ec.fieldContext_RelatedProduct_externalId(ctx, field)
			case "name":
				return ec.fieldContext_RelatedProduct_name(ctx, field)
			case "thumbnailUrl":
				return ec.fieldContext_RelatedProduct_thumbnailUrl(ctx, field)
			case "price":
				return ec.fieldContext_RelatedProduct_price(ctx, field)
			case "buyoutPrice":
				return ec.fieldContext_RelatedProduct_buyoutPrice(ctx, field)
			case "published":
				return ec.fieldContext_RelatedProduct_published(ctx, field)
			case "boughtDate":
				return ec.fieldContext_RelatedProduct_boughtDate(ctx, field)
			case "endDate":
				return ec.fieldContext_RelatedProduct_endDate(ctx, field)
			case "createdAt":
				return ec.fieldContext_RelatedProduct_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_RelatedProduct_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RelatedProduct", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Product_relatedProducts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_product(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_product(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Product(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Product)
	fc.Result = res
	return ec.marshalNProduct2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐProduct(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_product(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Product_id(ctx, field)
			case "name":
				return ec.fieldContext_Product_name(ctx, field)
			case "yahooAuctionProducts":
				return ec.fieldContext_Product_yahooAuctionProducts(ctx, field)
			case "yahooAuctionCrawlSetting":
				return ec.fieldContext_Product_yahooAuctionCrawlSetting(ctx, field)
			case "yahooAuctionDailyPurchaseSummaries":
				return ec.fieldContext_Product_yahooAuctionDailyPurchaseSummaries(ctx, field)
			case "yahooFleamarketDailyPurchaseSummaries":
				return ec.fieldContext_Product_yahooFleamarketDailyPurchaseSummaries(ctx, field)
			case "mercariProducts":
				return ec.fieldContext_Product_mercariProducts(ctx, field)
			case "mercariCrawlSetting":
				return ec.fieldContext_Product_mercariCrawlSetting(ctx, field)
			case "mercariDailyPurchaseSummaries":
				return ec.fieldContext_Product_mercariDailyPurchaseSummaries(ctx, field)
			case "janparaCrawlSetting":
				return ec.fieldContext_Product_janparaCrawlSetting(ctx, field)
			case "iosysCrawlSetting":
				return ec.fieldContext_Product_iosysCrawlSetting(ctx, field)
			case "pcKoubouCrawlSetting":
				return ec.fieldContext_Product_pcKoubouCrawlSetting(ctx, field)
			case "relatedProducts":
				return ec.fieldContext_Product_relatedProducts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Product", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_product_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_products(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_products(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Products(rctx, fc.Args["id"].(*string), fc.Args["name"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Product)
	fc.Result = res
	return ec.marshalNProduct2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐProductᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_products(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Product_id(ctx, field)
			case "name":
				return ec.fieldContext_Product_name(ctx, field)
			case "yahooAuctionProducts":
				return ec.fieldContext_Product_yahooAuctionProducts(ctx, field)
			case "yahooAuctionCrawlSetting":
				return ec.fieldContext_Product_yahooAuctionCrawlSetting(ctx, field)
			case "yahooAuctionDailyPurchaseSummaries":
				return ec.fieldContext_Product_yahooAuctionDailyPurchaseSummaries(ctx, field)
			case "yahooFleamarketDailyPurchaseSummaries":
				return ec.fieldContext_Product_yahooFleamarketDailyPurchaseSummaries(ctx, field)
			case "mercariProducts":
				return ec.fieldContext_Product_mercariProducts(ctx, field)
			case "mercariCrawlSetting":
				return ec.fieldContext_Product_mercariCrawlSetting(ctx, field)
			case "mercariDailyPurchaseSummaries":
				return ec.fieldContext_Product_mercariDailyPurchaseSummaries(ctx, field)
			case "janparaCrawlSetting":
				return ec.fieldContext_Product_janparaCrawlSetting(ctx, field)
			case "iosysCrawlSetting":
				return ec.fieldContext_Product_iosysCrawlSetting(ctx, field)
			case "pcKoubouCrawlSetting":
				return ec.fieldContext_Product_pcKoubouCrawlSetting(ctx, field)
			case "relatedProducts":
				return ec.fieldContext_Product_relatedProducts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Product", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_products_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_node(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Node(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(model.Node)
	fc.Result = res
	return ec.marshalONode2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐNode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_node_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RelatedProduct_platform(ctx context.Context, field graphql.CollectedField, obj *model.RelatedProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RelatedProduct_platform(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Platform, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RelatedProduct_platform(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RelatedProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RelatedProduct_productId(ctx context.Context, field graphql.CollectedField, obj *model.RelatedProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RelatedProduct_productId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RelatedProduct_productId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RelatedProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RelatedProduct_externalId(ctx context.Context, field graphql.CollectedField, obj *model.RelatedProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RelatedProduct_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RelatedProduct_externalId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RelatedProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RelatedProduct_name(ctx context.Context, field graphql.CollectedField, obj *model.RelatedProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RelatedProduct_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RelatedProduct_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RelatedProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RelatedProduct_thumbnailUrl(ctx context.Context, field graphql.CollectedField, obj *model.RelatedProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RelatedProduct_thumbnailUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThumbnailURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RelatedProduct_thumbnailUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RelatedProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RelatedProduct_price(ctx context.Context, field graphql.CollectedField, obj *model.RelatedProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RelatedProduct_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RelatedProduct_price(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RelatedProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RelatedProduct_buyoutPrice(ctx context.Context, field graphql.CollectedField, obj *model.RelatedProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RelatedProduct_buyoutPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BuyoutPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RelatedProduct_buyoutPrice(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RelatedProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RelatedProduct_published(ctx context.Context, field graphql.CollectedField, obj *model.RelatedProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RelatedProduct_published(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Published, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RelatedProduct_published(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RelatedProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RelatedProduct_boughtDate(ctx context.Context, field graphql.CollectedField, obj *model.RelatedProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RelatedProduct_boughtDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BoughtDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RelatedProduct_boughtDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RelatedProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RelatedProduct_endDate(ctx context.Context, field graphql.CollectedField, obj *model.RelatedProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RelatedProduct_endDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RelatedProduct_endDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RelatedProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RelatedProduct_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.RelatedProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RelatedProduct_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RelatedProduct_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RelatedProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RelatedProduct_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.RelatedProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RelatedProduct_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RelatedProduct_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RelatedProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateIosysCrawlSettingExcludeKeywordResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.UpdateIosysCrawlSettingExcludeKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateIosysCrawlSettingExcludeKeywordResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateIosysCrawlSettingExcludeKeywordResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateIosysCrawlSettingExcludeKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateIosysCrawlSettingExcludeKeywordResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.UpdateIosysCrawlSettingExcludeKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateIosysCrawlSettingExcludeKeywordResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.UpdateIosysCrawlSettingExcludeKeywordResultErrors)
	fc.Result = res
	return ec.marshalNUpdateIosysCrawlSettingExcludeKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateIosysCrawlSettingExcludeKeywordResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateIosysCrawlSettingExcludeKeywordResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateIosysCrawlSettingExcludeKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UpdateIosysCrawlSettingExcludeKeywordResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateIosysCrawlSettingExcludeKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.UpdateIosysCrawlSettingExcludeKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateIosysCrawlSettingExcludeKeywordResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateIosysCrawlSettingExcludeKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateIosysCrawlSettingExcludeKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateIosysCrawlSettingExcludeKeywordResultSuccess_iosysCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField, obj *model.UpdateIosysCrawlSettingExcludeKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateIosysCrawlSettingExcludeKeywordResultSuccess_iosysCrawlSettingExcludeKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IosysCrawlSettingExcludeKeyword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.IosysCrawlSettingExcludeKeyword)
	fc.Result = res
	return ec.marshalNIosysCrawlSettingExcludeKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐIosysCrawlSettingExcludeKeyword(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateIosysCrawlSettingExcludeKeywordResultSuccess_iosysCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateIosysCrawlSettingExcludeKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_IosysCrawlSettingExcludeKeyword_id(ctx, field)
			case "iosysCrawlSettingId":
				return ec.fieldContext_IosysCrawlSettingExcludeKeyword_iosysCrawlSettingId(ctx, field)
			case "keyword":
				return ec.fieldContext_IosysCrawlSettingExcludeKeyword_keyword(ctx, field)
			case "createdAt":
				return ec.fieldContext_IosysCrawlSettingExcludeKeyword_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_IosysCrawlSettingExcludeKeyword_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type IosysCrawlSettingExcludeKeyword", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateIosysCrawlSettingExcludeKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.UpdateIosysCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateIosysCrawlSettingExcludeKeywordResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateIosysCrawlSettingExcludeKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateIosysCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateIosysCrawlSettingExcludeKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.UpdateIosysCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateIosysCrawlSettingExcludeKeywordResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateIosysCrawlSettingExcludeKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateIosysCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateIosysCrawlSettingExcludeKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.UpdateIosysCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateIosysCrawlSettingExcludeKeywordResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateIosysCrawlSettingExcludeKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateIosysCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateIosysCrawlSettingExcludeProductResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.UpdateIosysCrawlSettingExcludeProductResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateIosysCrawlSettingExcludeProductResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateIosysCrawlSettingExcludeProductResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateIosysCrawlSettingExcludeProductResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateIosysCrawlSettingExcludeProductResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.UpdateIosysCrawlSettingExcludeProductResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateIosysCrawlSettingExcludeProductResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.UpdateIosysCrawlSettingExcludeProductResultErrors)
	fc.Result = res
	return ec.marshalNUpdateIosysCrawlSettingExcludeProductResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateIosysCrawlSettingExcludeProductResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateIosysCrawlSettingExcludeProductResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateIosysCrawlSettingExcludeProductResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UpdateIosysCrawlSettingExcludeProductResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateIosysCrawlSettingExcludeProductResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.UpdateIosysCrawlSettingExcludeProductResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateIosysCrawlSettingExcludeProductResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateIosysCrawlSettingExcludeProductResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateIosysCrawlSettingExcludeProductResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateIosysCrawlSettingExcludeProductResultSuccess_iosysCrawlSettingExcludeProduct(ctx context.Context, field graphql.CollectedField, obj *model.UpdateIosysCrawlSettingExcludeProductResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateIosysCrawlSettingExcludeProductResultSuccess_iosysCrawlSettingExcludeProduct(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IosysCrawlSettingExcludeProduct, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.IosysCrawlSettingExcludeProduct)
	fc.Result = res
	return ec.marshalNIosysCrawlSettingExcludeProduct2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐIosysCrawlSettingExcludeProduct(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateIosysCrawlSettingExcludeProductResultSuccess_iosysCrawlSettingExcludeProduct(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateIosysCrawlSettingExcludeProductResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_IosysCrawlSettingExcludeProduct_id(ctx, field)
			case "iosysCrawlSettingId":
				return ec.fieldContext_IosysCrawlSettingExcludeProduct_iosysCrawlSettingId(ctx, field)
			case "externalId":
				return ec.fieldContext_IosysCrawlSettingExcludeProduct_externalId(ctx, field)
			case "createdAt":
				return ec.fieldContext_IosysCrawlSettingExcludeProduct_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_IosysCrawlSettingExcludeProduct_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type IosysCrawlSettingExcludeProduct", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateIosysCrawlSettingExcludeProductResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.UpdateIosysCrawlSettingExcludeProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateIosysCrawlSettingExcludeProductResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateIosysCrawlSettingExcludeProductResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateIosysCrawlSettingExcludeProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateIosysCrawlSettingExcludeProductResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.UpdateIosysCrawlSettingExcludeProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateIosysCrawlSettingExcludeProductResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateIosysCrawlSettingExcludeProductResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateIosysCrawlSettingExcludeProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateIosysCrawlSettingExcludeProductResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.UpdateIosysCrawlSettingExcludeProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateIosysCrawlSettingExcludeProductResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateIosysCrawlSettingExcludeProductResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateIosysCrawlSettingExcludeProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateIosysCrawlSettingRequiredKeywordResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.UpdateIosysCrawlSettingRequiredKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateIosysCrawlSettingRequiredKeywordResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateIosysCrawlSettingRequiredKeywordResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateIosysCrawlSettingRequiredKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateIosysCrawlSettingRequiredKeywordResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.UpdateIosysCrawlSettingRequiredKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateIosysCrawlSettingRequiredKeywordResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.UpdateIosysCrawlSettingRequiredKeywordResultErrors)
	fc.Result = res
	return ec.marshalNUpdateIosysCrawlSettingRequiredKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateIosysCrawlSettingRequiredKeywordResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateIosysCrawlSettingRequiredKeywordResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateIosysCrawlSettingRequiredKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UpdateIosysCrawlSettingRequiredKeywordResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateIosysCrawlSettingRequiredKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.UpdateIosysCrawlSettingRequiredKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateIosysCrawlSettingRequiredKeywordResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateIosysCrawlSettingRequiredKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateIosysCrawlSettingRequiredKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateIosysCrawlSettingRequiredKeywordResultSuccess_iosysCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField, obj *model.UpdateIosysCrawlSettingRequiredKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateIosysCrawlSettingRequiredKeywordResultSuccess_iosysCrawlSettingRequiredKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IosysCrawlSettingRequiredKeyword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.IosysCrawlSettingRequiredKeyword)
	fc.Result = res
	return ec.marshalNIosysCrawlSettingRequiredKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐIosysCrawlSettingRequiredKeyword(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateIosysCrawlSettingRequiredKeywordResultSuccess_iosysCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateIosysCrawlSettingRequiredKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_IosysCrawlSettingRequiredKeyword_id(ctx, field)
			case "iosysCrawlSettingId":
				return ec.fieldContext_IosysCrawlSettingRequiredKeyword_iosysCrawlSettingId(ctx, field)
			case "keyword":
				return ec.fieldContext_IosysCrawlSettingRequiredKeyword_keyword(ctx, field)
			case "createdAt":
				return ec.fieldContext_IosysCrawlSettingRequiredKeyword_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_IosysCrawlSettingRequiredKeyword_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type IosysCrawlSettingRequiredKeyword", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateIosysCrawlSettingRequiredKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.UpdateIosysCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateIosysCrawlSettingRequiredKeywordResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateIosysCrawlSettingRequiredKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateIosysCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateIosysCrawlSettingRequiredKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.UpdateIosysCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateIosysCrawlSettingRequiredKeywordResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateIosysCrawlSettingRequiredKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateIosysCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateIosysCrawlSettingRequiredKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.UpdateIosysCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateIosysCrawlSettingRequiredKeywordResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateIosysCrawlSettingRequiredKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateIosysCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateJanparaCrawlSettingExcludeKeywordResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.UpdateJanparaCrawlSettingExcludeKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateJanparaCrawlSettingExcludeKeywordResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateJanparaCrawlSettingExcludeKeywordResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateJanparaCrawlSettingExcludeKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateJanparaCrawlSettingExcludeKeywordResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.UpdateJanparaCrawlSettingExcludeKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateJanparaCrawlSettingExcludeKeywordResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.UpdateJanparaCrawlSettingExcludeKeywordResultErrors)
	fc.Result = res
	return ec.marshalNUpdateJanparaCrawlSettingExcludeKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateJanparaCrawlSettingExcludeKeywordResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateJanparaCrawlSettingExcludeKeywordResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateJanparaCrawlSettingExcludeKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UpdateJanparaCrawlSettingExcludeKeywordResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateJanparaCrawlSettingExcludeKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.UpdateJanparaCrawlSettingExcludeKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateJanparaCrawlSettingExcludeKeywordResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateJanparaCrawlSettingExcludeKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateJanparaCrawlSettingExcludeKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateJanparaCrawlSettingExcludeKeywordResultSuccess_janparaCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField, obj *model.UpdateJanparaCrawlSettingExcludeKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateJanparaCrawlSettingExcludeKeywordResultSuccess_janparaCrawlSettingExcludeKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JanparaCrawlSettingExcludeKeyword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.JanparaCrawlSettingExcludeKeyword)
	fc.Result = res
	return ec.marshalNJanparaCrawlSettingExcludeKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐJanparaCrawlSettingExcludeKeyword(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateJanparaCrawlSettingExcludeKeywordResultSuccess_janparaCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateJanparaCrawlSettingExcludeKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_JanparaCrawlSettingExcludeKeyword_id(ctx, field)
			case "janparaCrawlSettingId":
				return ec.fieldContext_JanparaCrawlSettingExcludeKeyword_janparaCrawlSettingId(ctx, field)
			case "keyword":
				return ec.fieldContext_JanparaCrawlSettingExcludeKeyword_keyword(ctx, field)
			case "createdAt":
				return ec.fieldContext_JanparaCrawlSettingExcludeKeyword_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_JanparaCrawlSettingExcludeKeyword_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JanparaCrawlSettingExcludeKeyword", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateJanparaCrawlSettingExcludeKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.UpdateJanparaCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateJanparaCrawlSettingExcludeKeywordResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateJanparaCrawlSettingExcludeKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateJanparaCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateJanparaCrawlSettingExcludeKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.UpdateJanparaCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateJanparaCrawlSettingExcludeKeywordResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateJanparaCrawlSettingExcludeKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateJanparaCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateJanparaCrawlSettingExcludeKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.UpdateJanparaCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateJanparaCrawlSettingExcludeKeywordResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateJanparaCrawlSettingExcludeKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateJanparaCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateJanparaCrawlSettingExcludeProductResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.UpdateJanparaCrawlSettingExcludeProductResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateJanparaCrawlSettingExcludeProductResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateJanparaCrawlSettingExcludeProductResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateJanparaCrawlSettingExcludeProductResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateJanparaCrawlSettingExcludeProductResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.UpdateJanparaCrawlSettingExcludeProductResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateJanparaCrawlSettingExcludeProductResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.UpdateJanparaCrawlSettingExcludeProductResultErrors)
	fc.Result = res
	return ec.marshalNUpdateJanparaCrawlSettingExcludeProductResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateJanparaCrawlSettingExcludeProductResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateJanparaCrawlSettingExcludeProductResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateJanparaCrawlSettingExcludeProductResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UpdateJanparaCrawlSettingExcludeProductResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateJanparaCrawlSettingExcludeProductResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.UpdateJanparaCrawlSettingExcludeProductResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateJanparaCrawlSettingExcludeProductResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateJanparaCrawlSettingExcludeProductResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateJanparaCrawlSettingExcludeProductResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateJanparaCrawlSettingExcludeProductResultSuccess_janparaCrawlSettingExcludeProduct(ctx context.Context, field graphql.CollectedField, obj *model.UpdateJanparaCrawlSettingExcludeProductResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateJanparaCrawlSettingExcludeProductResultSuccess_janparaCrawlSettingExcludeProduct(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JanparaCrawlSettingExcludeProduct, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.JanparaCrawlSettingExcludeProduct)
	fc.Result = res
	return ec.marshalNJanparaCrawlSettingExcludeProduct2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐJanparaCrawlSettingExcludeProduct(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateJanparaCrawlSettingExcludeProductResultSuccess_janparaCrawlSettingExcludeProduct(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateJanparaCrawlSettingExcludeProductResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_JanparaCrawlSettingExcludeProduct_id(ctx, field)
			case "janparaCrawlSettingId":
				return ec.fieldContext_JanparaCrawlSettingExcludeProduct_janparaCrawlSettingId(ctx, field)
			case "externalId":
				return ec.fieldContext_JanparaCrawlSettingExcludeProduct_externalId(ctx, field)
			case "createdAt":
				return ec.fieldContext_JanparaCrawlSettingExcludeProduct_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_JanparaCrawlSettingExcludeProduct_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JanparaCrawlSettingExcludeProduct", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateJanparaCrawlSettingExcludeProductResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.UpdateJanparaCrawlSettingExcludeProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateJanparaCrawlSettingExcludeProductResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateJanparaCrawlSettingExcludeProductResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateJanparaCrawlSettingExcludeProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateJanparaCrawlSettingExcludeProductResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.UpdateJanparaCrawlSettingExcludeProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateJanparaCrawlSettingExcludeProductResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateJanparaCrawlSettingExcludeProductResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateJanparaCrawlSettingExcludeProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateJanparaCrawlSettingExcludeProductResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.UpdateJanparaCrawlSettingExcludeProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateJanparaCrawlSettingExcludeProductResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateJanparaCrawlSettingExcludeProductResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateJanparaCrawlSettingExcludeProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateJanparaCrawlSettingRequiredKeywordResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.UpdateJanparaCrawlSettingRequiredKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateJanparaCrawlSettingRequiredKeywordResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateJanparaCrawlSettingRequiredKeywordResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateJanparaCrawlSettingRequiredKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateJanparaCrawlSettingRequiredKeywordResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.UpdateJanparaCrawlSettingRequiredKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateJanparaCrawlSettingRequiredKeywordResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.UpdateJanparaCrawlSettingRequiredKeywordResultErrors)
	fc.Result = res
	return ec.marshalNUpdateJanparaCrawlSettingRequiredKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateJanparaCrawlSettingRequiredKeywordResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateJanparaCrawlSettingRequiredKeywordResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateJanparaCrawlSettingRequiredKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UpdateJanparaCrawlSettingRequiredKeywordResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateJanparaCrawlSettingRequiredKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.UpdateJanparaCrawlSettingRequiredKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateJanparaCrawlSettingRequiredKeywordResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateJanparaCrawlSettingRequiredKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateJanparaCrawlSettingRequiredKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateJanparaCrawlSettingRequiredKeywordResultSuccess_janparaCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField, obj *model.UpdateJanparaCrawlSettingRequiredKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateJanparaCrawlSettingRequiredKeywordResultSuccess_janparaCrawlSettingRequiredKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JanparaCrawlSettingRequiredKeyword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.JanparaCrawlSettingRequiredKeyword)
	fc.Result = res
	return ec.marshalNJanparaCrawlSettingRequiredKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐJanparaCrawlSettingRequiredKeyword(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateJanparaCrawlSettingRequiredKeywordResultSuccess_janparaCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateJanparaCrawlSettingRequiredKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_JanparaCrawlSettingRequiredKeyword_id(ctx, field)
			case "janparaCrawlSettingId":
				return ec.fieldContext_JanparaCrawlSettingRequiredKeyword_janparaCrawlSettingId(ctx, field)
			case "keyword":
				return ec.fieldContext_JanparaCrawlSettingRequiredKeyword_keyword(ctx, field)
			case "createdAt":
				return ec.fieldContext_JanparaCrawlSettingRequiredKeyword_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_JanparaCrawlSettingRequiredKeyword_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JanparaCrawlSettingRequiredKeyword", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateJanparaCrawlSettingRequiredKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.UpdateJanparaCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateJanparaCrawlSettingRequiredKeywordResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateJanparaCrawlSettingRequiredKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateJanparaCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateJanparaCrawlSettingRequiredKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.UpdateJanparaCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateJanparaCrawlSettingRequiredKeywordResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateJanparaCrawlSettingRequiredKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateJanparaCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateJanparaCrawlSettingRequiredKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.UpdateJanparaCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateJanparaCrawlSettingRequiredKeywordResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateJanparaCrawlSettingRequiredKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateJanparaCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateMercariCrawlSettingExcludeKeywordResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.UpdateMercariCrawlSettingExcludeKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateMercariCrawlSettingExcludeKeywordResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateMercariCrawlSettingExcludeKeywordResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateMercariCrawlSettingExcludeKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateMercariCrawlSettingExcludeKeywordResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.UpdateMercariCrawlSettingExcludeKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateMercariCrawlSettingExcludeKeywordResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.UpdateMercariCrawlSettingExcludeKeywordResultErrors)
	fc.Result = res
	return ec.marshalNUpdateMercariCrawlSettingExcludeKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateMercariCrawlSettingExcludeKeywordResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateMercariCrawlSettingExcludeKeywordResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateMercariCrawlSettingExcludeKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UpdateMercariCrawlSettingExcludeKeywordResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateMercariCrawlSettingExcludeKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.UpdateMercariCrawlSettingExcludeKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateMercariCrawlSettingExcludeKeywordResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateMercariCrawlSettingExcludeKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateMercariCrawlSettingExcludeKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateMercariCrawlSettingExcludeKeywordResultSuccess_mercariCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField, obj *model.UpdateMercariCrawlSettingExcludeKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateMercariCrawlSettingExcludeKeywordResultSuccess_mercariCrawlSettingExcludeKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MercariCrawlSettingExcludeKeyword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MercariCrawlSettingExcludeKeyword)
	fc.Result = res
	return ec.marshalNMercariCrawlSettingExcludeKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariCrawlSettingExcludeKeyword(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateMercariCrawlSettingExcludeKeywordResultSuccess_mercariCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateMercariCrawlSettingExcludeKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MercariCrawlSettingExcludeKeyword_id(ctx, field)
			case "mercariCrawlSettingId":
				return ec.fieldContext_MercariCrawlSettingExcludeKeyword_mercariCrawlSettingId(ctx, field)
			case "keyword":
				return ec.fieldContext_MercariCrawlSettingExcludeKeyword_keyword(ctx, field)
			case "createdAt":
				return ec.fieldContext_MercariCrawlSettingExcludeKeyword_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MercariCrawlSettingExcludeKeyword_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MercariCrawlSettingExcludeKeyword", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateMercariCrawlSettingExcludeProductResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.UpdateMercariCrawlSettingExcludeProductResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateMercariCrawlSettingExcludeProductResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateMercariCrawlSettingExcludeProductResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateMercariCrawlSettingExcludeProductResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateMercariCrawlSettingExcludeProductResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.UpdateMercariCrawlSettingExcludeProductResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateMercariCrawlSettingExcludeProductResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.UpdateMercariCrawlSettingExcludeProductResultErrors)
	fc.Result = res
	return ec.marshalNUpdateMercariCrawlSettingExcludeProductResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateMercariCrawlSettingExcludeProductResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateMercariCrawlSettingExcludeProductResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateMercariCrawlSettingExcludeProductResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UpdateMercariCrawlSettingExcludeProductResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateMercariCrawlSettingExcludeProductResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.UpdateMercariCrawlSettingExcludeProductResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateMercariCrawlSettingExcludeProductResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateMercariCrawlSettingExcludeProductResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateMercariCrawlSettingExcludeProductResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateMercariCrawlSettingExcludeProductResultSuccess_mercariCrawlSettingExcludeProduct(ctx context.Context, field graphql.CollectedField, obj *model.UpdateMercariCrawlSettingExcludeProductResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateMercariCrawlSettingExcludeProductResultSuccess_mercariCrawlSettingExcludeProduct(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MercariCrawlSettingExcludeProduct, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MercariCrawlSettingExcludeProduct)
	fc.Result = res
	return ec.marshalNMercariCrawlSettingExcludeProduct2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariCrawlSettingExcludeProduct(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateMercariCrawlSettingExcludeProductResultSuccess_mercariCrawlSettingExcludeProduct(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateMercariCrawlSettingExcludeProductResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MercariCrawlSettingExcludeProduct_id(ctx, field)
			case "mercariCrawlSettingId":
				return ec.fieldContext_MercariCrawlSettingExcludeProduct_mercariCrawlSettingId(ctx, field)
			case "externalId":
				return ec.fieldContext_MercariCrawlSettingExcludeProduct_externalId(ctx, field)
			case "createdAt":
				return ec.fieldContext_MercariCrawlSettingExcludeProduct_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MercariCrawlSettingExcludeProduct_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MercariCrawlSettingExcludeProduct", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateMercariCrawlSettingExcludeProductResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.UpdateMercariCrawlSettingExcludeProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateMercariCrawlSettingExcludeProductResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateMercariCrawlSettingExcludeProductResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateMercariCrawlSettingExcludeProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateMercariCrawlSettingExcludeProductResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.UpdateMercariCrawlSettingExcludeProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateMercariCrawlSettingExcludeProductResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateMercariCrawlSettingExcludeProductResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateMercariCrawlSettingExcludeProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateMercariCrawlSettingExcludeProductResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.UpdateMercariCrawlSettingExcludeProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateMercariCrawlSettingExcludeProductResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateMercariCrawlSettingExcludeProductResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateMercariCrawlSettingExcludeProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateMercariCrawlSettingRequiredKeywordResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.UpdateMercariCrawlSettingRequiredKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateMercariCrawlSettingRequiredKeywordResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateMercariCrawlSettingRequiredKeywordResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateMercariCrawlSettingRequiredKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateMercariCrawlSettingRequiredKeywordResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.UpdateMercariCrawlSettingRequiredKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateMercariCrawlSettingRequiredKeywordResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.UpdateMercariCrawlSettingRequiredKeywordResultErrors)
	fc.Result = res
	return ec.marshalNUpdateMercariCrawlSettingRequiredKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateMercariCrawlSettingRequiredKeywordResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateMercariCrawlSettingRequiredKeywordResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateMercariCrawlSettingRequiredKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UpdateMercariCrawlSettingRequiredKeywordResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateMercariCrawlSettingRequiredKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.UpdateMercariCrawlSettingRequiredKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateMercariCrawlSettingRequiredKeywordResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateMercariCrawlSettingRequiredKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateMercariCrawlSettingRequiredKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateMercariCrawlSettingRequiredKeywordResultSuccess_mercariCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField, obj *model.UpdateMercariCrawlSettingRequiredKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateMercariCrawlSettingRequiredKeywordResultSuccess_mercariCrawlSettingRequiredKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MercariCrawlSettingRequiredKeyword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MercariCrawlSettingRequiredKeyword)
	fc.Result = res
	return ec.marshalNMercariCrawlSettingRequiredKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariCrawlSettingRequiredKeyword(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateMercariCrawlSettingRequiredKeywordResultSuccess_mercariCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateMercariCrawlSettingRequiredKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MercariCrawlSettingRequiredKeyword_id(ctx, field)
			case "mercariCrawlSettingId":
				return ec.fieldContext_MercariCrawlSettingRequiredKeyword_mercariCrawlSettingId(ctx, field)
			case "keyword":
				return ec.fieldContext_MercariCrawlSettingRequiredKeyword_keyword(ctx, field)
			case "createdAt":
				return ec.fieldContext_MercariCrawlSettingRequiredKeyword_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MercariCrawlSettingRequiredKeyword_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MercariCrawlSettingRequiredKeyword", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdatePcKoubouCrawlSettingExcludeKeywordResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.UpdatePcKoubouCrawlSettingExcludeKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdatePcKoubouCrawlSettingExcludeKeywordResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdatePcKoubouCrawlSettingExcludeKeywordResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdatePcKoubouCrawlSettingExcludeKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdatePcKoubouCrawlSettingExcludeKeywordResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.UpdatePcKoubouCrawlSettingExcludeKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdatePcKoubouCrawlSettingExcludeKeywordResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.UpdatePcKoubouCrawlSettingExcludeKeywordResultErrors)
	fc.Result = res
	return ec.marshalNUpdatePcKoubouCrawlSettingExcludeKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdatePcKoubouCrawlSettingExcludeKeywordResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdatePcKoubouCrawlSettingExcludeKeywordResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdatePcKoubouCrawlSettingExcludeKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UpdatePcKoubouCrawlSettingExcludeKeywordResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdatePcKoubouCrawlSettingExcludeKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.UpdatePcKoubouCrawlSettingExcludeKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdatePcKoubouCrawlSettingExcludeKeywordResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdatePcKoubouCrawlSettingExcludeKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdatePcKoubouCrawlSettingExcludeKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdatePcKoubouCrawlSettingExcludeKeywordResultSuccess_pcKoubouCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField, obj *model.UpdatePcKoubouCrawlSettingExcludeKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdatePcKoubouCrawlSettingExcludeKeywordResultSuccess_pcKoubouCrawlSettingExcludeKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PcKoubouCrawlSettingExcludeKeyword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PcKoubouCrawlSettingExcludeKeyword)
	fc.Result = res
	return ec.marshalNPcKoubouCrawlSettingExcludeKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐPcKoubouCrawlSettingExcludeKeyword(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdatePcKoubouCrawlSettingExcludeKeywordResultSuccess_pcKoubouCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdatePcKoubouCrawlSettingExcludeKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PcKoubouCrawlSettingExcludeKeyword_id(ctx, field)
			case "pcKoubouCrawlSettingId":
				return ec.fieldContext_PcKoubouCrawlSettingExcludeKeyword_pcKoubouCrawlSettingId(ctx, field)
			case "keyword":
				return ec.fieldContext_PcKoubouCrawlSettingExcludeKeyword_keyword(ctx, field)
			case "createdAt":
				return ec.fieldContext_PcKoubouCrawlSettingExcludeKeyword_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PcKoubouCrawlSettingExcludeKeyword_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PcKoubouCrawlSettingExcludeKeyword", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.UpdatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.UpdatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.UpdatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdatePcKoubouCrawlSettingExcludeProductResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.UpdatePcKoubouCrawlSettingExcludeProductResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdatePcKoubouCrawlSettingExcludeProductResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdatePcKoubouCrawlSettingExcludeProductResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdatePcKoubouCrawlSettingExcludeProductResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdatePcKoubouCrawlSettingExcludeProductResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.UpdatePcKoubouCrawlSettingExcludeProductResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdatePcKoubouCrawlSettingExcludeProductResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.UpdatePcKoubouCrawlSettingExcludeProductResultErrors)
	fc.Result = res
	return ec.marshalNUpdatePcKoubouCrawlSettingExcludeProductResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdatePcKoubouCrawlSettingExcludeProductResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdatePcKoubouCrawlSettingExcludeProductResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdatePcKoubouCrawlSettingExcludeProductResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UpdatePcKoubouCrawlSettingExcludeProductResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdatePcKoubouCrawlSettingExcludeProductResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.UpdatePcKoubouCrawlSettingExcludeProductResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdatePcKoubouCrawlSettingExcludeProductResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdatePcKoubouCrawlSettingExcludeProductResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdatePcKoubouCrawlSettingExcludeProductResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdatePcKoubouCrawlSettingExcludeProductResultSuccess_pcKoubouCrawlSettingExcludeProduct(ctx context.Context, field graphql.CollectedField, obj *model.UpdatePcKoubouCrawlSettingExcludeProductResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdatePcKoubouCrawlSettingExcludeProductResultSuccess_pcKoubouCrawlSettingExcludeProduct(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PcKoubouCrawlSettingExcludeProduct, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PcKoubouCrawlSettingExcludeProduct)
	fc.Result = res
	return ec.marshalNPcKoubouCrawlSettingExcludeProduct2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐPcKoubouCrawlSettingExcludeProduct(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdatePcKoubouCrawlSettingExcludeProductResultSuccess_pcKoubouCrawlSettingExcludeProduct(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdatePcKoubouCrawlSettingExcludeProductResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PcKoubouCrawlSettingExcludeProduct_id(ctx, field)
			case "pcKoubouCrawlSettingId":
				return ec.fieldContext_PcKoubouCrawlSettingExcludeProduct_pcKoubouCrawlSettingId(ctx, field)
			case "externalId":
				return ec.fieldContext_PcKoubouCrawlSettingExcludeProduct_externalId(ctx, field)
			case "createdAt":
				return ec.fieldContext_PcKoubouCrawlSettingExcludeProduct_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PcKoubouCrawlSettingExcludeProduct_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PcKoubouCrawlSettingExcludeProduct", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdatePcKoubouCrawlSettingExcludeProductResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.UpdatePcKoubouCrawlSettingExcludeProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdatePcKoubouCrawlSettingExcludeProductResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdatePcKoubouCrawlSettingExcludeProductResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdatePcKoubouCrawlSettingExcludeProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdatePcKoubouCrawlSettingExcludeProductResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.UpdatePcKoubouCrawlSettingExcludeProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdatePcKoubouCrawlSettingExcludeProductResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdatePcKoubouCrawlSettingExcludeProductResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdatePcKoubouCrawlSettingExcludeProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdatePcKoubouCrawlSettingExcludeProductResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.UpdatePcKoubouCrawlSettingExcludeProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdatePcKoubouCrawlSettingExcludeProductResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdatePcKoubouCrawlSettingExcludeProductResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdatePcKoubouCrawlSettingExcludeProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdatePcKoubouCrawlSettingRequiredKeywordResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.UpdatePcKoubouCrawlSettingRequiredKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdatePcKoubouCrawlSettingRequiredKeywordResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdatePcKoubouCrawlSettingRequiredKeywordResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdatePcKoubouCrawlSettingRequiredKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdatePcKoubouCrawlSettingRequiredKeywordResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.UpdatePcKoubouCrawlSettingRequiredKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdatePcKoubouCrawlSettingRequiredKeywordResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.UpdatePcKoubouCrawlSettingRequiredKeywordResultErrors)
	fc.Result = res
	return ec.marshalNUpdatePcKoubouCrawlSettingRequiredKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdatePcKoubouCrawlSettingRequiredKeywordResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdatePcKoubouCrawlSettingRequiredKeywordResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdatePcKoubouCrawlSettingRequiredKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UpdatePcKoubouCrawlSettingRequiredKeywordResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdatePcKoubouCrawlSettingRequiredKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.UpdatePcKoubouCrawlSettingRequiredKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdatePcKoubouCrawlSettingRequiredKeywordResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdatePcKoubouCrawlSettingRequiredKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdatePcKoubouCrawlSettingRequiredKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdatePcKoubouCrawlSettingRequiredKeywordResultSuccess_pcKoubouCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField, obj *model.UpdatePcKoubouCrawlSettingRequiredKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdatePcKoubouCrawlSettingRequiredKeywordResultSuccess_pcKoubouCrawlSettingRequiredKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PcKoubouCrawlSettingRequiredKeyword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PcKoubouCrawlSettingRequiredKeyword)
	fc.Result = res
	return ec.marshalNPcKoubouCrawlSettingRequiredKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐPcKoubouCrawlSettingRequiredKeyword(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdatePcKoubouCrawlSettingRequiredKeywordResultSuccess_pcKoubouCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdatePcKoubouCrawlSettingRequiredKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PcKoubouCrawlSettingRequiredKeyword_id(ctx, field)
			case "pcKoubouCrawlSettingId":
				return ec.fieldContext_PcKoubouCrawlSettingRequiredKeyword_pcKoubouCrawlSettingId(ctx, field)
			case "keyword":
				return ec.fieldContext_PcKoubouCrawlSettingRequiredKeyword_keyword(ctx, field)
			case "createdAt":
				return ec.fieldContext_PcKoubouCrawlSettingRequiredKeyword_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PcKoubouCrawlSettingRequiredKeyword_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PcKoubouCrawlSettingRequiredKeyword", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.UpdatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.UpdatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.UpdatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateProductResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.UpdateProductResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateProductResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateProductResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateProductResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateProductResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.UpdateProductResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateProductResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.UpdateProductResultErrors)
	fc.Result = res
	return ec.marshalNUpdateProductResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateProductResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateProductResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateProductResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UpdateProductResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateProductResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.UpdateProductResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateProductResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateProductResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateProductResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateProductResultSuccess_product(ctx context.Context, field graphql.CollectedField, obj *model.UpdateProductResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateProductResultSuccess_product(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Product, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Product)
	fc.Result = res
	return ec.marshalNProduct2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐProduct(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateProductResultSuccess_product(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateProductResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Product_id(ctx, field)
			case "name":
				return ec.fieldContext_Product_name(ctx, field)
			case "yahooAuctionProducts":
				return ec.fieldContext_Product_yahooAuctionProducts(ctx, field)
			case "yahooAuctionCrawlSetting":
				return ec.fieldContext_Product_yahooAuctionCrawlSetting(ctx, field)
			case "yahooAuctionDailyPurchaseSummaries":
				return ec.fieldContext_Product_yahooAuctionDailyPurchaseSummaries(ctx, field)
			case "yahooFleamarketDailyPurchaseSummaries":
				return ec.fieldContext_Product_yahooFleamarketDailyPurchaseSummaries(ctx, field)
			case "mercariProducts":
				return ec.fieldContext_Product_mercariProducts(ctx, field)
			case "mercariCrawlSetting":
				return ec.fieldContext_Product_mercariCrawlSetting(ctx, field)
			case "mercariDailyPurchaseSummaries":
				return ec.fieldContext_Product_mercariDailyPurchaseSummaries(ctx, field)
			case "janparaCrawlSetting":
				return ec.fieldContext_Product_janparaCrawlSetting(ctx, field)
			case "iosysCrawlSetting":
				return ec.fieldContext_Product_iosysCrawlSetting(ctx, field)
			case "pcKoubouCrawlSetting":
				return ec.fieldContext_Product_pcKoubouCrawlSetting(ctx, field)
			case "relatedProducts":
				return ec.fieldContext_Product_relatedProducts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Product", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateProductResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.UpdateProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateProductResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateProductResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateProductResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.UpdateProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateProductResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateProductResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateProductResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.UpdateProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateProductResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateProductResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingExcludeKeywordResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.UpdateYahooAuctionCrawlSettingExcludeKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateYahooAuctionCrawlSettingExcludeKeywordResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateYahooAuctionCrawlSettingExcludeKeywordResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateYahooAuctionCrawlSettingExcludeKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingExcludeKeywordResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.UpdateYahooAuctionCrawlSettingExcludeKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateYahooAuctionCrawlSettingExcludeKeywordResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.UpdateYahooAuctionCrawlSettingExcludeKeywordResultErrors)
	fc.Result = res
	return ec.marshalNUpdateYahooAuctionCrawlSettingExcludeKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateYahooAuctionCrawlSettingExcludeKeywordResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateYahooAuctionCrawlSettingExcludeKeywordResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateYahooAuctionCrawlSettingExcludeKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UpdateYahooAuctionCrawlSettingExcludeKeywordResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess_yahooAuctionCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField, obj *model.UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess_yahooAuctionCrawlSettingExcludeKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YahooAuctionCrawlSettingExcludeKeyword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.YahooAuctionCrawlSettingExcludeKeyword)
	fc.Result = res
	return ec.marshalNYahooAuctionCrawlSettingExcludeKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionCrawlSettingExcludeKeyword(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess_yahooAuctionCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_YahooAuctionCrawlSettingExcludeKeyword_id(ctx, field)
			case "yahooAuctionCrawlSettingId":
				return ec.fieldContext_YahooAuctionCrawlSettingExcludeKeyword_yahooAuctionCrawlSettingId(ctx, field)
			case "keyword":
				return ec.fieldContext_YahooAuctionCrawlSettingExcludeKeyword_keyword(ctx, field)
			case "createdAt":
				return ec.fieldContext_YahooAuctionCrawlSettingExcludeKeyword_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_YahooAuctionCrawlSettingExcludeKeyword_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type YahooAuctionCrawlSettingExcludeKeyword", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingExcludeProductResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.UpdateYahooAuctionCrawlSettingExcludeProductResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateYahooAuctionCrawlSettingExcludeProductResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateYahooAuctionCrawlSettingExcludeProductResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateYahooAuctionCrawlSettingExcludeProductResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingExcludeProductResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.UpdateYahooAuctionCrawlSettingExcludeProductResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateYahooAuctionCrawlSettingExcludeProductResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.UpdateYahooAuctionCrawlSettingExcludeProductResultErrors)
	fc.Result = res
	return ec.marshalNUpdateYahooAuctionCrawlSettingExcludeProductResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateYahooAuctionCrawlSettingExcludeProductResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateYahooAuctionCrawlSettingExcludeProductResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateYahooAuctionCrawlSettingExcludeProductResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UpdateYahooAuctionCrawlSettingExcludeProductResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingExcludeProductResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.UpdateYahooAuctionCrawlSettingExcludeProductResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateYahooAuctionCrawlSettingExcludeProductResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateYahooAuctionCrawlSettingExcludeProductResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateYahooAuctionCrawlSettingExcludeProductResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingExcludeProductResultSuccess_yahooAuctionCrawlSettingExcludeProduct(ctx context.Context, field graphql.CollectedField, obj *model.UpdateYahooAuctionCrawlSettingExcludeProductResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateYahooAuctionCrawlSettingExcludeProductResultSuccess_yahooAuctionCrawlSettingExcludeProduct(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YahooAuctionCrawlSettingExcludeProduct, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.YahooAuctionCrawlSettingExcludeProduct)
	fc.Result = res
	return ec.marshalNYahooAuctionCrawlSettingExcludeProduct2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionCrawlSettingExcludeProduct(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateYahooAuctionCrawlSettingExcludeProductResultSuccess_yahooAuctionCrawlSettingExcludeProduct(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateYahooAuctionCrawlSettingExcludeProductResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_YahooAuctionCrawlSettingExcludeProduct_id(ctx, field)
			case "yahooAuctionCrawlSettingId":
				return ec.fieldContext_YahooAuctionCrawlSettingExcludeProduct_yahooAuctionCrawlSettingId(ctx, field)
			case "externalId":
				return ec.fieldContext_YahooAuctionCrawlSettingExcludeProduct_externalId(ctx, field)
			case "createdAt":
				return ec.fieldContext_YahooAuctionCrawlSettingExcludeProduct_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_YahooAuctionCrawlSettingExcludeProduct_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type YahooAuctionCrawlSettingExcludeProduct", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingExcludeProductResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.UpdateYahooAuctionCrawlSettingExcludeProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateYahooAuctionCrawlSettingExcludeProductResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateYahooAuctionCrawlSettingExcludeProductResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateYahooAuctionCrawlSettingExcludeProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingExcludeProductResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.UpdateYahooAuctionCrawlSettingExcludeProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateYahooAuctionCrawlSettingExcludeProductResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateYahooAuctionCrawlSettingExcludeProductResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateYahooAuctionCrawlSettingExcludeProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingExcludeProductResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.UpdateYahooAuctionCrawlSettingExcludeProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateYahooAuctionCrawlSettingExcludeProductResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateYahooAuctionCrawlSettingExcludeProductResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateYahooAuctionCrawlSettingExcludeProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingRequiredKeywordResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.UpdateYahooAuctionCrawlSettingRequiredKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateYahooAuctionCrawlSettingRequiredKeywordResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateYahooAuctionCrawlSettingRequiredKeywordResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateYahooAuctionCrawlSettingRequiredKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingRequiredKeywordResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.UpdateYahooAuctionCrawlSettingRequiredKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateYahooAuctionCrawlSettingRequiredKeywordResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.UpdateYahooAuctionCrawlSettingRequiredKeywordResultErrors)
	fc.Result = res
	return ec.marshalNUpdateYahooAuctionCrawlSettingRequiredKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateYahooAuctionCrawlSettingRequiredKeywordResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateYahooAuctionCrawlSettingRequiredKeywordResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateYahooAuctionCrawlSettingRequiredKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UpdateYahooAuctionCrawlSettingRequiredKeywordResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess_yahooAuctionCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField, obj *model.UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess_yahooAuctionCrawlSettingRequiredKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YahooAuctionCrawlSettingRequiredKeyword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.YahooAuctionCrawlSettingRequiredKeyword)
	fc.Result = res
	return ec.marshalNYahooAuctionCrawlSettingRequiredKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionCrawlSettingRequiredKeyword(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess_yahooAuctionCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_YahooAuctionCrawlSettingRequiredKeyword_id(ctx, field)
			case "yahooAuctionCrawlSettingId":
				return ec.fieldContext_YahooAuctionCrawlSettingRequiredKeyword_yahooAuctionCrawlSettingId(ctx, field)
			case "keyword":
				return ec.fieldContext_YahooAuctionCrawlSettingRequiredKeyword_keyword(ctx, field)
			case "createdAt":
				return ec.fieldContext_YahooAuctionCrawlSettingRequiredKeyword_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_YahooAuctionCrawlSettingRequiredKeyword_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type YahooAuctionCrawlSettingRequiredKeyword", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionCrawlSetting_id(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionCrawlSetting_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionCrawlSetting_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionCrawlSetting_productId(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionCrawlSetting_productId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionCrawlSetting_productId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionCrawlSetting_keyword(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionCrawlSetting_keyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Keyword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionCrawlSetting_keyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionCrawlSetting_minPrice(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionCrawlSetting_minPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionCrawlSetting_minPrice(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionCrawlSetting_maxPrice(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionCrawlSetting_maxPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionCrawlSetting_maxPrice(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionCrawlSetting_categoryId(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionCrawlSetting_categoryId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CategoryID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionCrawlSetting_categoryId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionCrawlSetting_enabled(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionCrawlSetting_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionCrawlSetting_enabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionCrawlSetting_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionCrawlSetting_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionCrawlSetting_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionCrawlSetting_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionCrawlSetting_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionCrawlSetting_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionCrawlSetting_yahooAuctionCrawlSettingExcludeKeywords(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionCrawlSetting_yahooAuctionCrawlSettingExcludeKeywords(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.YahooAuctionCrawlSetting().YahooAuctionCrawlSettingExcludeKeywords(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.YahooAuctionCrawlSettingExcludeKeyword)
	fc.Result = res
	return ec.marshalNYahooAuctionCrawlSettingExcludeKeyword2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionCrawlSettingExcludeKeywordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionCrawlSetting_yahooAuctionCrawlSettingExcludeKeywords(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionCrawlSetting",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_YahooAuctionCrawlSettingExcludeKeyword_id(ctx, field)
			case "yahooAuctionCrawlSettingId":
				return ec.fieldContext_YahooAuctionCrawlSettingExcludeKeyword_yahooAuctionCrawlSettingId(ctx, field)
			case "keyword":
				return ec.fieldContext_YahooAuctionCrawlSettingExcludeKeyword_keyword(ctx, field)
			case "createdAt":
				return ec.fieldContext_YahooAuctionCrawlSettingExcludeKeyword_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_YahooAuctionCrawlSettingExcludeKeyword_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type YahooAuctionCrawlSettingExcludeKeyword", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionCrawlSetting_yahooAuctionCrawlSettingExcludeProducts(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionCrawlSetting_yahooAuctionCrawlSettingExcludeProducts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.YahooAuctionCrawlSetting().YahooAuctionCrawlSettingExcludeProducts(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.YahooAuctionCrawlSettingExcludeProduct)
	fc.Result = res
	return ec.marshalNYahooAuctionCrawlSettingExcludeProduct2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionCrawlSettingExcludeProductᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionCrawlSetting_yahooAuctionCrawlSettingExcludeProducts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionCrawlSetting",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_YahooAuctionCrawlSettingExcludeProduct_id(ctx, field)
			case "yahooAuctionCrawlSettingId":
				return ec.fieldContext_YahooAuctionCrawlSettingExcludeProduct_yahooAuctionCrawlSettingId(ctx, field)
			case "externalId":
				return ec.fieldContext_YahooAuctionCrawlSettingExcludeProduct_externalId(ctx, field)
			case "createdAt":
				return ec.fieldContext_YahooAuctionCrawlSettingExcludeProduct_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_YahooAuctionCrawlSettingExcludeProduct_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type YahooAuctionCrawlSettingExcludeProduct", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionCrawlSetting_yahooAuctionCrawlSettingRequiredKeywords(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionCrawlSetting_yahooAuctionCrawlSettingRequiredKeywords(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.YahooAuctionCrawlSetting().YahooAuctionCrawlSettingRequiredKeywords(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.YahooAuctionCrawlSettingRequiredKeyword)
	fc.Result = res
	return ec.marshalNYahooAuctionCrawlSettingRequiredKeyword2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionCrawlSettingRequiredKeywordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionCrawlSetting_yahooAuctionCrawlSettingRequiredKeywords(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionCrawlSetting",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_YahooAuctionCrawlSettingRequiredKeyword_id(ctx, field)
			case "yahooAuctionCrawlSettingId":
				return ec.fieldContext_YahooAuctionCrawlSettingRequiredKeyword_yahooAuctionCrawlSettingId(ctx, field)
			case "keyword":
				return ec.fieldContext_YahooAuctionCrawlSettingRequiredKeyword_keyword(ctx, field)
			case "createdAt":
				return ec.fieldContext_YahooAuctionCrawlSettingRequiredKeyword_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_YahooAuctionCrawlSettingRequiredKeyword_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type YahooAuctionCrawlSettingRequiredKeyword", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionCrawlSettingExcludeKeyword_id(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionCrawlSettingExcludeKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionCrawlSettingExcludeKeyword_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionCrawlSettingExcludeKeyword_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionCrawlSettingExcludeKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionCrawlSettingExcludeKeyword_yahooAuctionCrawlSettingId(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionCrawlSettingExcludeKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionCrawlSettingExcludeKeyword_yahooAuctionCrawlSettingId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YahooAuctionCrawlSettingID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionCrawlSettingExcludeKeyword_yahooAuctionCrawlSettingId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionCrawlSettingExcludeKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionCrawlSettingExcludeKeyword_keyword(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionCrawlSettingExcludeKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionCrawlSettingExcludeKeyword_keyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Keyword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionCrawlSettingExcludeKeyword_keyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionCrawlSettingExcludeKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionCrawlSettingExcludeKeyword_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionCrawlSettingExcludeKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionCrawlSettingExcludeKeyword_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionCrawlSettingExcludeKeyword_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionCrawlSettingExcludeKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionCrawlSettingExcludeKeyword_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionCrawlSettingExcludeKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionCrawlSettingExcludeKeyword_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionCrawlSettingExcludeKeyword_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionCrawlSettingExcludeKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionCrawlSettingExcludeProduct_id(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionCrawlSettingExcludeProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionCrawlSettingExcludeProduct_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionCrawlSettingExcludeProduct_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionCrawlSettingExcludeProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionCrawlSettingExcludeProduct_yahooAuctionCrawlSettingId(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionCrawlSettingExcludeProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionCrawlSettingExcludeProduct_yahooAuctionCrawlSettingId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YahooAuctionCrawlSettingID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionCrawlSettingExcludeProduct_yahooAuctionCrawlSettingId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionCrawlSettingExcludeProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionCrawlSettingExcludeProduct_externalId(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionCrawlSettingExcludeProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionCrawlSettingExcludeProduct_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionCrawlSettingExcludeProduct_externalId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionCrawlSettingExcludeProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionCrawlSettingExcludeProduct_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionCrawlSettingExcludeProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionCrawlSettingExcludeProduct_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionCrawlSettingExcludeProduct_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionCrawlSettingExcludeProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionCrawlSettingExcludeProduct_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionCrawlSettingExcludeProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionCrawlSettingExcludeProduct_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionCrawlSettingExcludeProduct_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionCrawlSettingExcludeProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionCrawlSettingRequiredKeyword_id(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionCrawlSettingRequiredKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionCrawlSettingRequiredKeyword_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionCrawlSettingRequiredKeyword_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionCrawlSettingRequiredKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionCrawlSettingRequiredKeyword_yahooAuctionCrawlSettingId(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionCrawlSettingRequiredKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionCrawlSettingRequiredKeyword_yahooAuctionCrawlSettingId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YahooAuctionCrawlSettingID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionCrawlSettingRequiredKeyword_yahooAuctionCrawlSettingId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionCrawlSettingRequiredKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionCrawlSettingRequiredKeyword_keyword(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionCrawlSettingRequiredKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionCrawlSettingRequiredKeyword_keyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Keyword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionCrawlSettingRequiredKeyword_keyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionCrawlSettingRequiredKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionCrawlSettingRequiredKeyword_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionCrawlSettingRequiredKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionCrawlSettingRequiredKeyword_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionCrawlSettingRequiredKeyword_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionCrawlSettingRequiredKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionCrawlSettingRequiredKeyword_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionCrawlSettingRequiredKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionCrawlSettingRequiredKeyword_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionCrawlSettingRequiredKeyword_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionCrawlSettingRequiredKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionDailyPurchaseSummary_id(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionDailyPurchaseSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionDailyPurchaseSummary_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionDailyPurchaseSummary_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionDailyPurchaseSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionDailyPurchaseSummary_productId(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionDailyPurchaseSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionDailyPurchaseSummary_productId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionDailyPurchaseSummary_productId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionDailyPurchaseSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionDailyPurchaseSummary_averagePurchasePrice(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionDailyPurchaseSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionDailyPurchaseSummary_averagePurchasePrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AveragePurchasePrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionDailyPurchaseSummary_averagePurchasePrice(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionDailyPurchaseSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionDailyPurchaseSummary_purchaseCount(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionDailyPurchaseSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionDailyPurchaseSummary_purchaseCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PurchaseCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionDailyPurchaseSummary_purchaseCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionDailyPurchaseSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionDailyPurchaseSummary_date(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionDailyPurchaseSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionDailyPurchaseSummary_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionDailyPurchaseSummary_date(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionDailyPurchaseSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionDailyPurchaseSummary_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionDailyPurchaseSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionDailyPurchaseSummary_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionDailyPurchaseSummary_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionDailyPurchaseSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionDailyPurchaseSummary_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionDailyPurchaseSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionDailyPurchaseSummary_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionDailyPurchaseSummary_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionDailyPurchaseSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionProduct_id(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionProduct_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionProduct_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionProduct_productId(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionProduct_productId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionProduct_productId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionProduct_yahooAuctionId(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionProduct_yahooAuctionId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YahooAuctionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionProduct_yahooAuctionId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionProduct_name(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionProduct_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionProduct_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionProduct_thumbnailUrl(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionProduct_thumbnailUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThumbnailURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionProduct_thumbnailUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionProduct_price(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionProduct_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionProduct_price(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionProduct_published(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionProduct_published(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Published, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionProduct_published(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionProduct_boughtDate(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionProduct_boughtDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BoughtDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionProduct_boughtDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionProduct_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionProduct_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionProduct_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionProduct_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionProduct_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionProduct_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooFleamarketDailyPurchaseSummary_id(ctx context.Context, field graphql.CollectedField, obj *model.YahooFleamarketDailyPurchaseSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooFleamarketDailyPurchaseSummary_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooFleamarketDailyPurchaseSummary_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooFleamarketDailyPurchaseSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooFleamarketDailyPurchaseSummary_productId(ctx context.Context, field graphql.CollectedField, obj *model.YahooFleamarketDailyPurchaseSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooFleamarketDailyPurchaseSummary_productId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooFleamarketDailyPurchaseSummary_productId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooFleamarketDailyPurchaseSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooFleamarketDailyPurchaseSummary_averagePurchasePrice(ctx context.Context, field graphql.CollectedField, obj *model.YahooFleamarketDailyPurchaseSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooFleamarketDailyPurchaseSummary_averagePurchasePrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AveragePurchasePrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooFleamarketDailyPurchaseSummary_averagePurchasePrice(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooFleamarketDailyPurchaseSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooFleamarketDailyPurchaseSummary_purchaseCount(ctx context.Context, field graphql.CollectedField, obj *model.YahooFleamarketDailyPurchaseSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooFleamarketDailyPurchaseSummary_purchaseCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PurchaseCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooFleamarketDailyPurchaseSummary_purchaseCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooFleamarketDailyPurchaseSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooFleamarketDailyPurchaseSummary_date(ctx context.Context, field graphql.CollectedField, obj *model.YahooFleamarketDailyPurchaseSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooFleamarketDailyPurchaseSummary_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooFleamarketDailyPurchaseSummary_date(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooFleamarketDailyPurchaseSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooFleamarketDailyPurchaseSummary_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.YahooFleamarketDailyPurchaseSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooFleamarketDailyPurchaseSummary_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooFleamarketDailyPurchaseSummary_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooFleamarketDailyPurchaseSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooFleamarketDailyPurchaseSummary_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.YahooFleamarketDailyPurchaseSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooFleamarketDailyPurchaseSummary_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooFleamarketDailyPurchaseSummary_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooFleamarketDailyPurchaseSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputCreateIosysCrawlSettingExcludeKeywordInput(ctx context.Context, obj interface{}) (model.CreateIosysCrawlSettingExcludeKeywordInput, error) {
	var it model.CreateIosysCrawlSettingExcludeKeywordInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"productId", "keyword"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "productId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductID = data
		case "keyword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyword"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keyword = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateIosysCrawlSettingExcludeProductInput(ctx context.Context, obj interface{}) (model.CreateIosysCrawlSettingExcludeProductInput, error) {
	var it model.CreateIosysCrawlSettingExcludeProductInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"productId", "externalId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "productId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductID = data
		case "externalId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalId"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateIosysCrawlSettingInput(ctx context.Context, obj interface{}) (model.CreateIosysCrawlSettingInput, error) {
	var it model.CreateIosysCrawlSettingInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"keyword", "min_price", "max_price", "enabled"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "keyword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyword"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keyword = data
		case "min_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min_price"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.MinPrice = data
		case "max_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max_price"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxPrice = data
		case "enabled":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateIosysCrawlSettingRequiredKeywordInput(ctx context.Context, obj interface{}) (model.CreateIosysCrawlSettingRequiredKeywordInput, error) {
	var it model.CreateIosysCrawlSettingRequiredKeywordInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"productId", "keyword"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "productId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductID = data
		case "keyword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyword"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keyword = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateJanparaCrawlSettingExcludeKeywordInput(ctx context.Context, obj interface{}) (model.CreateJanparaCrawlSettingExcludeKeywordInput, error) {
	var it model.CreateJanparaCrawlSettingExcludeKeywordInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"productId", "keyword"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "productId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductID = data
		case "keyword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyword"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keyword = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateJanparaCrawlSettingExcludeProductInput(ctx context.Context, obj interface{}) (model.CreateJanparaCrawlSettingExcludeProductInput, error) {
	var it model.CreateJanparaCrawlSettingExcludeProductInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"productId", "externalId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "productId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductID = data
		case "externalId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalId"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateJanparaCrawlSettingInput(ctx context.Context, obj interface{}) (model.CreateJanparaCrawlSettingInput, error) {
	var it model.CreateJanparaCrawlSettingInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"keyword", "min_price", "max_price", "enabled"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "keyword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyword"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keyword = data
		case "min_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min_price"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.MinPrice = data
		case "max_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max_price"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxPrice = data
		case "enabled":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateJanparaCrawlSettingRequiredKeywordInput(ctx context.Context, obj interface{}) (model.CreateJanparaCrawlSettingRequiredKeywordInput, error) {
	var it model.CreateJanparaCrawlSettingRequiredKeywordInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"productId", "keyword"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "productId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductID = data
		case "keyword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyword"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keyword = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateMercariCrawlSettingExcludeKeywordInput(ctx context.Context, obj interface{}) (model.CreateMercariCrawlSettingExcludeKeywordInput, error) {
	var it model.CreateMercariCrawlSettingExcludeKeywordInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"productId", "keyword"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "productId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductID = data
		case "keyword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyword"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keyword = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateMercariCrawlSettingExcludeProductInput(ctx context.Context, obj interface{}) (model.CreateMercariCrawlSettingExcludeProductInput, error) {
	var it model.CreateMercariCrawlSettingExcludeProductInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"productId", "externalId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "productId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductID = data
		case "externalId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalId"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateMercariCrawlSettingInput(ctx context.Context, obj interface{}) (model.CreateMercariCrawlSettingInput, error) {
	var it model.CreateMercariCrawlSettingInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"keyword", "category_id", "min_price", "max_price", "enabled"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "keyword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyword"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keyword = data
		case "category_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category_id"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CategoryID = data
		case "min_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min_price"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.MinPrice = data
		case "max_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max_price"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxPrice = data
		case "enabled":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateMercariCrawlSettingRequiredKeywordInput(ctx context.Context, obj interface{}) (model.CreateMercariCrawlSettingRequiredKeywordInput, error) {
	var it model.CreateMercariCrawlSettingRequiredKeywordInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"productId", "keyword"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "productId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductID = data
		case "keyword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyword"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keyword = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreatePcKoubouCrawlSettingExcludeKeywordInput(ctx context.Context, obj interface{}) (model.CreatePcKoubouCrawlSettingExcludeKeywordInput, error) {
	var it model.CreatePcKoubouCrawlSettingExcludeKeywordInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"productId", "keyword"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "productId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductID = data
		case "keyword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyword"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keyword = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreatePcKoubouCrawlSettingExcludeProductInput(ctx context.Context, obj interface{}) (model.CreatePcKoubouCrawlSettingExcludeProductInput, error) {
	var it model.CreatePcKoubouCrawlSettingExcludeProductInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"productId", "externalId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "productId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductID = data
		case "externalId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalId"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreatePcKoubouCrawlSettingInput(ctx context.Context, obj interface{}) (model.CreatePcKoubouCrawlSettingInput, error) {
	var it model.CreatePcKoubouCrawlSettingInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"keyword", "min_price", "max_price", "enabled"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "keyword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyword"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keyword = data
		case "min_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min_price"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.MinPrice = data
		case "max_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max_price"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxPrice = data
		case "enabled":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreatePcKoubouCrawlSettingRequiredKeywordInput(ctx context.Context, obj interface{}) (model.CreatePcKoubouCrawlSettingRequiredKeywordInput, error) {
	var it model.CreatePcKoubouCrawlSettingRequiredKeywordInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"productId", "keyword"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "productId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductID = data
		case "keyword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyword"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keyword = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateProductInput(ctx context.Context, obj interface{}) (model.CreateProductInput, error) {
	var it model.CreateProductInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "yahoo_auction_crawl_setting", "mercari_crawl_setting", "janpara_crawl_setting", "iosys_crawl_setting", "pc_koubou_crawl_setting"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "yahoo_auction_crawl_setting":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yahoo_auction_crawl_setting"))
			data, err := ec.unmarshalNCreateYahooAuctionCrawlSettingInput2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateYahooAuctionCrawlSettingInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.YahooAuctionCrawlSetting = data
		case "mercari_crawl_setting":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mercari_crawl_setting"))
			data, err := ec.unmarshalNCreateMercariCrawlSettingInput2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateMercariCrawlSettingInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.MercariCrawlSetting = data
		case "janpara_crawl_setting":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("janpara_crawl_setting"))
			data, err := ec.unmarshalNCreateJanparaCrawlSettingInput2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateJanparaCrawlSettingInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.JanparaCrawlSetting = data
		case "iosys_crawl_setting":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iosys_crawl_setting"))
			data, err := ec.unmarshalNCreateIosysCrawlSettingInput2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateIosysCrawlSettingInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.IosysCrawlSetting = data
		case "pc_koubou_crawl_setting":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pc_koubou_crawl_setting"))
			data, err := ec.unmarshalNCreatePcKoubouCrawlSettingInput2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreatePcKoubouCrawlSettingInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.PcKoubouCrawlSetting = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateYahooAuctionCrawlSettingExcludeKeywordInput(ctx context.Context, obj interface{}) (model.CreateYahooAuctionCrawlSettingExcludeKeywordInput, error) {
	var it model.CreateYahooAuctionCrawlSettingExcludeKeywordInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"productId", "keyword"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "productId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductID = data
		case "keyword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyword"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keyword = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateYahooAuctionCrawlSettingExcludeProductInput(ctx context.Context, obj interface{}) (model.CreateYahooAuctionCrawlSettingExcludeProductInput, error) {
	var it model.CreateYahooAuctionCrawlSettingExcludeProductInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"productId", "externalId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "productId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductID = data
		case "externalId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalId"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateYahooAuctionCrawlSettingInput(ctx context.Context, obj interface{}) (model.CreateYahooAuctionCrawlSettingInput, error) {
	var it model.CreateYahooAuctionCrawlSettingInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"keyword", "category_id", "min_price", "max_price", "enabled"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "keyword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyword"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keyword = data
		case "category_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category_id"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CategoryID = data
		case "min_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min_price"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.MinPrice = data
		case "max_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max_price"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxPrice = data
		case "enabled":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateYahooAuctionCrawlSettingRequiredKeywordInput(ctx context.Context, obj interface{}) (model.CreateYahooAuctionCrawlSettingRequiredKeywordInput, error) {
	var it model.CreateYahooAuctionCrawlSettingRequiredKeywordInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"productId", "keyword"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "productId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductID = data
		case "keyword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyword"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keyword = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateIosysCrawlSettingExcludeKeywordInput(ctx context.Context, obj interface{}) (model.UpdateIosysCrawlSettingExcludeKeywordInput, error) {
	var it model.UpdateIosysCrawlSettingExcludeKeywordInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "productId", "keyword"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "productId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductID = data
		case "keyword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyword"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keyword = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateIosysCrawlSettingExcludeProductInput(ctx context.Context, obj interface{}) (model.UpdateIosysCrawlSettingExcludeProductInput, error) {
	var it model.UpdateIosysCrawlSettingExcludeProductInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "productId", "externalId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "productId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductID = data
		case "externalId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalId"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateIosysCrawlSettingInput(ctx context.Context, obj interface{}) (model.UpdateIosysCrawlSettingInput, error) {
	var it model.UpdateIosysCrawlSettingInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"keyword", "min_price", "max_price", "enabled"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "keyword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyword"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keyword = data
		case "min_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min_price"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.MinPrice = data
		case "max_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max_price"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxPrice = data
		case "enabled":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateIosysCrawlSettingRequiredKeywordInput(ctx context.Context, obj interface{}) (model.UpdateIosysCrawlSettingRequiredKeywordInput, error) {
	var it model.UpdateIosysCrawlSettingRequiredKeywordInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "productId", "keyword"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "productId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductID = data
		case "keyword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyword"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keyword = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateJanparaCrawlSettingExcludeKeywordInput(ctx context.Context, obj interface{}) (model.UpdateJanparaCrawlSettingExcludeKeywordInput, error) {
	var it model.UpdateJanparaCrawlSettingExcludeKeywordInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "productId", "keyword"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "productId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductID = data
		case "keyword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyword"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keyword = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateJanparaCrawlSettingExcludeProductInput(ctx context.Context, obj interface{}) (model.UpdateJanparaCrawlSettingExcludeProductInput, error) {
	var it model.UpdateJanparaCrawlSettingExcludeProductInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "productId", "externalId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "productId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductID = data
		case "externalId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalId"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateJanparaCrawlSettingInput(ctx context.Context, obj interface{}) (model.UpdateJanparaCrawlSettingInput, error) {
	var it model.UpdateJanparaCrawlSettingInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"keyword", "min_price", "max_price", "enabled"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "keyword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyword"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keyword = data
		case "min_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min_price"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.MinPrice = data
		case "max_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max_price"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxPrice = data
		case "enabled":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateJanparaCrawlSettingRequiredKeywordInput(ctx context.Context, obj interface{}) (model.UpdateJanparaCrawlSettingRequiredKeywordInput, error) {
	var it model.UpdateJanparaCrawlSettingRequiredKeywordInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "productId", "keyword"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "productId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductID = data
		case "keyword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyword"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keyword = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateMercariCrawlSettingExcludeKeywordInput(ctx context.Context, obj interface{}) (model.UpdateMercariCrawlSettingExcludeKeywordInput, error) {
	var it model.UpdateMercariCrawlSettingExcludeKeywordInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "productId", "keyword"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "productId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductID = data
		case "keyword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyword"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keyword = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateMercariCrawlSettingExcludeProductInput(ctx context.Context, obj interface{}) (model.UpdateMercariCrawlSettingExcludeProductInput, error) {
	var it model.UpdateMercariCrawlSettingExcludeProductInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "productId", "externalId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "productId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductID = data
		case "externalId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalId"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateMercariCrawlSettingInput(ctx context.Context, obj interface{}) (model.UpdateMercariCrawlSettingInput, error) {
	var it model.UpdateMercariCrawlSettingInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"keyword", "category_id", "min_price", "max_price", "enabled"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "keyword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyword"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keyword = data
		case "category_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category_id"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CategoryID = data
		case "min_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min_price"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.MinPrice = data
		case "max_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max_price"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxPrice = data
		case "enabled":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateMercariCrawlSettingRequiredKeywordInput(ctx context.Context, obj interface{}) (model.UpdateMercariCrawlSettingRequiredKeywordInput, error) {
	var it model.UpdateMercariCrawlSettingRequiredKeywordInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "productId", "keyword"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "productId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductID = data
		case "keyword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyword"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keyword = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdatePcKoubouCrawlSettingExcludeKeywordInput(ctx context.Context, obj interface{}) (model.UpdatePcKoubouCrawlSettingExcludeKeywordInput, error) {
	var it model.UpdatePcKoubouCrawlSettingExcludeKeywordInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "productId", "keyword"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "productId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductID = data
		case "keyword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyword"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keyword = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdatePcKoubouCrawlSettingExcludeProductInput(ctx context.Context, obj interface{}) (model.UpdatePcKoubouCrawlSettingExcludeProductInput, error) {
	var it model.UpdatePcKoubouCrawlSettingExcludeProductInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "productId", "externalId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "productId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductID = data
		case "externalId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalId"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdatePcKoubouCrawlSettingInput(ctx context.Context, obj interface{}) (model.UpdatePcKoubouCrawlSettingInput, error) {
	var it model.UpdatePcKoubouCrawlSettingInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"keyword", "min_price", "max_price", "enabled"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "keyword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyword"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keyword = data
		case "min_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min_price"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.MinPrice = data
		case "max_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max_price"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxPrice = data
		case "enabled":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdatePcKoubouCrawlSettingRequiredKeywordInput(ctx context.Context, obj interface{}) (model.UpdatePcKoubouCrawlSettingRequiredKeywordInput, error) {
	var it model.UpdatePcKoubouCrawlSettingRequiredKeywordInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "productId", "keyword"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "productId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductID = data
		case "keyword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyword"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keyword = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateProductInput(ctx context.Context, obj interface{}) (model.UpdateProductInput, error) {
	var it model.UpdateProductInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "yahoo_auction_crawl_setting", "mercari_crawl_setting", "janpara_crawl_setting", "iosys_crawl_setting", "pc_koubou_crawl_setting"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "yahoo_auction_crawl_setting":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yahoo_auction_crawl_setting"))
			data, err := ec.unmarshalNUpdateYahooAuctionCrawlSettingInput2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateYahooAuctionCrawlSettingInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.YahooAuctionCrawlSetting = data
		case "mercari_crawl_setting":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mercari_crawl_setting"))
			data, err := ec.unmarshalNUpdateMercariCrawlSettingInput2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateMercariCrawlSettingInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.MercariCrawlSetting = data
		case "janpara_crawl_setting":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("janpara_crawl_setting"))
			data, err := ec.unmarshalNUpdateJanparaCrawlSettingInput2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateJanparaCrawlSettingInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.JanparaCrawlSetting = data
		case "iosys_crawl_setting":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iosys_crawl_setting"))
			data, err := ec.unmarshalNUpdateIosysCrawlSettingInput2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateIosysCrawlSettingInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.IosysCrawlSetting = data
		case "pc_koubou_crawl_setting":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pc_koubou_crawl_setting"))
			data, err := ec.unmarshalNUpdatePcKoubouCrawlSettingInput2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdatePcKoubouCrawlSettingInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.PcKoubouCrawlSetting = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateYahooAuctionCrawlSettingExcludeKeywordInput(ctx context.Context, obj interface{}) (model.UpdateYahooAuctionCrawlSettingExcludeKeywordInput, error) {
	var it model.UpdateYahooAuctionCrawlSettingExcludeKeywordInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "productId", "keyword"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "productId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductID = data
		case "keyword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyword"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keyword = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateYahooAuctionCrawlSettingExcludeProductInput(ctx context.Context, obj interface{}) (model.UpdateYahooAuctionCrawlSettingExcludeProductInput, error) {
	var it model.UpdateYahooAuctionCrawlSettingExcludeProductInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "productId", "externalId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "productId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductID = data
		case "externalId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalId"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateYahooAuctionCrawlSettingInput(ctx context.Context, obj interface{}) (model.UpdateYahooAuctionCrawlSettingInput, error) {
	var it model.UpdateYahooAuctionCrawlSettingInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"keyword", "category_id", "min_price", "max_price", "enabled"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "keyword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyword"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keyword = data
		case "category_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category_id"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CategoryID = data
		case "min_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min_price"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.MinPrice = data
		case "max_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max_price"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxPrice = data
		case "enabled":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateYahooAuctionCrawlSettingRequiredKeywordInput(ctx context.Context, obj interface{}) (model.UpdateYahooAuctionCrawlSettingRequiredKeywordInput, error) {
	var it model.UpdateYahooAuctionCrawlSettingRequiredKeywordInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "productId", "keyword"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "productId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductID = data
		case "keyword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyword"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keyword = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _CreateIosysCrawlSettingExcludeKeywordResult(ctx context.Context, sel ast.SelectionSet, obj model.CreateIosysCrawlSettingExcludeKeywordResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CreateIosysCrawlSettingExcludeKeywordResultSuccess:
		return ec._CreateIosysCrawlSettingExcludeKeywordResultSuccess(ctx, sel, &obj)
	case *model.CreateIosysCrawlSettingExcludeKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateIosysCrawlSettingExcludeKeywordResultSuccess(ctx, sel, obj)
	case model.CreateIosysCrawlSettingExcludeKeywordResultError:
		return ec._CreateIosysCrawlSettingExcludeKeywordResultError(ctx, sel, &obj)
	case *model.CreateIosysCrawlSettingExcludeKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateIosysCrawlSettingExcludeKeywordResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _CreateIosysCrawlSettingExcludeKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.CreateIosysCrawlSettingExcludeKeywordResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CreateIosysCrawlSettingExcludeKeywordResultValidationFailed:
		return ec._CreateIosysCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.CreateIosysCrawlSettingExcludeKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateIosysCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _CreateIosysCrawlSettingExcludeProductResult(ctx context.Context, sel ast.SelectionSet, obj model.CreateIosysCrawlSettingExcludeProductResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CreateIosysCrawlSettingExcludeProductResultSuccess:
		return ec._CreateIosysCrawlSettingExcludeProductResultSuccess(ctx, sel, &obj)
	case *model.CreateIosysCrawlSettingExcludeProductResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateIosysCrawlSettingExcludeProductResultSuccess(ctx, sel, obj)
	case model.CreateIosysCrawlSettingExcludeProductResultError:
		return ec._CreateIosysCrawlSettingExcludeProductResultError(ctx, sel, &obj)
	case *model.CreateIosysCrawlSettingExcludeProductResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateIosysCrawlSettingExcludeProductResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _CreateIosysCrawlSettingExcludeProductResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.CreateIosysCrawlSettingExcludeProductResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CreateIosysCrawlSettingExcludeProductResultValidationFailed:
		return ec._CreateIosysCrawlSettingExcludeProductResultValidationFailed(ctx, sel, &obj)
	case *model.CreateIosysCrawlSettingExcludeProductResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateIosysCrawlSettingExcludeProductResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _CreateIosysCrawlSettingRequiredKeywordResult(ctx context.Context, sel ast.SelectionSet, obj model.CreateIosysCrawlSettingRequiredKeywordResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CreateIosysCrawlSettingRequiredKeywordResultSuccess:
		return ec._CreateIosysCrawlSettingRequiredKeywordResultSuccess(ctx, sel, &obj)
	case *model.CreateIosysCrawlSettingRequiredKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateIosysCrawlSettingRequiredKeywordResultSuccess(ctx, sel, obj)
	case model.CreateIosysCrawlSettingRequiredKeywordResultError:
		return ec._CreateIosysCrawlSettingRequiredKeywordResultError(ctx, sel, &obj)
	case *model.CreateIosysCrawlSettingRequiredKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateIosysCrawlSettingRequiredKeywordResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _CreateIosysCrawlSettingRequiredKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.CreateIosysCrawlSettingRequiredKeywordResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CreateIosysCrawlSettingRequiredKeywordResultValidationFailed:
		return ec._CreateIosysCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.CreateIosysCrawlSettingRequiredKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateIosysCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _CreateJanparaCrawlSettingExcludeKeywordResult(ctx context.Context, sel ast.SelectionSet, obj model.CreateJanparaCrawlSettingExcludeKeywordResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CreateJanparaCrawlSettingExcludeKeywordResultSuccess:
		return ec._CreateJanparaCrawlSettingExcludeKeywordResultSuccess(ctx, sel, &obj)
	case *model.CreateJanparaCrawlSettingExcludeKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateJanparaCrawlSettingExcludeKeywordResultSuccess(ctx, sel, obj)
	case model.CreateJanparaCrawlSettingExcludeKeywordResultError:
		return ec._CreateJanparaCrawlSettingExcludeKeywordResultError(ctx, sel, &obj)
	case *model.CreateJanparaCrawlSettingExcludeKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateJanparaCrawlSettingExcludeKeywordResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _CreateJanparaCrawlSettingExcludeKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.CreateJanparaCrawlSettingExcludeKeywordResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CreateJanparaCrawlSettingExcludeKeywordResultValidationFailed:
		return ec._CreateJanparaCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.CreateJanparaCrawlSettingExcludeKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateJanparaCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _CreateJanparaCrawlSettingExcludeProductResult(ctx context.Context, sel ast.SelectionSet, obj model.CreateJanparaCrawlSettingExcludeProductResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CreateJanparaCrawlSettingExcludeProductResultSuccess:
		return ec._CreateJanparaCrawlSettingExcludeProductResultSuccess(ctx, sel, &obj)
	case *model.CreateJanparaCrawlSettingExcludeProductResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateJanparaCrawlSettingExcludeProductResultSuccess(ctx, sel, obj)
	case model.CreateJanparaCrawlSettingExcludeProductResultError:
		return ec._CreateJanparaCrawlSettingExcludeProductResultError(ctx, sel, &obj)
	case *model.CreateJanparaCrawlSettingExcludeProductResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateJanparaCrawlSettingExcludeProductResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _CreateJanparaCrawlSettingExcludeProductResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.CreateJanparaCrawlSettingExcludeProductResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CreateJanparaCrawlSettingExcludeProductResultValidationFailed:
		return ec._CreateJanparaCrawlSettingExcludeProductResultValidationFailed(ctx, sel, &obj)
	case *model.CreateJanparaCrawlSettingExcludeProductResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateJanparaCrawlSettingExcludeProductResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _CreateJanparaCrawlSettingRequiredKeywordResult(ctx context.Context, sel ast.SelectionSet, obj model.CreateJanparaCrawlSettingRequiredKeywordResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CreateJanparaCrawlSettingRequiredKeywordResultSuccess:
		return ec._CreateJanparaCrawlSettingRequiredKeywordResultSuccess(ctx, sel, &obj)
	case *model.CreateJanparaCrawlSettingRequiredKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateJanparaCrawlSettingRequiredKeywordResultSuccess(ctx, sel, obj)
	case model.CreateJanparaCrawlSettingRequiredKeywordResultError:
		return ec._CreateJanparaCrawlSettingRequiredKeywordResultError(ctx, sel, &obj)
	case *model.CreateJanparaCrawlSettingRequiredKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateJanparaCrawlSettingRequiredKeywordResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _CreateJanparaCrawlSettingRequiredKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.CreateJanparaCrawlSettingRequiredKeywordResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CreateJanparaCrawlSettingRequiredKeywordResultValidationFailed:
		return ec._CreateJanparaCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.CreateJanparaCrawlSettingRequiredKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateJanparaCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _CreateMercariCrawlSettingExcludeKeywordResult(ctx context.Context, sel ast.SelectionSet, obj model.CreateMercariCrawlSettingExcludeKeywordResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CreateMercariCrawlSettingExcludeKeywordResultSuccess:
		return ec._CreateMercariCrawlSettingExcludeKeywordResultSuccess(ctx, sel, &obj)
	case *model.CreateMercariCrawlSettingExcludeKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateMercariCrawlSettingExcludeKeywordResultSuccess(ctx, sel, obj)
	case model.CreateMercariCrawlSettingExcludeKeywordResultError:
		return ec._CreateMercariCrawlSettingExcludeKeywordResultError(ctx, sel, &obj)
	case *model.CreateMercariCrawlSettingExcludeKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateMercariCrawlSettingExcludeKeywordResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _CreateMercariCrawlSettingExcludeKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.CreateMercariCrawlSettingExcludeKeywordResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CreateMercariCrawlSettingExcludeKeywordResultValidationFailed:
		return ec._CreateMercariCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.CreateMercariCrawlSettingExcludeKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateMercariCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _CreateMercariCrawlSettingExcludeProductResult(ctx context.Context, sel ast.SelectionSet, obj model.CreateMercariCrawlSettingExcludeProductResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CreateMercariCrawlSettingExcludeProductResultSuccess:
		return ec._CreateMercariCrawlSettingExcludeProductResultSuccess(ctx, sel, &obj)
	case *model.CreateMercariCrawlSettingExcludeProductResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateMercariCrawlSettingExcludeProductResultSuccess(ctx, sel, obj)
	case model.CreateMercariCrawlSettingExcludeProductResultError:
		return ec._CreateMercariCrawlSettingExcludeProductResultError(ctx, sel, &obj)
	case *model.CreateMercariCrawlSettingExcludeProductResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateMercariCrawlSettingExcludeProductResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _CreateMercariCrawlSettingExcludeProductResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.CreateMercariCrawlSettingExcludeProductResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CreateMercariCrawlSettingExcludeProductResultValidationFailed:
		return ec._CreateMercariCrawlSettingExcludeProductResultValidationFailed(ctx, sel, &obj)
	case *model.CreateMercariCrawlSettingExcludeProductResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateMercariCrawlSettingExcludeProductResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _CreateMercariCrawlSettingRequiredKeywordResult(ctx context.Context, sel ast.SelectionSet, obj model.CreateMercariCrawlSettingRequiredKeywordResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CreateMercariCrawlSettingRequiredKeywordResultSuccess:
		return ec._CreateMercariCrawlSettingRequiredKeywordResultSuccess(ctx, sel, &obj)
	case *model.CreateMercariCrawlSettingRequiredKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateMercariCrawlSettingRequiredKeywordResultSuccess(ctx, sel, obj)
	case model.CreateMercariCrawlSettingRequiredKeywordResultError:
		return ec._CreateMercariCrawlSettingRequiredKeywordResultError(ctx, sel, &obj)
	case *model.CreateMercariCrawlSettingRequiredKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateMercariCrawlSettingRequiredKeywordResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _CreateMercariCrawlSettingRequiredKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.CreateMercariCrawlSettingRequiredKeywordResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CreateMercariCrawlSettingRequiredKeywordResultValidationFailed:
		return ec._CreateMercariCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.CreateMercariCrawlSettingRequiredKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateMercariCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _CreatePcKoubouCrawlSettingExcludeKeywordResult(ctx context.Context, sel ast.SelectionSet, obj model.CreatePcKoubouCrawlSettingExcludeKeywordResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CreatePcKoubouCrawlSettingExcludeKeywordResultSuccess:
		return ec._CreatePcKoubouCrawlSettingExcludeKeywordResultSuccess(ctx, sel, &obj)
	case *model.CreatePcKoubouCrawlSettingExcludeKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreatePcKoubouCrawlSettingExcludeKeywordResultSuccess(ctx, sel, obj)
	case model.CreatePcKoubouCrawlSettingExcludeKeywordResultError:
		return ec._CreatePcKoubouCrawlSettingExcludeKeywordResultError(ctx, sel, &obj)
	case *model.CreatePcKoubouCrawlSettingExcludeKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreatePcKoubouCrawlSettingExcludeKeywordResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _CreatePcKoubouCrawlSettingExcludeKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.CreatePcKoubouCrawlSettingExcludeKeywordResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CreatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed:
		return ec._CreatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.CreatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _CreatePcKoubouCrawlSettingExcludeProductResult(ctx context.Context, sel ast.SelectionSet, obj model.CreatePcKoubouCrawlSettingExcludeProductResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CreatePcKoubouCrawlSettingExcludeProductResultSuccess:
		return ec._CreatePcKoubouCrawlSettingExcludeProductResultSuccess(ctx, sel, &obj)
	case *model.CreatePcKoubouCrawlSettingExcludeProductResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreatePcKoubouCrawlSettingExcludeProductResultSuccess(ctx, sel, obj)
	case model.CreatePcKoubouCrawlSettingExcludeProductResultError:
		return ec._CreatePcKoubouCrawlSettingExcludeProductResultError(ctx, sel, &obj)
	case *model.CreatePcKoubouCrawlSettingExcludeProductResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreatePcKoubouCrawlSettingExcludeProductResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _CreatePcKoubouCrawlSettingExcludeProductResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.CreatePcKoubouCrawlSettingExcludeProductResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CreatePcKoubouCrawlSettingExcludeProductResultValidationFailed:
		return ec._CreatePcKoubouCrawlSettingExcludeProductResultValidationFailed(ctx, sel, &obj)
	case *model.CreatePcKoubouCrawlSettingExcludeProductResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreatePcKoubouCrawlSettingExcludeProductResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _CreatePcKoubouCrawlSettingRequiredKeywordResult(ctx context.Context, sel ast.SelectionSet, obj model.CreatePcKoubouCrawlSettingRequiredKeywordResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CreatePcKoubouCrawlSettingRequiredKeywordResultSuccess:
		return ec._CreatePcKoubouCrawlSettingRequiredKeywordResultSuccess(ctx, sel, &obj)
	case *model.CreatePcKoubouCrawlSettingRequiredKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreatePcKoubouCrawlSettingRequiredKeywordResultSuccess(ctx, sel, obj)
	case model.CreatePcKoubouCrawlSettingRequiredKeywordResultError:
		return ec._CreatePcKoubouCrawlSettingRequiredKeywordResultError(ctx, sel, &obj)
	case *model.CreatePcKoubouCrawlSettingRequiredKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreatePcKoubouCrawlSettingRequiredKeywordResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _CreatePcKoubouCrawlSettingRequiredKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.CreatePcKoubouCrawlSettingRequiredKeywordResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CreatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed:
		return ec._CreatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.CreatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _CreateProductResult(ctx context.Context, sel ast.SelectionSet, obj model.CreateProductResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CreateProductResultSuccess:
		return ec._CreateProductResultSuccess(ctx, sel, &obj)
	case *model.CreateProductResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateProductResultSuccess(ctx, sel, obj)
	case model.CreateProductResultError:
		return ec._CreateProductResultError(ctx, sel, &obj)
	case *model.CreateProductResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateProductResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _CreateProductResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.CreateProductResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CreateProductResultValidationFailed:
		return ec._CreateProductResultValidationFailed(ctx, sel, &obj)
	case *model.CreateProductResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateProductResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingExcludeKeywordResult(ctx context.Context, sel ast.SelectionSet, obj model.CreateYahooAuctionCrawlSettingExcludeKeywordResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess:
		return ec._CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess(ctx, sel, &obj)
	case *model.CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess(ctx, sel, obj)
	case model.CreateYahooAuctionCrawlSettingExcludeKeywordResultError:
		return ec._CreateYahooAuctionCrawlSettingExcludeKeywordResultError(ctx, sel, &obj)
	case *model.CreateYahooAuctionCrawlSettingExcludeKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateYahooAuctionCrawlSettingExcludeKeywordResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingExcludeKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.CreateYahooAuctionCrawlSettingExcludeKeywordResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed:
		return ec._CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingExcludeProductResult(ctx context.Context, sel ast.SelectionSet, obj model.CreateYahooAuctionCrawlSettingExcludeProductResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CreateYahooAuctionCrawlSettingExcludeProductResultSuccess:
		return ec._CreateYahooAuctionCrawlSettingExcludeProductResultSuccess(ctx, sel, &obj)
	case *model.CreateYahooAuctionCrawlSettingExcludeProductResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateYahooAuctionCrawlSettingExcludeProductResultSuccess(ctx, sel, obj)
	case model.CreateYahooAuctionCrawlSettingExcludeProductResultError:
		return ec._CreateYahooAuctionCrawlSettingExcludeProductResultError(ctx, sel, &obj)
	case *model.CreateYahooAuctionCrawlSettingExcludeProductResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateYahooAuctionCrawlSettingExcludeProductResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingExcludeProductResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.CreateYahooAuctionCrawlSettingExcludeProductResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CreateYahooAuctionCrawlSettingExcludeProductResultValidationFailed:
		return ec._CreateYahooAuctionCrawlSettingExcludeProductResultValidationFailed(ctx, sel, &obj)
	case *model.CreateYahooAuctionCrawlSettingExcludeProductResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateYahooAuctionCrawlSettingExcludeProductResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingRequiredKeywordResult(ctx context.Context, sel ast.SelectionSet, obj model.CreateYahooAuctionCrawlSettingRequiredKeywordResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess:
		return ec._CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess(ctx, sel, &obj)
	case *model.CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess(ctx, sel, obj)
	case model.CreateYahooAuctionCrawlSettingRequiredKeywordResultError:
		return ec._CreateYahooAuctionCrawlSettingRequiredKeywordResultError(ctx, sel, &obj)
	case *model.CreateYahooAuctionCrawlSettingRequiredKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateYahooAuctionCrawlSettingRequiredKeywordResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingRequiredKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.CreateYahooAuctionCrawlSettingRequiredKeywordResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed:
		return ec._CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _DeleteIosysCrawlSettingExcludeKeywordResult(ctx context.Context, sel ast.SelectionSet, obj model.DeleteIosysCrawlSettingExcludeKeywordResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.DeleteIosysCrawlSettingExcludeKeywordResultSuccess:
		return ec._DeleteIosysCrawlSettingExcludeKeywordResultSuccess(ctx, sel, &obj)
	case *model.DeleteIosysCrawlSettingExcludeKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteIosysCrawlSettingExcludeKeywordResultSuccess(ctx, sel, obj)
	case model.DeleteIosysCrawlSettingExcludeKeywordResultError:
		return ec._DeleteIosysCrawlSettingExcludeKeywordResultError(ctx, sel, &obj)
	case *model.DeleteIosysCrawlSettingExcludeKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteIosysCrawlSettingExcludeKeywordResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _DeleteIosysCrawlSettingExcludeKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.DeleteIosysCrawlSettingExcludeKeywordResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.DeleteIosysCrawlSettingExcludeKeywordResultValidationFailed:
		return ec._DeleteIosysCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.DeleteIosysCrawlSettingExcludeKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteIosysCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _DeleteIosysCrawlSettingExcludeProductResult(ctx context.Context, sel ast.SelectionSet, obj model.DeleteIosysCrawlSettingExcludeProductResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.DeleteIosysCrawlSettingExcludeProductResultSuccess:
		return ec._DeleteIosysCrawlSettingExcludeProductResultSuccess(ctx, sel, &obj)
	case *model.DeleteIosysCrawlSettingExcludeProductResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteIosysCrawlSettingExcludeProductResultSuccess(ctx, sel, obj)
	case model.DeleteIosysCrawlSettingExcludeProductResultError:
		return ec._DeleteIosysCrawlSettingExcludeProductResultError(ctx, sel, &obj)
	case *model.DeleteIosysCrawlSettingExcludeProductResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteIosysCrawlSettingExcludeProductResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _DeleteIosysCrawlSettingExcludeProductResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.DeleteIosysCrawlSettingExcludeProductResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.DeleteIosysCrawlSettingExcludeProductResultValidationFailed:
		return ec._DeleteIosysCrawlSettingExcludeProductResultValidationFailed(ctx, sel, &obj)
	case *model.DeleteIosysCrawlSettingExcludeProductResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteIosysCrawlSettingExcludeProductResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _DeleteIosysCrawlSettingRequiredKeywordResult(ctx context.Context, sel ast.SelectionSet, obj model.DeleteIosysCrawlSettingRequiredKeywordResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.DeleteIosysCrawlSettingRequiredKeywordResultSuccess:
		return ec._DeleteIosysCrawlSettingRequiredKeywordResultSuccess(ctx, sel, &obj)
	case *model.DeleteIosysCrawlSettingRequiredKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteIosysCrawlSettingRequiredKeywordResultSuccess(ctx, sel, obj)
	case model.DeleteIosysCrawlSettingRequiredKeywordResultError:
		return ec._DeleteIosysCrawlSettingRequiredKeywordResultError(ctx, sel, &obj)
	case *model.DeleteIosysCrawlSettingRequiredKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteIosysCrawlSettingRequiredKeywordResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _DeleteIosysCrawlSettingRequiredKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.DeleteIosysCrawlSettingRequiredKeywordResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.DeleteIosysCrawlSettingRequiredKeywordResultValidationFailed:
		return ec._DeleteIosysCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.DeleteIosysCrawlSettingRequiredKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteIosysCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _DeleteJanparaCrawlSettingExcludeKeywordResult(ctx context.Context, sel ast.SelectionSet, obj model.DeleteJanparaCrawlSettingExcludeKeywordResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.DeleteJanparaCrawlSettingExcludeKeywordResultSuccess:
		return ec._DeleteJanparaCrawlSettingExcludeKeywordResultSuccess(ctx, sel, &obj)
	case *model.DeleteJanparaCrawlSettingExcludeKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteJanparaCrawlSettingExcludeKeywordResultSuccess(ctx, sel, obj)
	case model.DeleteJanparaCrawlSettingExcludeKeywordResultError:
		return ec._DeleteJanparaCrawlSettingExcludeKeywordResultError(ctx, sel, &obj)
	case *model.DeleteJanparaCrawlSettingExcludeKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteJanparaCrawlSettingExcludeKeywordResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _DeleteJanparaCrawlSettingExcludeKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.DeleteJanparaCrawlSettingExcludeKeywordResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.DeleteJanparaCrawlSettingExcludeKeywordResultValidationFailed:
		return ec._DeleteJanparaCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.DeleteJanparaCrawlSettingExcludeKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteJanparaCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _DeleteJanparaCrawlSettingExcludeProductResult(ctx context.Context, sel ast.SelectionSet, obj model.DeleteJanparaCrawlSettingExcludeProductResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.DeleteJanparaCrawlSettingExcludeProductResultSuccess:
		return ec._DeleteJanparaCrawlSettingExcludeProductResultSuccess(ctx, sel, &obj)
	case *model.DeleteJanparaCrawlSettingExcludeProductResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteJanparaCrawlSettingExcludeProductResultSuccess(ctx, sel, obj)
	case model.DeleteJanparaCrawlSettingExcludeProductResultError:
		return ec._DeleteJanparaCrawlSettingExcludeProductResultError(ctx, sel, &obj)
	case *model.DeleteJanparaCrawlSettingExcludeProductResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteJanparaCrawlSettingExcludeProductResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _DeleteJanparaCrawlSettingExcludeProductResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.DeleteJanparaCrawlSettingExcludeProductResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.DeleteJanparaCrawlSettingExcludeProductResultValidationFailed:
		return ec._DeleteJanparaCrawlSettingExcludeProductResultValidationFailed(ctx, sel, &obj)
	case *model.DeleteJanparaCrawlSettingExcludeProductResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteJanparaCrawlSettingExcludeProductResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _DeleteJanparaCrawlSettingRequiredKeywordResult(ctx context.Context, sel ast.SelectionSet, obj model.DeleteJanparaCrawlSettingRequiredKeywordResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.DeleteJanparaCrawlSettingRequiredKeywordResultSuccess:
		return ec._DeleteJanparaCrawlSettingRequiredKeywordResultSuccess(ctx, sel, &obj)
	case *model.DeleteJanparaCrawlSettingRequiredKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteJanparaCrawlSettingRequiredKeywordResultSuccess(ctx, sel, obj)
	case model.DeleteJanparaCrawlSettingRequiredKeywordResultError:
		return ec._DeleteJanparaCrawlSettingRequiredKeywordResultError(ctx, sel, &obj)
	case *model.DeleteJanparaCrawlSettingRequiredKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteJanparaCrawlSettingRequiredKeywordResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _DeleteJanparaCrawlSettingRequiredKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.DeleteJanparaCrawlSettingRequiredKeywordResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.DeleteJanparaCrawlSettingRequiredKeywordResultValidationFailed:
		return ec._DeleteJanparaCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.DeleteJanparaCrawlSettingRequiredKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteJanparaCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _DeleteMercariCrawlSettingExcludeKeywordResult(ctx context.Context, sel ast.SelectionSet, obj model.DeleteMercariCrawlSettingExcludeKeywordResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.DeleteMercariCrawlSettingExcludeKeywordResultSuccess:
		return ec._DeleteMercariCrawlSettingExcludeKeywordResultSuccess(ctx, sel, &obj)
	case *model.DeleteMercariCrawlSettingExcludeKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteMercariCrawlSettingExcludeKeywordResultSuccess(ctx, sel, obj)
	case model.DeleteMercariCrawlSettingExcludeKeywordResultError:
		return ec._DeleteMercariCrawlSettingExcludeKeywordResultError(ctx, sel, &obj)
	case *model.DeleteMercariCrawlSettingExcludeKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteMercariCrawlSettingExcludeKeywordResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _DeleteMercariCrawlSettingExcludeKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.DeleteMercariCrawlSettingExcludeKeywordResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed:
		return ec._DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _DeleteMercariCrawlSettingExcludeProductResult(ctx context.Context, sel ast.SelectionSet, obj model.DeleteMercariCrawlSettingExcludeProductResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.DeleteMercariCrawlSettingExcludeProductResultSuccess:
		return ec._DeleteMercariCrawlSettingExcludeProductResultSuccess(ctx, sel, &obj)
	case *model.DeleteMercariCrawlSettingExcludeProductResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteMercariCrawlSettingExcludeProductResultSuccess(ctx, sel, obj)
	case model.DeleteMercariCrawlSettingExcludeProductResultError:
		return ec._DeleteMercariCrawlSettingExcludeProductResultError(ctx, sel, &obj)
	case *model.DeleteMercariCrawlSettingExcludeProductResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteMercariCrawlSettingExcludeProductResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _DeleteMercariCrawlSettingExcludeProductResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.DeleteMercariCrawlSettingExcludeProductResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.DeleteMercariCrawlSettingExcludeProductResultValidationFailed:
		return ec._DeleteMercariCrawlSettingExcludeProductResultValidationFailed(ctx, sel, &obj)
	case *model.DeleteMercariCrawlSettingExcludeProductResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteMercariCrawlSettingExcludeProductResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _DeleteMercariCrawlSettingRequiredKeywordResult(ctx context.Context, sel ast.SelectionSet, obj model.DeleteMercariCrawlSettingRequiredKeywordResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.DeleteMercariCrawlSettingRequiredKeywordResultSuccess:
		return ec._DeleteMercariCrawlSettingRequiredKeywordResultSuccess(ctx, sel, &obj)
	case *model.DeleteMercariCrawlSettingRequiredKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteMercariCrawlSettingRequiredKeywordResultSuccess(ctx, sel, obj)
	case model.DeleteMercariCrawlSettingRequiredKeywordResultError:
		return ec._DeleteMercariCrawlSettingRequiredKeywordResultError(ctx, sel, &obj)
	case *model.DeleteMercariCrawlSettingRequiredKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteMercariCrawlSettingRequiredKeywordResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _DeleteMercariCrawlSettingRequiredKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.DeleteMercariCrawlSettingRequiredKeywordResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed:
		return ec._DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _DeletePcKoubouCrawlSettingExcludeKeywordResult(ctx context.Context, sel ast.SelectionSet, obj model.DeletePcKoubouCrawlSettingExcludeKeywordResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.DeletePcKoubouCrawlSettingExcludeKeywordResultSuccess:
		return ec._DeletePcKoubouCrawlSettingExcludeKeywordResultSuccess(ctx, sel, &obj)
	case *model.DeletePcKoubouCrawlSettingExcludeKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeletePcKoubouCrawlSettingExcludeKeywordResultSuccess(ctx, sel, obj)
	case model.DeletePcKoubouCrawlSettingExcludeKeywordResultError:
		return ec._DeletePcKoubouCrawlSettingExcludeKeywordResultError(ctx, sel, &obj)
	case *model.DeletePcKoubouCrawlSettingExcludeKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeletePcKoubouCrawlSettingExcludeKeywordResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _DeletePcKoubouCrawlSettingExcludeKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.DeletePcKoubouCrawlSettingExcludeKeywordResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.DeletePcKoubouCrawlSettingExcludeKeywordResultValidationFailed:
		return ec._DeletePcKoubouCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.DeletePcKoubouCrawlSettingExcludeKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeletePcKoubouCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _DeletePcKoubouCrawlSettingExcludeProductResult(ctx context.Context, sel ast.SelectionSet, obj model.DeletePcKoubouCrawlSettingExcludeProductResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.DeletePcKoubouCrawlSettingExcludeProductResultSuccess:
		return ec._DeletePcKoubouCrawlSettingExcludeProductResultSuccess(ctx, sel, &obj)
	case *model.DeletePcKoubouCrawlSettingExcludeProductResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeletePcKoubouCrawlSettingExcludeProductResultSuccess(ctx, sel, obj)
	case model.DeletePcKoubouCrawlSettingExcludeProductResultError:
		return ec._DeletePcKoubouCrawlSettingExcludeProductResultError(ctx, sel, &obj)
	case *model.DeletePcKoubouCrawlSettingExcludeProductResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeletePcKoubouCrawlSettingExcludeProductResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _DeletePcKoubouCrawlSettingExcludeProductResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.DeletePcKoubouCrawlSettingExcludeProductResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.DeletePcKoubouCrawlSettingExcludeProductResultValidationFailed:
		return ec._DeletePcKoubouCrawlSettingExcludeProductResultValidationFailed(ctx, sel, &obj)
	case *model.DeletePcKoubouCrawlSettingExcludeProductResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeletePcKoubouCrawlSettingExcludeProductResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _DeletePcKoubouCrawlSettingRequiredKeywordResult(ctx context.Context, sel ast.SelectionSet, obj model.DeletePcKoubouCrawlSettingRequiredKeywordResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.DeletePcKoubouCrawlSettingRequiredKeywordResultSuccess:
		return ec._DeletePcKoubouCrawlSettingRequiredKeywordResultSuccess(ctx, sel, &obj)
	case *model.DeletePcKoubouCrawlSettingRequiredKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeletePcKoubouCrawlSettingRequiredKeywordResultSuccess(ctx, sel, obj)
	case model.DeletePcKoubouCrawlSettingRequiredKeywordResultError:
		return ec._DeletePcKoubouCrawlSettingRequiredKeywordResultError(ctx, sel, &obj)
	case *model.DeletePcKoubouCrawlSettingRequiredKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeletePcKoubouCrawlSettingRequiredKeywordResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _DeletePcKoubouCrawlSettingRequiredKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.DeletePcKoubouCrawlSettingRequiredKeywordResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.DeletePcKoubouCrawlSettingRequiredKeywordResultValidationFailed:
		return ec._DeletePcKoubouCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.DeletePcKoubouCrawlSettingRequiredKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeletePcKoubouCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _DeleteProductResult(ctx context.Context, sel ast.SelectionSet, obj model.DeleteProductResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.DeleteProductResultSuccess:
		return ec._DeleteProductResultSuccess(ctx, sel, &obj)
	case *model.DeleteProductResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteProductResultSuccess(ctx, sel, obj)
	case model.DeleteProductResultError:
		return ec._DeleteProductResultError(ctx, sel, &obj)
	case *model.DeleteProductResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteProductResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _DeleteProductResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.DeleteProductResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.DeleteProductResultValidationFailed:
		return ec._DeleteProductResultValidationFailed(ctx, sel, &obj)
	case *model.DeleteProductResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteProductResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingExcludeKeywordResult(ctx context.Context, sel ast.SelectionSet, obj model.DeleteYahooAuctionCrawlSettingExcludeKeywordResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.DeleteYahooAuctionCrawlSettingExcludeKeywordResultSuccess:
		return ec._DeleteYahooAuctionCrawlSettingExcludeKeywordResultSuccess(ctx, sel, &obj)
	case *model.DeleteYahooAuctionCrawlSettingExcludeKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteYahooAuctionCrawlSettingExcludeKeywordResultSuccess(ctx, sel, obj)
	case model.DeleteYahooAuctionCrawlSettingExcludeKeywordResultError:
		return ec._DeleteYahooAuctionCrawlSettingExcludeKeywordResultError(ctx, sel, &obj)
	case *model.DeleteYahooAuctionCrawlSettingExcludeKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteYahooAuctionCrawlSettingExcludeKeywordResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingExcludeKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.DeleteYahooAuctionCrawlSettingExcludeKeywordResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed:
		return ec._DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingExcludeProductResult(ctx context.Context, sel ast.SelectionSet, obj model.DeleteYahooAuctionCrawlSettingExcludeProductResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.DeleteYahooAuctionCrawlSettingExcludeProductResultSuccess:
		return ec._DeleteYahooAuctionCrawlSettingExcludeProductResultSuccess(ctx, sel, &obj)
	case *model.DeleteYahooAuctionCrawlSettingExcludeProductResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteYahooAuctionCrawlSettingExcludeProductResultSuccess(ctx, sel, obj)
	case model.DeleteYahooAuctionCrawlSettingExcludeProductResultError:
		return ec._DeleteYahooAuctionCrawlSettingExcludeProductResultError(ctx, sel, &obj)
	case *model.DeleteYahooAuctionCrawlSettingExcludeProductResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteYahooAuctionCrawlSettingExcludeProductResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingExcludeProductResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.DeleteYahooAuctionCrawlSettingExcludeProductResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.DeleteYahooAuctionCrawlSettingExcludeProductResultValidationFailed:
		return ec._DeleteYahooAuctionCrawlSettingExcludeProductResultValidationFailed(ctx, sel, &obj)
	case *model.DeleteYahooAuctionCrawlSettingExcludeProductResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteYahooAuctionCrawlSettingExcludeProductResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingRequiredKeywordResult(ctx context.Context, sel ast.SelectionSet, obj model.DeleteYahooAuctionCrawlSettingRequiredKeywordResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.DeleteYahooAuctionCrawlSettingRequiredKeywordResultSuccess:
		return ec._DeleteYahooAuctionCrawlSettingRequiredKeywordResultSuccess(ctx, sel, &obj)
	case *model.DeleteYahooAuctionCrawlSettingRequiredKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteYahooAuctionCrawlSettingRequiredKeywordResultSuccess(ctx, sel, obj)
	case model.DeleteYahooAuctionCrawlSettingRequiredKeywordResultError:
		return ec._DeleteYahooAuctionCrawlSettingRequiredKeywordResultError(ctx, sel, &obj)
	case *model.DeleteYahooAuctionCrawlSettingRequiredKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteYahooAuctionCrawlSettingRequiredKeywordResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingRequiredKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.DeleteYahooAuctionCrawlSettingRequiredKeywordResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed:
		return ec._DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Node(ctx context.Context, sel ast.SelectionSet, obj model.Node) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.Product:
		return ec._Product(ctx, sel, &obj)
	case *model.Product:
		if obj == nil {
			return graphql.Null
		}
		return ec._Product(ctx, sel, obj)
	case model.YahooAuctionProduct:
		return ec._YahooAuctionProduct(ctx, sel, &obj)
	case *model.YahooAuctionProduct:
		if obj == nil {
			return graphql.Null
		}
		return ec._YahooAuctionProduct(ctx, sel, obj)
	case model.YahooAuctionCrawlSetting:
		return ec._YahooAuctionCrawlSetting(ctx, sel, &obj)
	case *model.YahooAuctionCrawlSetting:
		if obj == nil {
			return graphql.Null
		}
		return ec._YahooAuctionCrawlSetting(ctx, sel, obj)
	case model.YahooAuctionCrawlSettingExcludeKeyword:
		return ec._YahooAuctionCrawlSettingExcludeKeyword(ctx, sel, &obj)
	case *model.YahooAuctionCrawlSettingExcludeKeyword:
		if obj == nil {
			return graphql.Null
		}
		return ec._YahooAuctionCrawlSettingExcludeKeyword(ctx, sel, obj)
	case model.YahooAuctionCrawlSettingExcludeProduct:
		return ec._YahooAuctionCrawlSettingExcludeProduct(ctx, sel, &obj)
	case *model.YahooAuctionCrawlSettingExcludeProduct:
		if obj == nil {
			return graphql.Null
		}
		return ec._YahooAuctionCrawlSettingExcludeProduct(ctx, sel, obj)
	case model.YahooAuctionCrawlSettingRequiredKeyword:
		return ec._YahooAuctionCrawlSettingRequiredKeyword(ctx, sel, &obj)
	case *model.YahooAuctionCrawlSettingRequiredKeyword:
		if obj == nil {
			return graphql.Null
		}
		return ec._YahooAuctionCrawlSettingRequiredKeyword(ctx, sel, obj)
	case model.YahooAuctionDailyPurchaseSummary:
		return ec._YahooAuctionDailyPurchaseSummary(ctx, sel, &obj)
	case *model.YahooAuctionDailyPurchaseSummary:
		if obj == nil {
			return graphql.Null
		}
		return ec._YahooAuctionDailyPurchaseSummary(ctx, sel, obj)
	case model.YahooFleamarketDailyPurchaseSummary:
		return ec._YahooFleamarketDailyPurchaseSummary(ctx, sel, &obj)
	case *model.YahooFleamarketDailyPurchaseSummary:
		if obj == nil {
			return graphql.Null
		}
		return ec._YahooFleamarketDailyPurchaseSummary(ctx, sel, obj)
	case model.MercariDailyPurchaseSummary:
		return ec._MercariDailyPurchaseSummary(ctx, sel, &obj)
	case *model.MercariDailyPurchaseSummary:
		if obj == nil {
			return graphql.Null
		}
		return ec._MercariDailyPurchaseSummary(ctx, sel, obj)
	case model.MercariProduct:
		return ec._MercariProduct(ctx, sel, &obj)
	case *model.MercariProduct:
		if obj == nil {
			return graphql.Null
		}
		return ec._MercariProduct(ctx, sel, obj)
	case model.MercariCrawlSetting:
		return ec._MercariCrawlSetting(ctx, sel, &obj)
	case *model.MercariCrawlSetting:
		if obj == nil {
			return graphql.Null
		}
		return ec._MercariCrawlSetting(ctx, sel, obj)
	case model.MercariCrawlSettingExcludeKeyword:
		return ec._MercariCrawlSettingExcludeKeyword(ctx, sel, &obj)
	case *model.MercariCrawlSettingExcludeKeyword:
		if obj == nil {
			return graphql.Null
		}
		return ec._MercariCrawlSettingExcludeKeyword(ctx, sel, obj)
	case model.MercariCrawlSettingExcludeProduct:
		return ec._MercariCrawlSettingExcludeProduct(ctx, sel, &obj)
	case *model.MercariCrawlSettingExcludeProduct:
		if obj == nil {
			return graphql.Null
		}
		return ec._MercariCrawlSettingExcludeProduct(ctx, sel, obj)
	case model.MercariCrawlSettingRequiredKeyword:
		return ec._MercariCrawlSettingRequiredKeyword(ctx, sel, &obj)
	case *model.MercariCrawlSettingRequiredKeyword:
		if obj == nil {
			return graphql.Null
		}
		return ec._MercariCrawlSettingRequiredKeyword(ctx, sel, obj)
	case model.JanparaCrawlSetting:
		return ec._JanparaCrawlSetting(ctx, sel, &obj)
	case *model.JanparaCrawlSetting:
		if obj == nil {
			return graphql.Null
		}
		return ec._JanparaCrawlSetting(ctx, sel, obj)
	case model.JanparaCrawlSettingExcludeKeyword:
		return ec._JanparaCrawlSettingExcludeKeyword(ctx, sel, &obj)
	case *model.JanparaCrawlSettingExcludeKeyword:
		if obj == nil {
			return graphql.Null
		}
		return ec._JanparaCrawlSettingExcludeKeyword(ctx, sel, obj)
	case model.JanparaCrawlSettingExcludeProduct:
		return ec._JanparaCrawlSettingExcludeProduct(ctx, sel, &obj)
	case *model.JanparaCrawlSettingExcludeProduct:
		if obj == nil {
			return graphql.Null
		}
		return ec._JanparaCrawlSettingExcludeProduct(ctx, sel, obj)
	case model.JanparaCrawlSettingRequiredKeyword:
		return ec._JanparaCrawlSettingRequiredKeyword(ctx, sel, &obj)
	case *model.JanparaCrawlSettingRequiredKeyword:
		if obj == nil {
			return graphql.Null
		}
		return ec._JanparaCrawlSettingRequiredKeyword(ctx, sel, obj)
	case model.IosysCrawlSetting:
		return ec._IosysCrawlSetting(ctx, sel, &obj)
	case *model.IosysCrawlSetting:
		if obj == nil {
			return graphql.Null
		}
		return ec._IosysCrawlSetting(ctx, sel, obj)
	case model.IosysCrawlSettingExcludeKeyword:
		return ec._IosysCrawlSettingExcludeKeyword(ctx, sel, &obj)
	case *model.IosysCrawlSettingExcludeKeyword:
		if obj == nil {
			return graphql.Null
		}
		return ec._IosysCrawlSettingExcludeKeyword(ctx, sel, obj)
	case model.IosysCrawlSettingExcludeProduct:
		return ec._IosysCrawlSettingExcludeProduct(ctx, sel, &obj)
	case *model.IosysCrawlSettingExcludeProduct:
		if obj == nil {
			return graphql.Null
		}
		return ec._IosysCrawlSettingExcludeProduct(ctx, sel, obj)
	case model.IosysCrawlSettingRequiredKeyword:
		return ec._IosysCrawlSettingRequiredKeyword(ctx, sel, &obj)
	case *model.IosysCrawlSettingRequiredKeyword:
		if obj == nil {
			return graphql.Null
		}
		return ec._IosysCrawlSettingRequiredKeyword(ctx, sel, obj)
	case model.PcKoubouCrawlSetting:
		return ec._PcKoubouCrawlSetting(ctx, sel, &obj)
	case *model.PcKoubouCrawlSetting:
		if obj == nil {
			return graphql.Null
		}
		return ec._PcKoubouCrawlSetting(ctx, sel, obj)
	case model.PcKoubouCrawlSettingExcludeKeyword:
		return ec._PcKoubouCrawlSettingExcludeKeyword(ctx, sel, &obj)
	case *model.PcKoubouCrawlSettingExcludeKeyword:
		if obj == nil {
			return graphql.Null
		}
		return ec._PcKoubouCrawlSettingExcludeKeyword(ctx, sel, obj)
	case model.PcKoubouCrawlSettingExcludeProduct:
		return ec._PcKoubouCrawlSettingExcludeProduct(ctx, sel, &obj)
	case *model.PcKoubouCrawlSettingExcludeProduct:
		if obj == nil {
			return graphql.Null
		}
		return ec._PcKoubouCrawlSettingExcludeProduct(ctx, sel, obj)
	case model.PcKoubouCrawlSettingRequiredKeyword:
		return ec._PcKoubouCrawlSettingRequiredKeyword(ctx, sel, &obj)
	case *model.PcKoubouCrawlSettingRequiredKeyword:
		if obj == nil {
			return graphql.Null
		}
		return ec._PcKoubouCrawlSettingRequiredKeyword(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _ResultBase(ctx context.Context, sel ast.SelectionSet, obj model.ResultBase) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CreateProductResultSuccess:
		return ec._CreateProductResultSuccess(ctx, sel, &obj)
	case *model.CreateProductResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateProductResultSuccess(ctx, sel, obj)
	case model.CreateProductResultError:
		return ec._CreateProductResultError(ctx, sel, &obj)
	case *model.CreateProductResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateProductResultError(ctx, sel, obj)
	case model.UpdateProductResultSuccess:
		return ec._UpdateProductResultSuccess(ctx, sel, &obj)
	case *model.UpdateProductResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateProductResultSuccess(ctx, sel, obj)
	case model.UpdateProductResultError:
		return ec._UpdateProductResultError(ctx, sel, &obj)
	case *model.UpdateProductResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateProductResultError(ctx, sel, obj)
	case model.DeleteProductResultSuccess:
		return ec._DeleteProductResultSuccess(ctx, sel, &obj)
	case *model.DeleteProductResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteProductResultSuccess(ctx, sel, obj)
	case model.DeleteProductResultError:
		return ec._DeleteProductResultError(ctx, sel, &obj)
	case *model.DeleteProductResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteProductResultError(ctx, sel, obj)
	case model.CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess:
		return ec._CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess(ctx, sel, &obj)
	case *model.CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess(ctx, sel, obj)
	case model.CreateYahooAuctionCrawlSettingExcludeKeywordResultError:
		return ec._CreateYahooAuctionCrawlSettingExcludeKeywordResultError(ctx, sel, &obj)
	case *model.CreateYahooAuctionCrawlSettingExcludeKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateYahooAuctionCrawlSettingExcludeKeywordResultError(ctx, sel, obj)
	case model.UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess:
		return ec._UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess(ctx, sel, &obj)
	case *model.UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess(ctx, sel, obj)
	case model.UpdateYahooAuctionCrawlSettingExcludeKeywordResultError:
		return ec._UpdateYahooAuctionCrawlSettingExcludeKeywordResultError(ctx, sel, &obj)
	case *model.UpdateYahooAuctionCrawlSettingExcludeKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateYahooAuctionCrawlSettingExcludeKeywordResultError(ctx, sel, obj)
	case model.DeleteYahooAuctionCrawlSettingExcludeKeywordResultSuccess:
		return ec._DeleteYahooAuctionCrawlSettingExcludeKeywordResultSuccess(ctx, sel, &obj)
	case *model.DeleteYahooAuctionCrawlSettingExcludeKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteYahooAuctionCrawlSettingExcludeKeywordResultSuccess(ctx, sel, obj)
	case model.DeleteYahooAuctionCrawlSettingExcludeKeywordResultError:
		return ec._DeleteYahooAuctionCrawlSettingExcludeKeywordResultError(ctx, sel, &obj)
	case *model.DeleteYahooAuctionCrawlSettingExcludeKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteYahooAuctionCrawlSettingExcludeKeywordResultError(ctx, sel, obj)
	case model.CreateYahooAuctionCrawlSettingExcludeProductResultSuccess:
		return ec._CreateYahooAuctionCrawlSettingExcludeProductResultSuccess(ctx, sel, &obj)
	case *model.CreateYahooAuctionCrawlSettingExcludeProductResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateYahooAuctionCrawlSettingExcludeProductResultSuccess(ctx, sel, obj)
	case model.CreateYahooAuctionCrawlSettingExcludeProductResultError:
		return ec._CreateYahooAuctionCrawlSettingExcludeProductResultError(ctx, sel, &obj)
	case *model.CreateYahooAuctionCrawlSettingExcludeProductResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateYahooAuctionCrawlSettingExcludeProductResultError(ctx, sel, obj)
	case model.UpdateYahooAuctionCrawlSettingExcludeProductResultSuccess:
		return ec._UpdateYahooAuctionCrawlSettingExcludeProductResultSuccess(ctx, sel, &obj)
	case *model.UpdateYahooAuctionCrawlSettingExcludeProductResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateYahooAuctionCrawlSettingExcludeProductResultSuccess(ctx, sel, obj)
	case model.UpdateYahooAuctionCrawlSettingExcludeProductResultError:
		return ec._UpdateYahooAuctionCrawlSettingExcludeProductResultError(ctx, sel, &obj)
	case *model.UpdateYahooAuctionCrawlSettingExcludeProductResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateYahooAuctionCrawlSettingExcludeProductResultError(ctx, sel, obj)
	case model.DeleteYahooAuctionCrawlSettingExcludeProductResultSuccess:
		return ec._DeleteYahooAuctionCrawlSettingExcludeProductResultSuccess(ctx, sel, &obj)
	case *model.DeleteYahooAuctionCrawlSettingExcludeProductResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteYahooAuctionCrawlSettingExcludeProductResultSuccess(ctx, sel, obj)
	case model.DeleteYahooAuctionCrawlSettingExcludeProductResultError:
		return ec._DeleteYahooAuctionCrawlSettingExcludeProductResultError(ctx, sel, &obj)
	case *model.DeleteYahooAuctionCrawlSettingExcludeProductResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteYahooAuctionCrawlSettingExcludeProductResultError(ctx, sel, obj)
	case model.CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess:
		return ec._CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess(ctx, sel, &obj)
	case *model.CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess(ctx, sel, obj)
	case model.CreateYahooAuctionCrawlSettingRequiredKeywordResultError:
		return ec._CreateYahooAuctionCrawlSettingRequiredKeywordResultError(ctx, sel, &obj)
	case *model.CreateYahooAuctionCrawlSettingRequiredKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateYahooAuctionCrawlSettingRequiredKeywordResultError(ctx, sel, obj)
	case model.UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess:
		return ec._UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess(ctx, sel, &obj)
	case *model.UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess(ctx, sel, obj)
	case model.UpdateYahooAuctionCrawlSettingRequiredKeywordResultError:
		return ec._UpdateYahooAuctionCrawlSettingRequiredKeywordResultError(ctx, sel, &obj)
	case *model.UpdateYahooAuctionCrawlSettingRequiredKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateYahooAuctionCrawlSettingRequiredKeywordResultError(ctx, sel, obj)
	case model.DeleteYahooAuctionCrawlSettingRequiredKeywordResultSuccess:
		return ec._DeleteYahooAuctionCrawlSettingRequiredKeywordResultSuccess(ctx, sel, &obj)
	case *model.DeleteYahooAuctionCrawlSettingRequiredKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteYahooAuctionCrawlSettingRequiredKeywordResultSuccess(ctx, sel, obj)
	case model.DeleteYahooAuctionCrawlSettingRequiredKeywordResultError:
		return ec._DeleteYahooAuctionCrawlSettingRequiredKeywordResultError(ctx, sel, &obj)
	case *model.DeleteYahooAuctionCrawlSettingRequiredKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteYahooAuctionCrawlSettingRequiredKeywordResultError(ctx, sel, obj)
	case model.CreateMercariCrawlSettingExcludeKeywordResultSuccess:
		return ec._CreateMercariCrawlSettingExcludeKeywordResultSuccess(ctx, sel, &obj)
	case *model.CreateMercariCrawlSettingExcludeKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateMercariCrawlSettingExcludeKeywordResultSuccess(ctx, sel, obj)
	case model.CreateMercariCrawlSettingExcludeKeywordResultError:
		return ec._CreateMercariCrawlSettingExcludeKeywordResultError(ctx, sel, &obj)
	case *model.CreateMercariCrawlSettingExcludeKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateMercariCrawlSettingExcludeKeywordResultError(ctx, sel, obj)
	case model.UpdateMercariCrawlSettingExcludeKeywordResultSuccess:
		return ec._UpdateMercariCrawlSettingExcludeKeywordResultSuccess(ctx, sel, &obj)
	case *model.UpdateMercariCrawlSettingExcludeKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateMercariCrawlSettingExcludeKeywordResultSuccess(ctx, sel, obj)
	case model.UpdateMercariCrawlSettingExcludeKeywordResultError:
		return ec._UpdateMercariCrawlSettingExcludeKeywordResultError(ctx, sel, &obj)
	case *model.UpdateMercariCrawlSettingExcludeKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateMercariCrawlSettingExcludeKeywordResultError(ctx, sel, obj)
	case model.DeleteMercariCrawlSettingExcludeKeywordResultSuccess:
		return ec._DeleteMercariCrawlSettingExcludeKeywordResultSuccess(ctx, sel, &obj)
	case *model.DeleteMercariCrawlSettingExcludeKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteMercariCrawlSettingExcludeKeywordResultSuccess(ctx, sel, obj)
	case model.DeleteMercariCrawlSettingExcludeKeywordResultError:
		return ec._DeleteMercariCrawlSettingExcludeKeywordResultError(ctx, sel, &obj)
	case *model.DeleteMercariCrawlSettingExcludeKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteMercariCrawlSettingExcludeKeywordResultError(ctx, sel, obj)
	case model.CreateMercariCrawlSettingExcludeProductResultSuccess:
		return ec._CreateMercariCrawlSettingExcludeProductResultSuccess(ctx, sel, &obj)
	case *model.CreateMercariCrawlSettingExcludeProductResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateMercariCrawlSettingExcludeProductResultSuccess(ctx, sel, obj)
	case model.CreateMercariCrawlSettingExcludeProductResultError:
		return ec._CreateMercariCrawlSettingExcludeProductResultError(ctx, sel, &obj)
	case *model.CreateMercariCrawlSettingExcludeProductResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateMercariCrawlSettingExcludeProductResultError(ctx, sel, obj)
	case model.UpdateMercariCrawlSettingExcludeProductResultSuccess:
		return ec._UpdateMercariCrawlSettingExcludeProductResultSuccess(ctx, sel, &obj)
	case *model.UpdateMercariCrawlSettingExcludeProductResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateMercariCrawlSettingExcludeProductResultSuccess(ctx, sel, obj)
	case model.UpdateMercariCrawlSettingExcludeProductResultError:
		return ec._UpdateMercariCrawlSettingExcludeProductResultError(ctx, sel, &obj)
	case *model.UpdateMercariCrawlSettingExcludeProductResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateMercariCrawlSettingExcludeProductResultError(ctx, sel, obj)
	case model.DeleteMercariCrawlSettingExcludeProductResultSuccess:
		return ec._DeleteMercariCrawlSettingExcludeProductResultSuccess(ctx, sel, &obj)
	case *model.DeleteMercariCrawlSettingExcludeProductResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteMercariCrawlSettingExcludeProductResultSuccess(ctx, sel, obj)
	case model.DeleteMercariCrawlSettingExcludeProductResultError:
		return ec._DeleteMercariCrawlSettingExcludeProductResultError(ctx, sel, &obj)
	case *model.DeleteMercariCrawlSettingExcludeProductResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteMercariCrawlSettingExcludeProductResultError(ctx, sel, obj)
	case model.CreateMercariCrawlSettingRequiredKeywordResultSuccess:
		return ec._CreateMercariCrawlSettingRequiredKeywordResultSuccess(ctx, sel, &obj)
	case *model.CreateMercariCrawlSettingRequiredKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateMercariCrawlSettingRequiredKeywordResultSuccess(ctx, sel, obj)
	case model.CreateMercariCrawlSettingRequiredKeywordResultError:
		return ec._CreateMercariCrawlSettingRequiredKeywordResultError(ctx, sel, &obj)
	case *model.CreateMercariCrawlSettingRequiredKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateMercariCrawlSettingRequiredKeywordResultError(ctx, sel, obj)
	case model.UpdateMercariCrawlSettingRequiredKeywordResultSuccess:
		return ec._UpdateMercariCrawlSettingRequiredKeywordResultSuccess(ctx, sel, &obj)
	case *model.UpdateMercariCrawlSettingRequiredKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateMercariCrawlSettingRequiredKeywordResultSuccess(ctx, sel, obj)
	case model.UpdateMercariCrawlSettingRequiredKeywordResultError:
		return ec._UpdateMercariCrawlSettingRequiredKeywordResultError(ctx, sel, &obj)
	case *model.UpdateMercariCrawlSettingRequiredKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateMercariCrawlSettingRequiredKeywordResultError(ctx, sel, obj)
	case model.DeleteMercariCrawlSettingRequiredKeywordResultSuccess:
		return ec._DeleteMercariCrawlSettingRequiredKeywordResultSuccess(ctx, sel, &obj)
	case *model.DeleteMercariCrawlSettingRequiredKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteMercariCrawlSettingRequiredKeywordResultSuccess(ctx, sel, obj)
	case model.DeleteMercariCrawlSettingRequiredKeywordResultError:
		return ec._DeleteMercariCrawlSettingRequiredKeywordResultError(ctx, sel, &obj)
	case *model.DeleteMercariCrawlSettingRequiredKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteMercariCrawlSettingRequiredKeywordResultError(ctx, sel, obj)
	case model.CreateJanparaCrawlSettingExcludeKeywordResultSuccess:
		return ec._CreateJanparaCrawlSettingExcludeKeywordResultSuccess(ctx, sel, &obj)
	case *model.CreateJanparaCrawlSettingExcludeKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateJanparaCrawlSettingExcludeKeywordResultSuccess(ctx, sel, obj)
	case model.CreateJanparaCrawlSettingExcludeKeywordResultError:
		return ec._CreateJanparaCrawlSettingExcludeKeywordResultError(ctx, sel, &obj)
	case *model.CreateJanparaCrawlSettingExcludeKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateJanparaCrawlSettingExcludeKeywordResultError(ctx, sel, obj)
	case model.UpdateJanparaCrawlSettingExcludeKeywordResultSuccess:
		return ec._UpdateJanparaCrawlSettingExcludeKeywordResultSuccess(ctx, sel, &obj)
	case *model.UpdateJanparaCrawlSettingExcludeKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateJanparaCrawlSettingExcludeKeywordResultSuccess(ctx, sel, obj)
	case model.UpdateJanparaCrawlSettingExcludeKeywordResultError:
		return ec._UpdateJanparaCrawlSettingExcludeKeywordResultError(ctx, sel, &obj)
	case *model.UpdateJanparaCrawlSettingExcludeKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateJanparaCrawlSettingExcludeKeywordResultError(ctx, sel, obj)
	case model.DeleteJanparaCrawlSettingExcludeKeywordResultSuccess:
		return ec._DeleteJanparaCrawlSettingExcludeKeywordResultSuccess(ctx, sel, &obj)
	case *model.DeleteJanparaCrawlSettingExcludeKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteJanparaCrawlSettingExcludeKeywordResultSuccess(ctx, sel, obj)
	case model.DeleteJanparaCrawlSettingExcludeKeywordResultError:
		return ec._DeleteJanparaCrawlSettingExcludeKeywordResultError(ctx, sel, &obj)
	case *model.DeleteJanparaCrawlSettingExcludeKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteJanparaCrawlSettingExcludeKeywordResultError(ctx, sel, obj)
	case model.CreateJanparaCrawlSettingExcludeProductResultSuccess:
		return ec._CreateJanparaCrawlSettingExcludeProductResultSuccess(ctx, sel, &obj)
	case *model.CreateJanparaCrawlSettingExcludeProductResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateJanparaCrawlSettingExcludeProductResultSuccess(ctx, sel, obj)
	case model.CreateJanparaCrawlSettingExcludeProductResultError:
		return ec._CreateJanparaCrawlSettingExcludeProductResultError(ctx, sel, &obj)
	case *model.CreateJanparaCrawlSettingExcludeProductResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateJanparaCrawlSettingExcludeProductResultError(ctx, sel, obj)
	case model.UpdateJanparaCrawlSettingExcludeProductResultSuccess:
		return ec._UpdateJanparaCrawlSettingExcludeProductResultSuccess(ctx, sel, &obj)
	case *model.UpdateJanparaCrawlSettingExcludeProductResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateJanparaCrawlSettingExcludeProductResultSuccess(ctx, sel, obj)
	case model.UpdateJanparaCrawlSettingExcludeProductResultError:
		return ec._UpdateJanparaCrawlSettingExcludeProductResultError(ctx, sel, &obj)
	case *model.UpdateJanparaCrawlSettingExcludeProductResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateJanparaCrawlSettingExcludeProductResultError(ctx, sel, obj)
	case model.DeleteJanparaCrawlSettingExcludeProductResultSuccess:
		return ec._DeleteJanparaCrawlSettingExcludeProductResultSuccess(ctx, sel, &obj)
	case *model.DeleteJanparaCrawlSettingExcludeProductResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteJanparaCrawlSettingExcludeProductResultSuccess(ctx, sel, obj)
	case model.DeleteJanparaCrawlSettingExcludeProductResultError:
		return ec._DeleteJanparaCrawlSettingExcludeProductResultError(ctx, sel, &obj)
	case *model.DeleteJanparaCrawlSettingExcludeProductResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteJanparaCrawlSettingExcludeProductResultError(ctx, sel, obj)
	case model.CreateJanparaCrawlSettingRequiredKeywordResultSuccess:
		return ec._CreateJanparaCrawlSettingRequiredKeywordResultSuccess(ctx, sel, &obj)
	case *model.CreateJanparaCrawlSettingRequiredKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateJanparaCrawlSettingRequiredKeywordResultSuccess(ctx, sel, obj)
	case model.CreateJanparaCrawlSettingRequiredKeywordResultError:
		return ec._CreateJanparaCrawlSettingRequiredKeywordResultError(ctx, sel, &obj)
	case *model.CreateJanparaCrawlSettingRequiredKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateJanparaCrawlSettingRequiredKeywordResultError(ctx, sel, obj)
	case model.UpdateJanparaCrawlSettingRequiredKeywordResultSuccess:
		return ec._UpdateJanparaCrawlSettingRequiredKeywordResultSuccess(ctx, sel, &obj)
	case *model.UpdateJanparaCrawlSettingRequiredKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateJanparaCrawlSettingRequiredKeywordResultSuccess(ctx, sel, obj)
	case model.UpdateJanparaCrawlSettingRequiredKeywordResultError:
		return ec._UpdateJanparaCrawlSettingRequiredKeywordResultError(ctx, sel, &obj)
	case *model.UpdateJanparaCrawlSettingRequiredKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateJanparaCrawlSettingRequiredKeywordResultError(ctx, sel, obj)
	case model.DeleteJanparaCrawlSettingRequiredKeywordResultSuccess:
		return ec._DeleteJanparaCrawlSettingRequiredKeywordResultSuccess(ctx, sel, &obj)
	case *model.DeleteJanparaCrawlSettingRequiredKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteJanparaCrawlSettingRequiredKeywordResultSuccess(ctx, sel, obj)
	case model.DeleteJanparaCrawlSettingRequiredKeywordResultError:
		return ec._DeleteJanparaCrawlSettingRequiredKeywordResultError(ctx, sel, &obj)
	case *model.DeleteJanparaCrawlSettingRequiredKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteJanparaCrawlSettingRequiredKeywordResultError(ctx, sel, obj)
	case model.CreateIosysCrawlSettingExcludeKeywordResultSuccess:
		return ec._CreateIosysCrawlSettingExcludeKeywordResultSuccess(ctx, sel, &obj)
	case *model.CreateIosysCrawlSettingExcludeKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateIosysCrawlSettingExcludeKeywordResultSuccess(ctx, sel, obj)
	case model.CreateIosysCrawlSettingExcludeKeywordResultError:
		return ec._CreateIosysCrawlSettingExcludeKeywordResultError(ctx, sel, &obj)
	case *model.CreateIosysCrawlSettingExcludeKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateIosysCrawlSettingExcludeKeywordResultError(ctx, sel, obj)
	case model.UpdateIosysCrawlSettingExcludeKeywordResultSuccess:
		return ec._UpdateIosysCrawlSettingExcludeKeywordResultSuccess(ctx, sel, &obj)
	case *model.UpdateIosysCrawlSettingExcludeKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateIosysCrawlSettingExcludeKeywordResultSuccess(ctx, sel, obj)
	case model.UpdateIosysCrawlSettingExcludeKeywordResultError:
		return ec._UpdateIosysCrawlSettingExcludeKeywordResultError(ctx, sel, &obj)
	case *model.UpdateIosysCrawlSettingExcludeKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateIosysCrawlSettingExcludeKeywordResultError(ctx, sel, obj)
	case model.DeleteIosysCrawlSettingExcludeKeywordResultSuccess:
		return ec._DeleteIosysCrawlSettingExcludeKeywordResultSuccess(ctx, sel, &obj)
	case *model.DeleteIosysCrawlSettingExcludeKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteIosysCrawlSettingExcludeKeywordResultSuccess(ctx, sel, obj)
	case model.DeleteIosysCrawlSettingExcludeKeywordResultError:
		return ec._DeleteIosysCrawlSettingExcludeKeywordResultError(ctx, sel, &obj)
	case *model.DeleteIosysCrawlSettingExcludeKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteIosysCrawlSettingExcludeKeywordResultError(ctx, sel, obj)
	case model.CreateIosysCrawlSettingExcludeProductResultSuccess:
		return ec._CreateIosysCrawlSettingExcludeProductResultSuccess(ctx, sel, &obj)
	case *model.CreateIosysCrawlSettingExcludeProductResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateIosysCrawlSettingExcludeProductResultSuccess(ctx, sel, obj)
	case model.CreateIosysCrawlSettingExcludeProductResultError:
		return ec._CreateIosysCrawlSettingExcludeProductResultError(ctx, sel, &obj)
	case *model.CreateIosysCrawlSettingExcludeProductResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateIosysCrawlSettingExcludeProductResultError(ctx, sel, obj)
	case model.UpdateIosysCrawlSettingExcludeProductResultSuccess:
		return ec._UpdateIosysCrawlSettingExcludeProductResultSuccess(ctx, sel, &obj)
	case *model.UpdateIosysCrawlSettingExcludeProductResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateIosysCrawlSettingExcludeProductResultSuccess(ctx, sel, obj)
	case model.UpdateIosysCrawlSettingExcludeProductResultError:
		return ec._UpdateIosysCrawlSettingExcludeProductResultError(ctx, sel, &obj)
	case *model.UpdateIosysCrawlSettingExcludeProductResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateIosysCrawlSettingExcludeProductResultError(ctx, sel, obj)
	case model.DeleteIosysCrawlSettingExcludeProductResultSuccess:
		return ec._DeleteIosysCrawlSettingExcludeProductResultSuccess(ctx, sel, &obj)
	case *model.DeleteIosysCrawlSettingExcludeProductResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteIosysCrawlSettingExcludeProductResultSuccess(ctx, sel, obj)
	case model.DeleteIosysCrawlSettingExcludeProductResultError:
		return ec._DeleteIosysCrawlSettingExcludeProductResultError(ctx, sel, &obj)
	case *model.DeleteIosysCrawlSettingExcludeProductResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteIosysCrawlSettingExcludeProductResultError(ctx, sel, obj)
	case model.CreateIosysCrawlSettingRequiredKeywordResultSuccess:
		return ec._CreateIosysCrawlSettingRequiredKeywordResultSuccess(ctx, sel, &obj)
	case *model.CreateIosysCrawlSettingRequiredKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateIosysCrawlSettingRequiredKeywordResultSuccess(ctx, sel, obj)
	case model.CreateIosysCrawlSettingRequiredKeywordResultError:
		return ec._CreateIosysCrawlSettingRequiredKeywordResultError(ctx, sel, &obj)
	case *model.CreateIosysCrawlSettingRequiredKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateIosysCrawlSettingRequiredKeywordResultError(ctx, sel, obj)
	case model.UpdateIosysCrawlSettingRequiredKeywordResultSuccess:
		return ec._UpdateIosysCrawlSettingRequiredKeywordResultSuccess(ctx, sel, &obj)
	case *model.UpdateIosysCrawlSettingRequiredKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateIosysCrawlSettingRequiredKeywordResultSuccess(ctx, sel, obj)
	case model.UpdateIosysCrawlSettingRequiredKeywordResultError:
		return ec._UpdateIosysCrawlSettingRequiredKeywordResultError(ctx, sel, &obj)
	case *model.UpdateIosysCrawlSettingRequiredKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateIosysCrawlSettingRequiredKeywordResultError(ctx, sel, obj)
	case model.DeleteIosysCrawlSettingRequiredKeywordResultSuccess:
		return ec._DeleteIosysCrawlSettingRequiredKeywordResultSuccess(ctx, sel, &obj)
	case *model.DeleteIosysCrawlSettingRequiredKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteIosysCrawlSettingRequiredKeywordResultSuccess(ctx, sel, obj)
	case model.DeleteIosysCrawlSettingRequiredKeywordResultError:
		return ec._DeleteIosysCrawlSettingRequiredKeywordResultError(ctx, sel, &obj)
	case *model.DeleteIosysCrawlSettingRequiredKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteIosysCrawlSettingRequiredKeywordResultError(ctx, sel, obj)
	case model.CreatePcKoubouCrawlSettingExcludeKeywordResultSuccess:
		return ec._CreatePcKoubouCrawlSettingExcludeKeywordResultSuccess(ctx, sel, &obj)
	case *model.CreatePcKoubouCrawlSettingExcludeKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreatePcKoubouCrawlSettingExcludeKeywordResultSuccess(ctx, sel, obj)
	case model.CreatePcKoubouCrawlSettingExcludeKeywordResultError:
		return ec._CreatePcKoubouCrawlSettingExcludeKeywordResultError(ctx, sel, &obj)
	case *model.CreatePcKoubouCrawlSettingExcludeKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreatePcKoubouCrawlSettingExcludeKeywordResultError(ctx, sel, obj)
	case model.UpdatePcKoubouCrawlSettingExcludeKeywordResultSuccess:
		return ec._UpdatePcKoubouCrawlSettingExcludeKeywordResultSuccess(ctx, sel, &obj)
	case *model.UpdatePcKoubouCrawlSettingExcludeKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdatePcKoubouCrawlSettingExcludeKeywordResultSuccess(ctx, sel, obj)
	case model.UpdatePcKoubouCrawlSettingExcludeKeywordResultError:
		return ec._UpdatePcKoubouCrawlSettingExcludeKeywordResultError(ctx, sel, &obj)
	case *model.UpdatePcKoubouCrawlSettingExcludeKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdatePcKoubouCrawlSettingExcludeKeywordResultError(ctx, sel, obj)
	case model.DeletePcKoubouCrawlSettingExcludeKeywordResultSuccess:
		return ec._DeletePcKoubouCrawlSettingExcludeKeywordResultSuccess(ctx, sel, &obj)
	case *model.DeletePcKoubouCrawlSettingExcludeKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeletePcKoubouCrawlSettingExcludeKeywordResultSuccess(ctx, sel, obj)
	case model.DeletePcKoubouCrawlSettingExcludeKeywordResultError:
		return ec._DeletePcKoubouCrawlSettingExcludeKeywordResultError(ctx, sel, &obj)
	case *model.DeletePcKoubouCrawlSettingExcludeKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeletePcKoubouCrawlSettingExcludeKeywordResultError(ctx, sel, obj)
	case model.CreatePcKoubouCrawlSettingExcludeProductResultSuccess:
		return ec._CreatePcKoubouCrawlSettingExcludeProductResultSuccess(ctx, sel, &obj)
	case *model.CreatePcKoubouCrawlSettingExcludeProductResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreatePcKoubouCrawlSettingExcludeProductResultSuccess(ctx, sel, obj)
	case model.CreatePcKoubouCrawlSettingExcludeProductResultError:
		return ec._CreatePcKoubouCrawlSettingExcludeProductResultError(ctx, sel, &obj)
	case *model.CreatePcKoubouCrawlSettingExcludeProductResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreatePcKoubouCrawlSettingExcludeProductResultError(ctx, sel, obj)
	case model.UpdatePcKoubouCrawlSettingExcludeProductResultSuccess:
		return ec._UpdatePcKoubouCrawlSettingExcludeProductResultSuccess(ctx, sel, &obj)
	case *model.UpdatePcKoubouCrawlSettingExcludeProductResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdatePcKoubouCrawlSettingExcludeProductResultSuccess(ctx, sel, obj)
	case model.UpdatePcKoubouCrawlSettingExcludeProductResultError:
		return ec._UpdatePcKoubouCrawlSettingExcludeProductResultError(ctx, sel, &obj)
	case *model.UpdatePcKoubouCrawlSettingExcludeProductResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdatePcKoubouCrawlSettingExcludeProductResultError(ctx, sel, obj)
	case model.DeletePcKoubouCrawlSettingExcludeProductResultSuccess:
		return ec._DeletePcKoubouCrawlSettingExcludeProductResultSuccess(ctx, sel, &obj)
	case *model.DeletePcKoubouCrawlSettingExcludeProductResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeletePcKoubouCrawlSettingExcludeProductResultSuccess(ctx, sel, obj)
	case model.DeletePcKoubouCrawlSettingExcludeProductResultError:
		return ec._DeletePcKoubouCrawlSettingExcludeProductResultError(ctx, sel, &obj)
	case *model.DeletePcKoubouCrawlSettingExcludeProductResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeletePcKoubouCrawlSettingExcludeProductResultError(ctx, sel, obj)
	case model.CreatePcKoubouCrawlSettingRequiredKeywordResultSuccess:
		return ec._CreatePcKoubouCrawlSettingRequiredKeywordResultSuccess(ctx, sel, &obj)
	case *model.CreatePcKoubouCrawlSettingRequiredKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreatePcKoubouCrawlSettingRequiredKeywordResultSuccess(ctx, sel, obj)
	case model.CreatePcKoubouCrawlSettingRequiredKeywordResultError:
		return ec._CreatePcKoubouCrawlSettingRequiredKeywordResultError(ctx, sel, &obj)
	case *model.CreatePcKoubouCrawlSettingRequiredKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreatePcKoubouCrawlSettingRequiredKeywordResultError(ctx, sel, obj)
	case model.UpdatePcKoubouCrawlSettingRequiredKeywordResultSuccess:
		return ec._UpdatePcKoubouCrawlSettingRequiredKeywordResultSuccess(ctx, sel, &obj)
	case *model.UpdatePcKoubouCrawlSettingRequiredKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdatePcKoubouCrawlSettingRequiredKeywordResultSuccess(ctx, sel, obj)
	case model.UpdatePcKoubouCrawlSettingRequiredKeywordResultError:
		return ec._UpdatePcKoubouCrawlSettingRequiredKeywordResultError(ctx, sel, &obj)
	case *model.UpdatePcKoubouCrawlSettingRequiredKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdatePcKoubouCrawlSettingRequiredKeywordResultError(ctx, sel, obj)
	case model.DeletePcKoubouCrawlSettingRequiredKeywordResultSuccess:
		return ec._DeletePcKoubouCrawlSettingRequiredKeywordResultSuccess(ctx, sel, &obj)
	case *model.DeletePcKoubouCrawlSettingRequiredKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeletePcKoubouCrawlSettingRequiredKeywordResultSuccess(ctx, sel, obj)
	case model.DeletePcKoubouCrawlSettingRequiredKeywordResultError:
		return ec._DeletePcKoubouCrawlSettingRequiredKeywordResultError(ctx, sel, &obj)
	case *model.DeletePcKoubouCrawlSettingRequiredKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeletePcKoubouCrawlSettingRequiredKeywordResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _UpdateIosysCrawlSettingExcludeKeywordResult(ctx context.Context, sel ast.SelectionSet, obj model.UpdateIosysCrawlSettingExcludeKeywordResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.UpdateIosysCrawlSettingExcludeKeywordResultSuccess:
		return ec._UpdateIosysCrawlSettingExcludeKeywordResultSuccess(ctx, sel, &obj)
	case *model.UpdateIosysCrawlSettingExcludeKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateIosysCrawlSettingExcludeKeywordResultSuccess(ctx, sel, obj)
	case model.UpdateIosysCrawlSettingExcludeKeywordResultError:
		return ec._UpdateIosysCrawlSettingExcludeKeywordResultError(ctx, sel, &obj)
	case *model.UpdateIosysCrawlSettingExcludeKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateIosysCrawlSettingExcludeKeywordResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _UpdateIosysCrawlSettingExcludeKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.UpdateIosysCrawlSettingExcludeKeywordResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.UpdateIosysCrawlSettingExcludeKeywordResultValidationFailed:
		return ec._UpdateIosysCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.UpdateIosysCrawlSettingExcludeKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateIosysCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _UpdateIosysCrawlSettingExcludeProductResult(ctx context.Context, sel ast.SelectionSet, obj model.UpdateIosysCrawlSettingExcludeProductResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.UpdateIosysCrawlSettingExcludeProductResultSuccess:
		return ec._UpdateIosysCrawlSettingExcludeProductResultSuccess(ctx, sel, &obj)
	case *model.UpdateIosysCrawlSettingExcludeProductResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateIosysCrawlSettingExcludeProductResultSuccess(ctx, sel, obj)
	case model.UpdateIosysCrawlSettingExcludeProductResultError:
		return ec._UpdateIosysCrawlSettingExcludeProductResultError(ctx, sel, &obj)
	case *model.UpdateIosysCrawlSettingExcludeProductResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateIosysCrawlSettingExcludeProductResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _UpdateIosysCrawlSettingExcludeProductResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.UpdateIosysCrawlSettingExcludeProductResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.UpdateIosysCrawlSettingExcludeProductResultValidationFailed:
		return ec._UpdateIosysCrawlSettingExcludeProductResultValidationFailed(ctx, sel, &obj)
	case *model.UpdateIosysCrawlSettingExcludeProductResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateIosysCrawlSettingExcludeProductResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _UpdateIosysCrawlSettingRequiredKeywordResult(ctx context.Context, sel ast.SelectionSet, obj model.UpdateIosysCrawlSettingRequiredKeywordResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.UpdateIosysCrawlSettingRequiredKeywordResultSuccess:
		return ec._UpdateIosysCrawlSettingRequiredKeywordResultSuccess(ctx, sel, &obj)
	case *model.UpdateIosysCrawlSettingRequiredKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateIosysCrawlSettingRequiredKeywordResultSuccess(ctx, sel, obj)
	case model.UpdateIosysCrawlSettingRequiredKeywordResultError:
		return ec._UpdateIosysCrawlSettingRequiredKeywordResultError(ctx, sel, &obj)
	case *model.UpdateIosysCrawlSettingRequiredKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateIosysCrawlSettingRequiredKeywordResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _UpdateIosysCrawlSettingRequiredKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.UpdateIosysCrawlSettingRequiredKeywordResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.UpdateIosysCrawlSettingRequiredKeywordResultValidationFailed:
		return ec._UpdateIosysCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.UpdateIosysCrawlSettingRequiredKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateIosysCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _UpdateJanparaCrawlSettingExcludeKeywordResult(ctx context.Context, sel ast.SelectionSet, obj model.UpdateJanparaCrawlSettingExcludeKeywordResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.UpdateJanparaCrawlSettingExcludeKeywordResultSuccess:
		return ec._UpdateJanparaCrawlSettingExcludeKeywordResultSuccess(ctx, sel, &obj)
	case *model.UpdateJanparaCrawlSettingExcludeKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateJanparaCrawlSettingExcludeKeywordResultSuccess(ctx, sel, obj)
	case model.UpdateJanparaCrawlSettingExcludeKeywordResultError:
		return ec._UpdateJanparaCrawlSettingExcludeKeywordResultError(ctx, sel, &obj)
	case *model.UpdateJanparaCrawlSettingExcludeKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateJanparaCrawlSettingExcludeKeywordResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _UpdateJanparaCrawlSettingExcludeKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.UpdateJanparaCrawlSettingExcludeKeywordResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.UpdateJanparaCrawlSettingExcludeKeywordResultValidationFailed:
		return ec._UpdateJanparaCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.UpdateJanparaCrawlSettingExcludeKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateJanparaCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _UpdateJanparaCrawlSettingExcludeProductResult(ctx context.Context, sel ast.SelectionSet, obj model.UpdateJanparaCrawlSettingExcludeProductResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.UpdateJanparaCrawlSettingExcludeProductResultSuccess:
		return ec._UpdateJanparaCrawlSettingExcludeProductResultSuccess(ctx, sel, &obj)
	case *model.UpdateJanparaCrawlSettingExcludeProductResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateJanparaCrawlSettingExcludeProductResultSuccess(ctx, sel, obj)
	case model.UpdateJanparaCrawlSettingExcludeProductResultError:
		return ec._UpdateJanparaCrawlSettingExcludeProductResultError(ctx, sel, &obj)
	case *model.UpdateJanparaCrawlSettingExcludeProductResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateJanparaCrawlSettingExcludeProductResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _UpdateJanparaCrawlSettingExcludeProductResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.UpdateJanparaCrawlSettingExcludeProductResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.UpdateJanparaCrawlSettingExcludeProductResultValidationFailed:
		return ec._UpdateJanparaCrawlSettingExcludeProductResultValidationFailed(ctx, sel, &obj)
	case *model.UpdateJanparaCrawlSettingExcludeProductResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateJanparaCrawlSettingExcludeProductResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _UpdateJanparaCrawlSettingRequiredKeywordResult(ctx context.Context, sel ast.SelectionSet, obj model.UpdateJanparaCrawlSettingRequiredKeywordResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.UpdateJanparaCrawlSettingRequiredKeywordResultSuccess:
		return ec._UpdateJanparaCrawlSettingRequiredKeywordResultSuccess(ctx, sel, &obj)
	case *model.UpdateJanparaCrawlSettingRequiredKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateJanparaCrawlSettingRequiredKeywordResultSuccess(ctx, sel, obj)
	case model.UpdateJanparaCrawlSettingRequiredKeywordResultError:
		return ec._UpdateJanparaCrawlSettingRequiredKeywordResultError(ctx, sel, &obj)
	case *model.UpdateJanparaCrawlSettingRequiredKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateJanparaCrawlSettingRequiredKeywordResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _UpdateJanparaCrawlSettingRequiredKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.UpdateJanparaCrawlSettingRequiredKeywordResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.UpdateJanparaCrawlSettingRequiredKeywordResultValidationFailed:
		return ec._UpdateJanparaCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.UpdateJanparaCrawlSettingRequiredKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateJanparaCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _UpdateMercariCrawlSettingExcludeKeywordResult(ctx context.Context, sel ast.SelectionSet, obj model.UpdateMercariCrawlSettingExcludeKeywordResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.UpdateMercariCrawlSettingExcludeKeywordResultSuccess:
		return ec._UpdateMercariCrawlSettingExcludeKeywordResultSuccess(ctx, sel, &obj)
	case *model.UpdateMercariCrawlSettingExcludeKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateMercariCrawlSettingExcludeKeywordResultSuccess(ctx, sel, obj)
	case model.UpdateMercariCrawlSettingExcludeKeywordResultError:
		return ec._UpdateMercariCrawlSettingExcludeKeywordResultError(ctx, sel, &obj)
	case *model.UpdateMercariCrawlSettingExcludeKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateMercariCrawlSettingExcludeKeywordResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _UpdateMercariCrawlSettingExcludeKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.UpdateMercariCrawlSettingExcludeKeywordResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed:
		return ec._UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _UpdateMercariCrawlSettingExcludeProductResult(ctx context.Context, sel ast.SelectionSet, obj model.UpdateMercariCrawlSettingExcludeProductResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.UpdateMercariCrawlSettingExcludeProductResultSuccess:
		return ec._UpdateMercariCrawlSettingExcludeProductResultSuccess(ctx, sel, &obj)
	case *model.UpdateMercariCrawlSettingExcludeProductResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateMercariCrawlSettingExcludeProductResultSuccess(ctx, sel, obj)
	case model.UpdateMercariCrawlSettingExcludeProductResultError:
		return ec._UpdateMercariCrawlSettingExcludeProductResultError(ctx, sel, &obj)
	case *model.UpdateMercariCrawlSettingExcludeProductResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateMercariCrawlSettingExcludeProductResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _UpdateMercariCrawlSettingExcludeProductResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.UpdateMercariCrawlSettingExcludeProductResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.UpdateMercariCrawlSettingExcludeProductResultValidationFailed:
		return ec._UpdateMercariCrawlSettingExcludeProductResultValidationFailed(ctx, sel, &obj)
	case *model.UpdateMercariCrawlSettingExcludeProductResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateMercariCrawlSettingExcludeProductResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _UpdateMercariCrawlSettingRequiredKeywordResult(ctx context.Context, sel ast.SelectionSet, obj model.UpdateMercariCrawlSettingRequiredKeywordResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.UpdateMercariCrawlSettingRequiredKeywordResultSuccess:
		return ec._UpdateMercariCrawlSettingRequiredKeywordResultSuccess(ctx, sel, &obj)
	case *model.UpdateMercariCrawlSettingRequiredKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateMercariCrawlSettingRequiredKeywordResultSuccess(ctx, sel, obj)
	case model.UpdateMercariCrawlSettingRequiredKeywordResultError:
		return ec._UpdateMercariCrawlSettingRequiredKeywordResultError(ctx, sel, &obj)
	case *model.UpdateMercariCrawlSettingRequiredKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateMercariCrawlSettingRequiredKeywordResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _UpdateMercariCrawlSettingRequiredKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.UpdateMercariCrawlSettingRequiredKeywordResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed:
		return ec._UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _UpdatePcKoubouCrawlSettingExcludeKeywordResult(ctx context.Context, sel ast.SelectionSet, obj model.UpdatePcKoubouCrawlSettingExcludeKeywordResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.UpdatePcKoubouCrawlSettingExcludeKeywordResultSuccess:
		return ec._UpdatePcKoubouCrawlSettingExcludeKeywordResultSuccess(ctx, sel, &obj)
	case *model.UpdatePcKoubouCrawlSettingExcludeKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdatePcKoubouCrawlSettingExcludeKeywordResultSuccess(ctx, sel, obj)
	case model.UpdatePcKoubouCrawlSettingExcludeKeywordResultError:
		return ec._UpdatePcKoubouCrawlSettingExcludeKeywordResultError(ctx, sel, &obj)
	case *model.UpdatePcKoubouCrawlSettingExcludeKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdatePcKoubouCrawlSettingExcludeKeywordResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _UpdatePcKoubouCrawlSettingExcludeKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.UpdatePcKoubouCrawlSettingExcludeKeywordResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.UpdatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed:
		return ec._UpdatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.UpdatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _UpdatePcKoubouCrawlSettingExcludeProductResult(ctx context.Context, sel ast.SelectionSet, obj model.UpdatePcKoubouCrawlSettingExcludeProductResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.UpdatePcKoubouCrawlSettingExcludeProductResultSuccess:
		return ec._UpdatePcKoubouCrawlSettingExcludeProductResultSuccess(ctx, sel, &obj)
	case *model.UpdatePcKoubouCrawlSettingExcludeProductResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdatePcKoubouCrawlSettingExcludeProductResultSuccess(ctx, sel, obj)
	case model.UpdatePcKoubouCrawlSettingExcludeProductResultError:
		return ec._UpdatePcKoubouCrawlSettingExcludeProductResultError(ctx, sel, &obj)
	case *model.UpdatePcKoubouCrawlSettingExcludeProductResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdatePcKoubouCrawlSettingExcludeProductResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _UpdatePcKoubouCrawlSettingExcludeProductResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.UpdatePcKoubouCrawlSettingExcludeProductResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.UpdatePcKoubouCrawlSettingExcludeProductResultValidationFailed:
		return ec._UpdatePcKoubouCrawlSettingExcludeProductResultValidationFailed(ctx, sel, &obj)
	case *model.UpdatePcKoubouCrawlSettingExcludeProductResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdatePcKoubouCrawlSettingExcludeProductResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _UpdatePcKoubouCrawlSettingRequiredKeywordResult(ctx context.Context, sel ast.SelectionSet, obj model.UpdatePcKoubouCrawlSettingRequiredKeywordResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.UpdatePcKoubouCrawlSettingRequiredKeywordResultSuccess:
		return ec._UpdatePcKoubouCrawlSettingRequiredKeywordResultSuccess(ctx, sel, &obj)
	case *model.UpdatePcKoubouCrawlSettingRequiredKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdatePcKoubouCrawlSettingRequiredKeywordResultSuccess(ctx, sel, obj)
	case model.UpdatePcKoubouCrawlSettingRequiredKeywordResultError:
		return ec._UpdatePcKoubouCrawlSettingRequiredKeywordResultError(ctx, sel, &obj)
	case *model.UpdatePcKoubouCrawlSettingRequiredKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdatePcKoubouCrawlSettingRequiredKeywordResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _UpdatePcKoubouCrawlSettingRequiredKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.UpdatePcKoubouCrawlSettingRequiredKeywordResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.UpdatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed:
		return ec._UpdatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.UpdatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _UpdateProductResult(ctx context.Context, sel ast.SelectionSet, obj model.UpdateProductResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.UpdateProductResultSuccess:
		return ec._UpdateProductResultSuccess(ctx, sel, &obj)
	case *model.UpdateProductResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateProductResultSuccess(ctx, sel, obj)
	case model.UpdateProductResultError:
		return ec._UpdateProductResultError(ctx, sel, &obj)
	case *model.UpdateProductResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateProductResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _UpdateProductResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.UpdateProductResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.UpdateProductResultValidationFailed:
		return ec._UpdateProductResultValidationFailed(ctx, sel, &obj)
	case *model.UpdateProductResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateProductResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingExcludeKeywordResult(ctx context.Context, sel ast.SelectionSet, obj model.UpdateYahooAuctionCrawlSettingExcludeKeywordResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess:
		return ec._UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess(ctx, sel, &obj)
	case *model.UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess(ctx, sel, obj)
	case model.UpdateYahooAuctionCrawlSettingExcludeKeywordResultError:
		return ec._UpdateYahooAuctionCrawlSettingExcludeKeywordResultError(ctx, sel, &obj)
	case *model.UpdateYahooAuctionCrawlSettingExcludeKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateYahooAuctionCrawlSettingExcludeKeywordResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingExcludeKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.UpdateYahooAuctionCrawlSettingExcludeKeywordResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed:
		return ec._UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingExcludeProductResult(ctx context.Context, sel ast.SelectionSet, obj model.UpdateYahooAuctionCrawlSettingExcludeProductResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.UpdateYahooAuctionCrawlSettingExcludeProductResultSuccess:
		return ec._UpdateYahooAuctionCrawlSettingExcludeProductResultSuccess(ctx, sel, &obj)
	case *model.UpdateYahooAuctionCrawlSettingExcludeProductResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateYahooAuctionCrawlSettingExcludeProductResultSuccess(ctx, sel, obj)
	case model.UpdateYahooAuctionCrawlSettingExcludeProductResultError:
		return ec._UpdateYahooAuctionCrawlSettingExcludeProductResultError(ctx, sel, &obj)
	case *model.UpdateYahooAuctionCrawlSettingExcludeProductResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateYahooAuctionCrawlSettingExcludeProductResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingExcludeProductResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.UpdateYahooAuctionCrawlSettingExcludeProductResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.UpdateYahooAuctionCrawlSettingExcludeProductResultValidationFailed:
		return ec._UpdateYahooAuctionCrawlSettingExcludeProductResultValidationFailed(ctx, sel, &obj)
	case *model.UpdateYahooAuctionCrawlSettingExcludeProductResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateYahooAuctionCrawlSettingExcludeProductResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingRequiredKeywordResult(ctx context.Context, sel ast.SelectionSet, obj model.UpdateYahooAuctionCrawlSettingRequiredKeywordResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess:
		return ec._UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess(ctx, sel, &obj)
	case *model.UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess(ctx, sel, obj)
	case model.UpdateYahooAuctionCrawlSettingRequiredKeywordResultError:
		return ec._UpdateYahooAuctionCrawlSettingRequiredKeywordResultError(ctx, sel, &obj)
	case *model.UpdateYahooAuctionCrawlSettingRequiredKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateYahooAuctionCrawlSettingRequiredKeywordResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingRequiredKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.UpdateYahooAuctionCrawlSettingRequiredKeywordResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed:
		return ec._UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _UserError(ctx context.Context, sel ast.SelectionSet, obj model.UserError) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CreateProductResultValidationFailed:
		return ec._CreateProductResultValidationFailed(ctx, sel, &obj)
	case *model.CreateProductResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateProductResultValidationFailed(ctx, sel, obj)
	case model.UpdateProductResultValidationFailed:
		return ec._UpdateProductResultValidationFailed(ctx, sel, &obj)
	case *model.UpdateProductResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateProductResultValidationFailed(ctx, sel, obj)
	case model.DeleteProductResultValidationFailed:
		return ec._DeleteProductResultValidationFailed(ctx, sel, &obj)
	case *model.DeleteProductResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteProductResultValidationFailed(ctx, sel, obj)
	case model.CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed:
		return ec._CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, obj)
	case model.UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed:
		return ec._UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, obj)
	case model.DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed:
		return ec._DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, obj)
	case model.CreateYahooAuctionCrawlSettingExcludeProductResultValidationFailed:
		return ec._CreateYahooAuctionCrawlSettingExcludeProductResultValidationFailed(ctx, sel, &obj)
	case *model.CreateYahooAuctionCrawlSettingExcludeProductResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateYahooAuctionCrawlSettingExcludeProductResultValidationFailed(ctx, sel, obj)
	case model.UpdateYahooAuctionCrawlSettingExcludeProductResultValidationFailed:
		return ec._UpdateYahooAuctionCrawlSettingExcludeProductResultValidationFailed(ctx, sel, &obj)
	case *model.UpdateYahooAuctionCrawlSettingExcludeProductResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateYahooAuctionCrawlSettingExcludeProductResultValidationFailed(ctx, sel, obj)
	case model.DeleteYahooAuctionCrawlSettingExcludeProductResultValidationFailed:
		return ec._DeleteYahooAuctionCrawlSettingExcludeProductResultValidationFailed(ctx, sel, &obj)
	case *model.DeleteYahooAuctionCrawlSettingExcludeProductResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteYahooAuctionCrawlSettingExcludeProductResultValidationFailed(ctx, sel, obj)
	case model.CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed:
		return ec._CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, obj)
	case model.UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed:
		return ec._UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, obj)
	case model.DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed:
		return ec._DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, obj)
	case model.CreateMercariCrawlSettingExcludeKeywordResultValidationFailed:
		return ec._CreateMercariCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.CreateMercariCrawlSettingExcludeKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateMercariCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, obj)
	case model.UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed:
		return ec._UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, obj)
	case model.DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed:
		return ec._DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, obj)
	case model.CreateMercariCrawlSettingExcludeProductResultValidationFailed:
		return ec._CreateMercariCrawlSettingExcludeProductResultValidationFailed(ctx, sel, &obj)
	case *model.CreateMercariCrawlSettingExcludeProductResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateMercariCrawlSettingExcludeProductResultValidationFailed(ctx, sel, obj)
	case model.UpdateMercariCrawlSettingExcludeProductResultValidationFailed:
		return ec._UpdateMercariCrawlSettingExcludeProductResultValidationFailed(ctx, sel, &obj)
	case *model.UpdateMercariCrawlSettingExcludeProductResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateMercariCrawlSettingExcludeProductResultValidationFailed(ctx, sel, obj)
	case model.DeleteMercariCrawlSettingExcludeProductResultValidationFailed:
		return ec._DeleteMercariCrawlSettingExcludeProductResultValidationFailed(ctx, sel, &obj)
	case *model.DeleteMercariCrawlSettingExcludeProductResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteMercariCrawlSettingExcludeProductResultValidationFailed(ctx, sel, obj)
	case model.CreateMercariCrawlSettingRequiredKeywordResultValidationFailed:
		return ec._CreateMercariCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.CreateMercariCrawlSettingRequiredKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateMercariCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, obj)
	case model.UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed:
		return ec._UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, obj)
	case model.DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed:
		return ec._DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, obj)
	case model.CreateJanparaCrawlSettingExcludeKeywordResultValidationFailed:
		return ec._CreateJanparaCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.CreateJanparaCrawlSettingExcludeKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateJanparaCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, obj)
	case model.UpdateJanparaCrawlSettingExcludeKeywordResultValidationFailed:
		return ec._UpdateJanparaCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.UpdateJanparaCrawlSettingExcludeKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateJanparaCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, obj)
	case model.DeleteJanparaCrawlSettingExcludeKeywordResultValidationFailed:
		return ec._DeleteJanparaCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.DeleteJanparaCrawlSettingExcludeKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteJanparaCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, obj)
	case model.CreateJanparaCrawlSettingExcludeProductResultValidationFailed:
		return ec._CreateJanparaCrawlSettingExcludeProductResultValidationFailed(ctx, sel, &obj)
	case *model.CreateJanparaCrawlSettingExcludeProductResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateJanparaCrawlSettingExcludeProductResultValidationFailed(ctx, sel, obj)
	case model.UpdateJanparaCrawlSettingExcludeProductResultValidationFailed:
		return ec._UpdateJanparaCrawlSettingExcludeProductResultValidationFailed(ctx, sel, &obj)
	case *model.UpdateJanparaCrawlSettingExcludeProductResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateJanparaCrawlSettingExcludeProductResultValidationFailed(ctx, sel, obj)
	case model.DeleteJanparaCrawlSettingExcludeProductResultValidationFailed:
		return ec._DeleteJanparaCrawlSettingExcludeProductResultValidationFailed(ctx, sel, &obj)
	case *model.DeleteJanparaCrawlSettingExcludeProductResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteJanparaCrawlSettingExcludeProductResultValidationFailed(ctx, sel, obj)
	case model.CreateJanparaCrawlSettingRequiredKeywordResultValidationFailed:
		return ec._CreateJanparaCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.CreateJanparaCrawlSettingRequiredKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateJanparaCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, obj)
	case model.UpdateJanparaCrawlSettingRequiredKeywordResultValidationFailed:
		return ec._UpdateJanparaCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.UpdateJanparaCrawlSettingRequiredKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateJanparaCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, obj)
	case model.DeleteJanparaCrawlSettingRequiredKeywordResultValidationFailed:
		return ec._DeleteJanparaCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.DeleteJanparaCrawlSettingRequiredKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteJanparaCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, obj)
	case model.CreateIosysCrawlSettingExcludeKeywordResultValidationFailed:
		return ec._CreateIosysCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.CreateIosysCrawlSettingExcludeKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateIosysCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, obj)
	case model.UpdateIosysCrawlSettingExcludeKeywordResultValidationFailed:
		return ec._UpdateIosysCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.UpdateIosysCrawlSettingExcludeKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateIosysCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, obj)
	case model.DeleteIosysCrawlSettingExcludeKeywordResultValidationFailed:
		return ec._DeleteIosysCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.DeleteIosysCrawlSettingExcludeKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteIosysCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, obj)
	case model.CreateIosysCrawlSettingExcludeProductResultValidationFailed:
		return ec._CreateIosysCrawlSettingExcludeProductResultValidationFailed(ctx, sel, &obj)
	case *model.CreateIosysCrawlSettingExcludeProductResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateIosysCrawlSettingExcludeProductResultValidationFailed(ctx, sel, obj)
	case model.UpdateIosysCrawlSettingExcludeProductResultValidationFailed:
		return ec._UpdateIosysCrawlSettingExcludeProductResultValidationFailed(ctx, sel, &obj)
	case *model.UpdateIosysCrawlSettingExcludeProductResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateIosysCrawlSettingExcludeProductResultValidationFailed(ctx, sel, obj)
	case model.DeleteIosysCrawlSettingExcludeProductResultValidationFailed:
		return ec._DeleteIosysCrawlSettingExcludeProductResultValidationFailed(ctx, sel, &obj)
	case *model.DeleteIosysCrawlSettingExcludeProductResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteIosysCrawlSettingExcludeProductResultValidationFailed(ctx, sel, obj)
	case model.CreateIosysCrawlSettingRequiredKeywordResultValidationFailed:
		return ec._CreateIosysCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.CreateIosysCrawlSettingRequiredKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateIosysCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, obj)
	case model.UpdateIosysCrawlSettingRequiredKeywordResultValidationFailed:
		return ec._UpdateIosysCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.UpdateIosysCrawlSettingRequiredKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateIosysCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, obj)
	case model.DeleteIosysCrawlSettingRequiredKeywordResultValidationFailed:
		return ec._DeleteIosysCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.DeleteIosysCrawlSettingRequiredKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteIosysCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, obj)
	case model.CreatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed:
		return ec._CreatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.CreatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, obj)
	case model.UpdatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed:
		return ec._UpdatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.UpdatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, obj)
	case model.DeletePcKoubouCrawlSettingExcludeKeywordResultValidationFailed:
		return ec._DeletePcKoubouCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.DeletePcKoubouCrawlSettingExcludeKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeletePcKoubouCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, obj)
	case model.CreatePcKoubouCrawlSettingExcludeProductResultValidationFailed:
		return ec._CreatePcKoubouCrawlSettingExcludeProductResultValidationFailed(ctx, sel, &obj)
	case *model.CreatePcKoubouCrawlSettingExcludeProductResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreatePcKoubouCrawlSettingExcludeProductResultValidationFailed(ctx, sel, obj)
	case model.UpdatePcKoubouCrawlSettingExcludeProductResultValidationFailed:
		return ec._UpdatePcKoubouCrawlSettingExcludeProductResultValidationFailed(ctx, sel, &obj)
	case *model.UpdatePcKoubouCrawlSettingExcludeProductResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdatePcKoubouCrawlSettingExcludeProductResultValidationFailed(ctx, sel, obj)
	case model.DeletePcKoubouCrawlSettingExcludeProductResultValidationFailed:
		return ec._DeletePcKoubouCrawlSettingExcludeProductResultValidationFailed(ctx, sel, &obj)
	case *model.DeletePcKoubouCrawlSettingExcludeProductResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeletePcKoubouCrawlSettingExcludeProductResultValidationFailed(ctx, sel, obj)
	case model.CreatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed:
		return ec._CreatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.CreatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, obj)
	case model.UpdatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed:
		return ec._UpdatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.UpdatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, obj)
	case model.DeletePcKoubouCrawlSettingRequiredKeywordResultValidationFailed:
		return ec._DeletePcKoubouCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.DeletePcKoubouCrawlSettingRequiredKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeletePcKoubouCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var createIosysCrawlSettingExcludeKeywordResultErrorImplementors = []string{"CreateIosysCrawlSettingExcludeKeywordResultError", "CreateIosysCrawlSettingExcludeKeywordResult", "ResultBase"}

func (ec *executionContext) _CreateIosysCrawlSettingExcludeKeywordResultError(ctx context.Context, sel ast.SelectionSet, obj *model.CreateIosysCrawlSettingExcludeKeywordResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createIosysCrawlSettingExcludeKeywordResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateIosysCrawlSettingExcludeKeywordResultError")
		case "ok":
			out.Values[i] = ec._CreateIosysCrawlSettingExcludeKeywordResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._CreateIosysCrawlSettingExcludeKeywordResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createIosysCrawlSettingExcludeKeywordResultSuccessImplementors = []string{"CreateIosysCrawlSettingExcludeKeywordResultSuccess", "CreateIosysCrawlSettingExcludeKeywordResult", "ResultBase"}

func (ec *executionContext) _CreateIosysCrawlSettingExcludeKeywordResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.CreateIosysCrawlSettingExcludeKeywordResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createIosysCrawlSettingExcludeKeywordResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateIosysCrawlSettingExcludeKeywordResultSuccess")
		case "ok":
			out.Values[i] = ec._CreateIosysCrawlSettingExcludeKeywordResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "iosysCrawlSettingExcludeKeyword":
			out.Values[i] = ec._CreateIosysCrawlSettingExcludeKeywordResultSuccess_iosysCrawlSettingExcludeKeyword(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createIosysCrawlSettingExcludeKeywordResultValidationFailedImplementors = []string{"CreateIosysCrawlSettingExcludeKeywordResultValidationFailed", "CreateIosysCrawlSettingExcludeKeywordResultErrors", "UserError"}

func (ec *executionContext) _CreateIosysCrawlSettingExcludeKeywordResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.CreateIosysCrawlSettingExcludeKeywordResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createIosysCrawlSettingExcludeKeywordResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateIosysCrawlSettingExcludeKeywordResultValidationFailed")
		case "code":
			out.Values[i] = ec._CreateIosysCrawlSettingExcludeKeywordResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._CreateIosysCrawlSettingExcludeKeywordResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._CreateIosysCrawlSettingExcludeKeywordResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createIosysCrawlSettingExcludeProductResultErrorImplementors = []string{"CreateIosysCrawlSettingExcludeProductResultError", "CreateIosysCrawlSettingExcludeProductResult", "ResultBase"}

func (ec *executionContext) _CreateIosysCrawlSettingExcludeProductResultError(ctx context.Context, sel ast.SelectionSet, obj *model.CreateIosysCrawlSettingExcludeProductResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createIosysCrawlSettingExcludeProductResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateIosysCrawlSettingExcludeProductResultError")
		case "ok":
			out.Values[i] = ec._CreateIosysCrawlSettingExcludeProductResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._CreateIosysCrawlSettingExcludeProductResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createIosysCrawlSettingExcludeProductResultSuccessImplementors = []string{"CreateIosysCrawlSettingExcludeProductResultSuccess", "CreateIosysCrawlSettingExcludeProductResult", "ResultBase"}

func (ec *executionContext) _CreateIosysCrawlSettingExcludeProductResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.CreateIosysCrawlSettingExcludeProductResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createIosysCrawlSettingExcludeProductResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateIosysCrawlSettingExcludeProductResultSuccess")
		case "ok":
			out.Values[i] = ec._CreateIosysCrawlSettingExcludeProductResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "iosysCrawlSettingExcludeProduct":
			out.Values[i] = ec._CreateIosysCrawlSettingExcludeProductResultSuccess_iosysCrawlSettingExcludeProduct(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createIosysCrawlSettingExcludeProductResultValidationFailedImplementors = []string{"CreateIosysCrawlSettingExcludeProductResultValidationFailed", "CreateIosysCrawlSettingExcludeProductResultErrors", "UserError"}

func (ec *executionContext) _CreateIosysCrawlSettingExcludeProductResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.CreateIosysCrawlSettingExcludeProductResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createIosysCrawlSettingExcludeProductResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateIosysCrawlSettingExcludeProductResultValidationFailed")
		case "code":
			out.Values[i] = ec._CreateIosysCrawlSettingExcludeProductResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._CreateIosysCrawlSettingExcludeProductResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._CreateIosysCrawlSettingExcludeProductResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createIosysCrawlSettingRequiredKeywordResultErrorImplementors = []string{"CreateIosysCrawlSettingRequiredKeywordResultError", "CreateIosysCrawlSettingRequiredKeywordResult", "ResultBase"}

func (ec *executionContext) _CreateIosysCrawlSettingRequiredKeywordResultError(ctx context.Context, sel ast.SelectionSet, obj *model.CreateIosysCrawlSettingRequiredKeywordResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createIosysCrawlSettingRequiredKeywordResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateIosysCrawlSettingRequiredKeywordResultError")
		case "ok":
			out.Values[i] = ec._CreateIosysCrawlSettingRequiredKeywordResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._CreateIosysCrawlSettingRequiredKeywordResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createIosysCrawlSettingRequiredKeywordResultSuccessImplementors = []string{"CreateIosysCrawlSettingRequiredKeywordResultSuccess", "CreateIosysCrawlSettingRequiredKeywordResult", "ResultBase"}

func (ec *executionContext) _CreateIosysCrawlSettingRequiredKeywordResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.CreateIosysCrawlSettingRequiredKeywordResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createIosysCrawlSettingRequiredKeywordResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateIosysCrawlSettingRequiredKeywordResultSuccess")
		case "ok":
			out.Values[i] = ec._CreateIosysCrawlSettingRequiredKeywordResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "iosysCrawlSettingRequiredKeyword":
			out.Values[i] = ec._CreateIosysCrawlSettingRequiredKeywordResultSuccess_iosysCrawlSettingRequiredKeyword(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createIosysCrawlSettingRequiredKeywordResultValidationFailedImplementors = []string{"CreateIosysCrawlSettingRequiredKeywordResultValidationFailed", "CreateIosysCrawlSettingRequiredKeywordResultErrors", "UserError"}

func (ec *executionContext) _CreateIosysCrawlSettingRequiredKeywordResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.CreateIosysCrawlSettingRequiredKeywordResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createIosysCrawlSettingRequiredKeywordResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateIosysCrawlSettingRequiredKeywordResultValidationFailed")
		case "code":
			out.Values[i] = ec._CreateIosysCrawlSettingRequiredKeywordResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._CreateIosysCrawlSettingRequiredKeywordResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._CreateIosysCrawlSettingRequiredKeywordResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createJanparaCrawlSettingExcludeKeywordResultErrorImplementors = []string{"CreateJanparaCrawlSettingExcludeKeywordResultError", "CreateJanparaCrawlSettingExcludeKeywordResult", "ResultBase"}

func (ec *executionContext) _CreateJanparaCrawlSettingExcludeKeywordResultError(ctx context.Context, sel ast.SelectionSet, obj *model.CreateJanparaCrawlSettingExcludeKeywordResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createJanparaCrawlSettingExcludeKeywordResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateJanparaCrawlSettingExcludeKeywordResultError")
		case "ok":
			out.Values[i] = ec._CreateJanparaCrawlSettingExcludeKeywordResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._CreateJanparaCrawlSettingExcludeKeywordResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createJanparaCrawlSettingExcludeKeywordResultSuccessImplementors = []string{"CreateJanparaCrawlSettingExcludeKeywordResultSuccess", "CreateJanparaCrawlSettingExcludeKeywordResult", "ResultBase"}

func (ec *executionContext) _CreateJanparaCrawlSettingExcludeKeywordResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.CreateJanparaCrawlSettingExcludeKeywordResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createJanparaCrawlSettingExcludeKeywordResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateJanparaCrawlSettingExcludeKeywordResultSuccess")
		case "ok":
			out.Values[i] = ec._CreateJanparaCrawlSettingExcludeKeywordResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "janparaCrawlSettingExcludeKeyword":
			out.Values[i] = ec._CreateJanparaCrawlSettingExcludeKeywordResultSuccess_janparaCrawlSettingExcludeKeyword(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createJanparaCrawlSettingExcludeKeywordResultValidationFailedImplementors = []string{"CreateJanparaCrawlSettingExcludeKeywordResultValidationFailed", "CreateJanparaCrawlSettingExcludeKeywordResultErrors", "UserError"}

func (ec *executionContext) _CreateJanparaCrawlSettingExcludeKeywordResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.CreateJanparaCrawlSettingExcludeKeywordResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createJanparaCrawlSettingExcludeKeywordResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateJanparaCrawlSettingExcludeKeywordResultValidationFailed")
		case "code":
			out.Values[i] = ec._CreateJanparaCrawlSettingExcludeKeywordResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._CreateJanparaCrawlSettingExcludeKeywordResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._CreateJanparaCrawlSettingExcludeKeywordResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createJanparaCrawlSettingExcludeProductResultErrorImplementors = []string{"CreateJanparaCrawlSettingExcludeProductResultError", "CreateJanparaCrawlSettingExcludeProductResult", "ResultBase"}

func (ec *executionContext) _CreateJanparaCrawlSettingExcludeProductResultError(ctx context.Context, sel ast.SelectionSet, obj *model.CreateJanparaCrawlSettingExcludeProductResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createJanparaCrawlSettingExcludeProductResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateJanparaCrawlSettingExcludeProductResultError")
		case "ok":
			out.Values[i] = ec._CreateJanparaCrawlSettingExcludeProductResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._CreateJanparaCrawlSettingExcludeProductResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createJanparaCrawlSettingExcludeProductResultSuccessImplementors = []string{"CreateJanparaCrawlSettingExcludeProductResultSuccess", "CreateJanparaCrawlSettingExcludeProductResult", "ResultBase"}

func (ec *executionContext) _CreateJanparaCrawlSettingExcludeProductResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.CreateJanparaCrawlSettingExcludeProductResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createJanparaCrawlSettingExcludeProductResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateJanparaCrawlSettingExcludeProductResultSuccess")
		case "ok":
			out.Values[i] = ec._CreateJanparaCrawlSettingExcludeProductResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "janparaCrawlSettingExcludeProduct":
			out.Values[i] = ec._CreateJanparaCrawlSettingExcludeProductResultSuccess_janparaCrawlSettingExcludeProduct(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createJanparaCrawlSettingExcludeProductResultValidationFailedImplementors = []string{"CreateJanparaCrawlSettingExcludeProductResultValidationFailed", "CreateJanparaCrawlSettingExcludeProductResultErrors", "UserError"}

func (ec *executionContext) _CreateJanparaCrawlSettingExcludeProductResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.CreateJanparaCrawlSettingExcludeProductResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createJanparaCrawlSettingExcludeProductResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateJanparaCrawlSettingExcludeProductResultValidationFailed")
		case "code":
			out.Values[i] = ec._CreateJanparaCrawlSettingExcludeProductResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._CreateJanparaCrawlSettingExcludeProductResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._CreateJanparaCrawlSettingExcludeProductResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createJanparaCrawlSettingRequiredKeywordResultErrorImplementors = []string{"CreateJanparaCrawlSettingRequiredKeywordResultError", "CreateJanparaCrawlSettingRequiredKeywordResult", "ResultBase"}

func (ec *executionContext) _CreateJanparaCrawlSettingRequiredKeywordResultError(ctx context.Context, sel ast.SelectionSet, obj *model.CreateJanparaCrawlSettingRequiredKeywordResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createJanparaCrawlSettingRequiredKeywordResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateJanparaCrawlSettingRequiredKeywordResultError")
		case "ok":
			out.Values[i] = ec._CreateJanparaCrawlSettingRequiredKeywordResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._CreateJanparaCrawlSettingRequiredKeywordResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createJanparaCrawlSettingRequiredKeywordResultSuccessImplementors = []string{"CreateJanparaCrawlSettingRequiredKeywordResultSuccess", "CreateJanparaCrawlSettingRequiredKeywordResult", "ResultBase"}

func (ec *executionContext) _CreateJanparaCrawlSettingRequiredKeywordResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.CreateJanparaCrawlSettingRequiredKeywordResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createJanparaCrawlSettingRequiredKeywordResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateJanparaCrawlSettingRequiredKeywordResultSuccess")
		case "ok":
			out.Values[i] = ec._CreateJanparaCrawlSettingRequiredKeywordResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "janparaCrawlSettingRequiredKeyword":
			out.Values[i] = ec._CreateJanparaCrawlSettingRequiredKeywordResultSuccess_janparaCrawlSettingRequiredKeyword(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createJanparaCrawlSettingRequiredKeywordResultValidationFailedImplementors = []string{"CreateJanparaCrawlSettingRequiredKeywordResultValidationFailed", "CreateJanparaCrawlSettingRequiredKeywordResultErrors", "UserError"}

func (ec *executionContext) _CreateJanparaCrawlSettingRequiredKeywordResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.CreateJanparaCrawlSettingRequiredKeywordResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createJanparaCrawlSettingRequiredKeywordResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateJanparaCrawlSettingRequiredKeywordResultValidationFailed")
		case "code":
			out.Values[i] = ec._CreateJanparaCrawlSettingRequiredKeywordResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._CreateJanparaCrawlSettingRequiredKeywordResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._CreateJanparaCrawlSettingRequiredKeywordResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createMercariCrawlSettingExcludeKeywordResultErrorImplementors = []string{"CreateMercariCrawlSettingExcludeKeywordResultError", "CreateMercariCrawlSettingExcludeKeywordResult", "ResultBase"}

func (ec *executionContext) _CreateMercariCrawlSettingExcludeKeywordResultError(ctx context.Context, sel ast.SelectionSet, obj *model.CreateMercariCrawlSettingExcludeKeywordResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createMercariCrawlSettingExcludeKeywordResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateMercariCrawlSettingExcludeKeywordResultError")
		case "ok":
			out.Values[i] = ec._CreateMercariCrawlSettingExcludeKeywordResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._CreateMercariCrawlSettingExcludeKeywordResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createMercariCrawlSettingExcludeKeywordResultSuccessImplementors = []string{"CreateMercariCrawlSettingExcludeKeywordResultSuccess", "CreateMercariCrawlSettingExcludeKeywordResult", "ResultBase"}

func (ec *executionContext) _CreateMercariCrawlSettingExcludeKeywordResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.CreateMercariCrawlSettingExcludeKeywordResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createMercariCrawlSettingExcludeKeywordResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateMercariCrawlSettingExcludeKeywordResultSuccess")
		case "ok":
			out.Values[i] = ec._CreateMercariCrawlSettingExcludeKeywordResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mercariCrawlSettingExcludeKeyword":
			out.Values[i] = ec._CreateMercariCrawlSettingExcludeKeywordResultSuccess_mercariCrawlSettingExcludeKeyword(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createMercariCrawlSettingExcludeKeywordResultValidationFailedImplementors = []string{"CreateMercariCrawlSettingExcludeKeywordResultValidationFailed", "CreateMercariCrawlSettingExcludeKeywordResultErrors", "UserError"}

func (ec *executionContext) _CreateMercariCrawlSettingExcludeKeywordResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.CreateMercariCrawlSettingExcludeKeywordResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createMercariCrawlSettingExcludeKeywordResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateMercariCrawlSettingExcludeKeywordResultValidationFailed")
		case "code":
			out.Values[i] = ec._CreateMercariCrawlSettingExcludeKeywordResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._CreateMercariCrawlSettingExcludeKeywordResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._CreateMercariCrawlSettingExcludeKeywordResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createMercariCrawlSettingExcludeProductResultErrorImplementors = []string{"CreateMercariCrawlSettingExcludeProductResultError", "CreateMercariCrawlSettingExcludeProductResult", "ResultBase"}

func (ec *executionContext) _CreateMercariCrawlSettingExcludeProductResultError(ctx context.Context, sel ast.SelectionSet, obj *model.CreateMercariCrawlSettingExcludeProductResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createMercariCrawlSettingExcludeProductResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateMercariCrawlSettingExcludeProductResultError")
		case "ok":
			out.Values[i] = ec._CreateMercariCrawlSettingExcludeProductResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._CreateMercariCrawlSettingExcludeProductResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createMercariCrawlSettingExcludeProductResultSuccessImplementors = []string{"CreateMercariCrawlSettingExcludeProductResultSuccess", "CreateMercariCrawlSettingExcludeProductResult", "ResultBase"}

func (ec *executionContext) _CreateMercariCrawlSettingExcludeProductResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.CreateMercariCrawlSettingExcludeProductResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createMercariCrawlSettingExcludeProductResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateMercariCrawlSettingExcludeProductResultSuccess")
		case "ok":
			out.Values[i] = ec._CreateMercariCrawlSettingExcludeProductResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mercariCrawlSettingExcludeProduct":
			out.Values[i] = ec._CreateMercariCrawlSettingExcludeProductResultSuccess_mercariCrawlSettingExcludeProduct(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createMercariCrawlSettingExcludeProductResultValidationFailedImplementors = []string{"CreateMercariCrawlSettingExcludeProductResultValidationFailed", "CreateMercariCrawlSettingExcludeProductResultErrors", "UserError"}

func (ec *executionContext) _CreateMercariCrawlSettingExcludeProductResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.CreateMercariCrawlSettingExcludeProductResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createMercariCrawlSettingExcludeProductResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateMercariCrawlSettingExcludeProductResultValidationFailed")
		case "code":
			out.Values[i] = ec._CreateMercariCrawlSettingExcludeProductResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._CreateMercariCrawlSettingExcludeProductResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._CreateMercariCrawlSettingExcludeProductResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createMercariCrawlSettingRequiredKeywordResultErrorImplementors = []string{"CreateMercariCrawlSettingRequiredKeywordResultError", "CreateMercariCrawlSettingRequiredKeywordResult", "ResultBase"}

func (ec *executionContext) _CreateMercariCrawlSettingRequiredKeywordResultError(ctx context.Context, sel ast.SelectionSet, obj *model.CreateMercariCrawlSettingRequiredKeywordResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createMercariCrawlSettingRequiredKeywordResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateMercariCrawlSettingRequiredKeywordResultError")
		case "ok":
			out.Values[i] = ec._CreateMercariCrawlSettingRequiredKeywordResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._CreateMercariCrawlSettingRequiredKeywordResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createMercariCrawlSettingRequiredKeywordResultSuccessImplementors = []string{"CreateMercariCrawlSettingRequiredKeywordResultSuccess", "CreateMercariCrawlSettingRequiredKeywordResult", "ResultBase"}

func (ec *executionContext) _CreateMercariCrawlSettingRequiredKeywordResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.CreateMercariCrawlSettingRequiredKeywordResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createMercariCrawlSettingRequiredKeywordResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateMercariCrawlSettingRequiredKeywordResultSuccess")
		case "ok":
			out.Values[i] = ec._CreateMercariCrawlSettingRequiredKeywordResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mercariCrawlSettingRequiredKeyword":
			out.Values[i] = ec._CreateMercariCrawlSettingRequiredKeywordResultSuccess_mercariCrawlSettingRequiredKeyword(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createMercariCrawlSettingRequiredKeywordResultValidationFailedImplementors = []string{"CreateMercariCrawlSettingRequiredKeywordResultValidationFailed", "CreateMercariCrawlSettingRequiredKeywordResultErrors", "UserError"}

func (ec *executionContext) _CreateMercariCrawlSettingRequiredKeywordResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.CreateMercariCrawlSettingRequiredKeywordResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createMercariCrawlSettingRequiredKeywordResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateMercariCrawlSettingRequiredKeywordResultValidationFailed")
		case "code":
			out.Values[i] = ec._CreateMercariCrawlSettingRequiredKeywordResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._CreateMercariCrawlSettingRequiredKeywordResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._CreateMercariCrawlSettingRequiredKeywordResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createPcKoubouCrawlSettingExcludeKeywordResultErrorImplementors = []string{"CreatePcKoubouCrawlSettingExcludeKeywordResultError", "CreatePcKoubouCrawlSettingExcludeKeywordResult", "ResultBase"}

func (ec *executionContext) _CreatePcKoubouCrawlSettingExcludeKeywordResultError(ctx context.Context, sel ast.SelectionSet, obj *model.CreatePcKoubouCrawlSettingExcludeKeywordResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createPcKoubouCrawlSettingExcludeKeywordResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreatePcKoubouCrawlSettingExcludeKeywordResultError")
		case "ok":
			out.Values[i] = ec._CreatePcKoubouCrawlSettingExcludeKeywordResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._CreatePcKoubouCrawlSettingExcludeKeywordResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createPcKoubouCrawlSettingExcludeKeywordResultSuccessImplementors = []string{"CreatePcKoubouCrawlSettingExcludeKeywordResultSuccess", "CreatePcKoubouCrawlSettingExcludeKeywordResult", "ResultBase"}

func (ec *executionContext) _CreatePcKoubouCrawlSettingExcludeKeywordResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.CreatePcKoubouCrawlSettingExcludeKeywordResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createPcKoubouCrawlSettingExcludeKeywordResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreatePcKoubouCrawlSettingExcludeKeywordResultSuccess")
		case "ok":
			out.Values[i] = ec._CreatePcKoubouCrawlSettingExcludeKeywordResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pcKoubouCrawlSettingExcludeKeyword":
			out.Values[i] = ec._CreatePcKoubouCrawlSettingExcludeKeywordResultSuccess_pcKoubouCrawlSettingExcludeKeyword(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createPcKoubouCrawlSettingExcludeKeywordResultValidationFailedImplementors = []string{"CreatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed", "CreatePcKoubouCrawlSettingExcludeKeywordResultErrors", "UserError"}

func (ec *executionContext) _CreatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.CreatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createPcKoubouCrawlSettingExcludeKeywordResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed")
		case "code":
			out.Values[i] = ec._CreatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._CreatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._CreatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createPcKoubouCrawlSettingExcludeProductResultErrorImplementors = []string{"CreatePcKoubouCrawlSettingExcludeProductResultError", "CreatePcKoubouCrawlSettingExcludeProductResult", "ResultBase"}

func (ec *executionContext) _CreatePcKoubouCrawlSettingExcludeProductResultError(ctx context.Context, sel ast.SelectionSet, obj *model.CreatePcKoubouCrawlSettingExcludeProductResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createPcKoubouCrawlSettingExcludeProductResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreatePcKoubouCrawlSettingExcludeProductResultError")
		case "ok":
			out.Values[i] = ec._CreatePcKoubouCrawlSettingExcludeProductResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._CreatePcKoubouCrawlSettingExcludeProductResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createPcKoubouCrawlSettingExcludeProductResultSuccessImplementors = []string{"CreatePcKoubouCrawlSettingExcludeProductResultSuccess", "CreatePcKoubouCrawlSettingExcludeProductResult", "ResultBase"}

func (ec *executionContext) _CreatePcKoubouCrawlSettingExcludeProductResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.CreatePcKoubouCrawlSettingExcludeProductResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createPcKoubouCrawlSettingExcludeProductResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreatePcKoubouCrawlSettingExcludeProductResultSuccess")
		case "ok":
			out.Values[i] = ec._CreatePcKoubouCrawlSettingExcludeProductResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pcKoubouCrawlSettingExcludeProduct":
			out.Values[i] = ec._CreatePcKoubouCrawlSettingExcludeProductResultSuccess_pcKoubouCrawlSettingExcludeProduct(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createPcKoubouCrawlSettingExcludeProductResultValidationFailedImplementors = []string{"CreatePcKoubouCrawlSettingExcludeProductResultValidationFailed", "CreatePcKoubouCrawlSettingExcludeProductResultErrors", "UserError"}

func (ec *executionContext) _CreatePcKoubouCrawlSettingExcludeProductResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.CreatePcKoubouCrawlSettingExcludeProductResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createPcKoubouCrawlSettingExcludeProductResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreatePcKoubouCrawlSettingExcludeProductResultValidationFailed")
		case "code":
			out.Values[i] = ec._CreatePcKoubouCrawlSettingExcludeProductResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._CreatePcKoubouCrawlSettingExcludeProductResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._CreatePcKoubouCrawlSettingExcludeProductResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createPcKoubouCrawlSettingRequiredKeywordResultErrorImplementors = []string{"CreatePcKoubouCrawlSettingRequiredKeywordResultError", "CreatePcKoubouCrawlSettingRequiredKeywordResult", "ResultBase"}

func (ec *executionContext) _CreatePcKoubouCrawlSettingRequiredKeywordResultError(ctx context.Context, sel ast.SelectionSet, obj *model.CreatePcKoubouCrawlSettingRequiredKeywordResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createPcKoubouCrawlSettingRequiredKeywordResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreatePcKoubouCrawlSettingRequiredKeywordResultError")
		case "ok":
			out.Values[i] = ec._CreatePcKoubouCrawlSettingRequiredKeywordResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._CreatePcKoubouCrawlSettingRequiredKeywordResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createPcKoubouCrawlSettingRequiredKeywordResultSuccessImplementors = []string{"CreatePcKoubouCrawlSettingRequiredKeywordResultSuccess", "CreatePcKoubouCrawlSettingRequiredKeywordResult", "ResultBase"}

func (ec *executionContext) _CreatePcKoubouCrawlSettingRequiredKeywordResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.CreatePcKoubouCrawlSettingRequiredKeywordResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createPcKoubouCrawlSettingRequiredKeywordResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreatePcKoubouCrawlSettingRequiredKeywordResultSuccess")
		case "ok":
			out.Values[i] = ec._CreatePcKoubouCrawlSettingRequiredKeywordResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pcKoubouCrawlSettingRequiredKeyword":
			out.Values[i] = ec._CreatePcKoubouCrawlSettingRequiredKeywordResultSuccess_pcKoubouCrawlSettingRequiredKeyword(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createPcKoubouCrawlSettingRequiredKeywordResultValidationFailedImplementors = []string{"CreatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed", "CreatePcKoubouCrawlSettingRequiredKeywordResultErrors", "UserError"}

func (ec *executionContext) _CreatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.CreatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createPcKoubouCrawlSettingRequiredKeywordResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed")
		case "code":
			out.Values[i] = ec._CreatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._CreatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._CreatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createProductResultErrorImplementors = []string{"CreateProductResultError", "CreateProductResult", "ResultBase"}

func (ec *executionContext) _CreateProductResultError(ctx context.Context, sel ast.SelectionSet, obj *model.CreateProductResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createProductResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateProductResultError")
		case "ok":
			out.Values[i] = ec._CreateProductResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._CreateProductResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createProductResultSuccessImplementors = []string{"CreateProductResultSuccess", "CreateProductResult", "ResultBase"}

func (ec *executionContext) _CreateProductResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.CreateProductResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createProductResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateProductResultSuccess")
		case "ok":
			out.Values[i] = ec._CreateProductResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "product":
			out.Values[i] = ec._CreateProductResultSuccess_product(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createProductResultValidationFailedImplementors = []string{"CreateProductResultValidationFailed", "CreateProductResultErrors", "UserError"}

func (ec *executionContext) _CreateProductResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.CreateProductResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createProductResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateProductResultValidationFailed")
		case "code":
			out.Values[i] = ec._CreateProductResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._CreateProductResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._CreateProductResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createYahooAuctionCrawlSettingExcludeKeywordResultErrorImplementors = []string{"CreateYahooAuctionCrawlSettingExcludeKeywordResultError", "CreateYahooAuctionCrawlSettingExcludeKeywordResult", "ResultBase"}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingExcludeKeywordResultError(ctx context.Context, sel ast.SelectionSet, obj *model.CreateYahooAuctionCrawlSettingExcludeKeywordResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createYahooAuctionCrawlSettingExcludeKeywordResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateYahooAuctionCrawlSettingExcludeKeywordResultError")
		case "ok":
			out.Values[i] = ec._CreateYahooAuctionCrawlSettingExcludeKeywordResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._CreateYahooAuctionCrawlSettingExcludeKeywordResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createYahooAuctionCrawlSettingExcludeKeywordResultSuccessImplementors = []string{"CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess", "CreateYahooAuctionCrawlSettingExcludeKeywordResult", "ResultBase"}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createYahooAuctionCrawlSettingExcludeKeywordResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess")
		case "ok":
			out.Values[i] = ec._CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "yahooAuctionCrawlSettingExcludeKeyword":
			out.Values[i] = ec._CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess_yahooAuctionCrawlSettingExcludeKeyword(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createYahooAuctionCrawlSettingExcludeKeywordResultValidationFailedImplementors = []string{"CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed", "CreateYahooAuctionCrawlSettingExcludeKeywordResultErrors", "UserError"}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createYahooAuctionCrawlSettingExcludeKeywordResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed")
		case "code":
			out.Values[i] = ec._CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createYahooAuctionCrawlSettingExcludeProductResultErrorImplementors = []string{"CreateYahooAuctionCrawlSettingExcludeProductResultError", "CreateYahooAuctionCrawlSettingExcludeProductResult", "ResultBase"}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingExcludeProductResultError(ctx context.Context, sel ast.SelectionSet, obj *model.CreateYahooAuctionCrawlSettingExcludeProductResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createYahooAuctionCrawlSettingExcludeProductResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateYahooAuctionCrawlSettingExcludeProductResultError")
		case "ok":
			out.Values[i] = ec._CreateYahooAuctionCrawlSettingExcludeProductResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._CreateYahooAuctionCrawlSettingExcludeProductResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createYahooAuctionCrawlSettingExcludeProductResultSuccessImplementors = []string{"CreateYahooAuctionCrawlSettingExcludeProductResultSuccess", "CreateYahooAuctionCrawlSettingExcludeProductResult", "ResultBase"}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingExcludeProductResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.CreateYahooAuctionCrawlSettingExcludeProductResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createYahooAuctionCrawlSettingExcludeProductResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateYahooAuctionCrawlSettingExcludeProductResultSuccess")
		case "ok":
			out.Values[i] = ec._CreateYahooAuctionCrawlSettingExcludeProductResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "yahooAuctionCrawlSettingExcludeProduct":
			out.Values[i] = ec._CreateYahooAuctionCrawlSettingExcludeProductResultSuccess_yahooAuctionCrawlSettingExcludeProduct(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createYahooAuctionCrawlSettingExcludeProductResultValidationFailedImplementors = []string{"CreateYahooAuctionCrawlSettingExcludeProductResultValidationFailed", "CreateYahooAuctionCrawlSettingExcludeProductResultErrors", "UserError"}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingExcludeProductResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.CreateYahooAuctionCrawlSettingExcludeProductResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createYahooAuctionCrawlSettingExcludeProductResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateYahooAuctionCrawlSettingExcludeProductResultValidationFailed")
		case "code":
			out.Values[i] = ec._CreateYahooAuctionCrawlSettingExcludeProductResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._CreateYahooAuctionCrawlSettingExcludeProductResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._CreateYahooAuctionCrawlSettingExcludeProductResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createYahooAuctionCrawlSettingRequiredKeywordResultErrorImplementors = []string{"CreateYahooAuctionCrawlSettingRequiredKeywordResultError", "CreateYahooAuctionCrawlSettingRequiredKeywordResult", "ResultBase"}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingRequiredKeywordResultError(ctx context.Context, sel ast.SelectionSet, obj *model.CreateYahooAuctionCrawlSettingRequiredKeywordResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createYahooAuctionCrawlSettingRequiredKeywordResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateYahooAuctionCrawlSettingRequiredKeywordResultError")
		case "ok":
			out.Values[i] = ec._CreateYahooAuctionCrawlSettingRequiredKeywordResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._CreateYahooAuctionCrawlSettingRequiredKeywordResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createYahooAuctionCrawlSettingRequiredKeywordResultSuccessImplementors = []string{"CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess", "CreateYahooAuctionCrawlSettingRequiredKeywordResult", "ResultBase"}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createYahooAuctionCrawlSettingRequiredKeywordResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess")
		case "ok":
			out.Values[i] = ec._CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "yahooAuctionCrawlSettingRequiredKeyword":
			out.Values[i] = ec._CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess_yahooAuctionCrawlSettingRequiredKeyword(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createYahooAuctionCrawlSettingRequiredKeywordResultValidationFailedImplementors = []string{"CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed", "CreateYahooAuctionCrawlSettingRequiredKeywordResultErrors", "UserError"}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createYahooAuctionCrawlSettingRequiredKeywordResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed")
		case "code":
			out.Values[i] = ec._CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteIosysCrawlSettingExcludeKeywordResultErrorImplementors = []string{"DeleteIosysCrawlSettingExcludeKeywordResultError", "DeleteIosysCrawlSettingExcludeKeywordResult", "ResultBase"}

func (ec *executionContext) _DeleteIosysCrawlSettingExcludeKeywordResultError(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteIosysCrawlSettingExcludeKeywordResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteIosysCrawlSettingExcludeKeywordResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteIosysCrawlSettingExcludeKeywordResultError")
		case "ok":
			out.Values[i] = ec._DeleteIosysCrawlSettingExcludeKeywordResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._DeleteIosysCrawlSettingExcludeKeywordResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteIosysCrawlSettingExcludeKeywordResultSuccessImplementors = []string{"DeleteIosysCrawlSettingExcludeKeywordResultSuccess", "DeleteIosysCrawlSettingExcludeKeywordResult", "ResultBase"}

func (ec *executionContext) _DeleteIosysCrawlSettingExcludeKeywordResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteIosysCrawlSettingExcludeKeywordResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteIosysCrawlSettingExcludeKeywordResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteIosysCrawlSettingExcludeKeywordResultSuccess")
		case "ok":
			out.Values[i] = ec._DeleteIosysCrawlSettingExcludeKeywordResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteIosysCrawlSettingExcludeKeywordResultValidationFailedImplementors = []string{"DeleteIosysCrawlSettingExcludeKeywordResultValidationFailed", "DeleteIosysCrawlSettingExcludeKeywordResultErrors", "UserError"}

func (ec *executionContext) _DeleteIosysCrawlSettingExcludeKeywordResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteIosysCrawlSettingExcludeKeywordResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteIosysCrawlSettingExcludeKeywordResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteIosysCrawlSettingExcludeKeywordResultValidationFailed")
		case "code":
			out.Values[i] = ec._DeleteIosysCrawlSettingExcludeKeywordResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._DeleteIosysCrawlSettingExcludeKeywordResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._DeleteIosysCrawlSettingExcludeKeywordResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteIosysCrawlSettingExcludeProductResultErrorImplementors = []string{"DeleteIosysCrawlSettingExcludeProductResultError", "DeleteIosysCrawlSettingExcludeProductResult", "ResultBase"}

func (ec *executionContext) _DeleteIosysCrawlSettingExcludeProductResultError(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteIosysCrawlSettingExcludeProductResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteIosysCrawlSettingExcludeProductResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteIosysCrawlSettingExcludeProductResultError")
		case "ok":
			out.Values[i] = ec._DeleteIosysCrawlSettingExcludeProductResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._DeleteIosysCrawlSettingExcludeProductResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteIosysCrawlSettingExcludeProductResultSuccessImplementors = []string{"DeleteIosysCrawlSettingExcludeProductResultSuccess", "DeleteIosysCrawlSettingExcludeProductResult", "ResultBase"}

func (ec *executionContext) _DeleteIosysCrawlSettingExcludeProductResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteIosysCrawlSettingExcludeProductResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteIosysCrawlSettingExcludeProductResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteIosysCrawlSettingExcludeProductResultSuccess")
		case "ok":
			out.Values[i] = ec._DeleteIosysCrawlSettingExcludeProductResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteIosysCrawlSettingExcludeProductResultValidationFailedImplementors = []string{"DeleteIosysCrawlSettingExcludeProductResultValidationFailed", "DeleteIosysCrawlSettingExcludeProductResultErrors", "UserError"}

func (ec *executionContext) _DeleteIosysCrawlSettingExcludeProductResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteIosysCrawlSettingExcludeProductResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteIosysCrawlSettingExcludeProductResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteIosysCrawlSettingExcludeProductResultValidationFailed")
		case "code":
			out.Values[i] = ec._DeleteIosysCrawlSettingExcludeProductResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._DeleteIosysCrawlSettingExcludeProductResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._DeleteIosysCrawlSettingExcludeProductResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteIosysCrawlSettingRequiredKeywordResultErrorImplementors = []string{"DeleteIosysCrawlSettingRequiredKeywordResultError", "DeleteIosysCrawlSettingRequiredKeywordResult", "ResultBase"}

func (ec *executionContext) _DeleteIosysCrawlSettingRequiredKeywordResultError(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteIosysCrawlSettingRequiredKeywordResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteIosysCrawlSettingRequiredKeywordResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteIosysCrawlSettingRequiredKeywordResultError")
		case "ok":
			out.Values[i] = ec._DeleteIosysCrawlSettingRequiredKeywordResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._DeleteIosysCrawlSettingRequiredKeywordResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteIosysCrawlSettingRequiredKeywordResultSuccessImplementors = []string{"DeleteIosysCrawlSettingRequiredKeywordResultSuccess", "DeleteIosysCrawlSettingRequiredKeywordResult", "ResultBase"}

func (ec *executionContext) _DeleteIosysCrawlSettingRequiredKeywordResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteIosysCrawlSettingRequiredKeywordResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteIosysCrawlSettingRequiredKeywordResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteIosysCrawlSettingRequiredKeywordResultSuccess")
		case "ok":
			out.Values[i] = ec._DeleteIosysCrawlSettingRequiredKeywordResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteIosysCrawlSettingRequiredKeywordResultValidationFailedImplementors = []string{"DeleteIosysCrawlSettingRequiredKeywordResultValidationFailed", "DeleteIosysCrawlSettingRequiredKeywordResultErrors", "UserError"}

func (ec *executionContext) _DeleteIosysCrawlSettingRequiredKeywordResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteIosysCrawlSettingRequiredKeywordResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteIosysCrawlSettingRequiredKeywordResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteIosysCrawlSettingRequiredKeywordResultValidationFailed")
		case "code":
			out.Values[i] = ec._DeleteIosysCrawlSettingRequiredKeywordResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._DeleteIosysCrawlSettingRequiredKeywordResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._DeleteIosysCrawlSettingRequiredKeywordResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteJanparaCrawlSettingExcludeKeywordResultErrorImplementors = []string{"DeleteJanparaCrawlSettingExcludeKeywordResultError", "DeleteJanparaCrawlSettingExcludeKeywordResult", "ResultBase"}

func (ec *executionContext) _DeleteJanparaCrawlSettingExcludeKeywordResultError(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteJanparaCrawlSettingExcludeKeywordResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteJanparaCrawlSettingExcludeKeywordResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteJanparaCrawlSettingExcludeKeywordResultError")
		case "ok":
			out.Values[i] = ec._DeleteJanparaCrawlSettingExcludeKeywordResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._DeleteJanparaCrawlSettingExcludeKeywordResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteJanparaCrawlSettingExcludeKeywordResultSuccessImplementors = []string{"DeleteJanparaCrawlSettingExcludeKeywordResultSuccess", "DeleteJanparaCrawlSettingExcludeKeywordResult", "ResultBase"}

func (ec *executionContext) _DeleteJanparaCrawlSettingExcludeKeywordResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteJanparaCrawlSettingExcludeKeywordResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteJanparaCrawlSettingExcludeKeywordResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteJanparaCrawlSettingExcludeKeywordResultSuccess")
		case "ok":
			out.Values[i] = ec._DeleteJanparaCrawlSettingExcludeKeywordResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteJanparaCrawlSettingExcludeKeywordResultValidationFailedImplementors = []string{"DeleteJanparaCrawlSettingExcludeKeywordResultValidationFailed", "DeleteJanparaCrawlSettingExcludeKeywordResultErrors", "UserError"}

func (ec *executionContext) _DeleteJanparaCrawlSettingExcludeKeywordResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteJanparaCrawlSettingExcludeKeywordResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteJanparaCrawlSettingExcludeKeywordResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteJanparaCrawlSettingExcludeKeywordResultValidationFailed")
		case "code":
			out.Values[i] = ec._DeleteJanparaCrawlSettingExcludeKeywordResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._DeleteJanparaCrawlSettingExcludeKeywordResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._DeleteJanparaCrawlSettingExcludeKeywordResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteJanparaCrawlSettingExcludeProductResultErrorImplementors = []string{"DeleteJanparaCrawlSettingExcludeProductResultError", "DeleteJanparaCrawlSettingExcludeProductResult", "ResultBase"}

func (ec *executionContext) _DeleteJanparaCrawlSettingExcludeProductResultError(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteJanparaCrawlSettingExcludeProductResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteJanparaCrawlSettingExcludeProductResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteJanparaCrawlSettingExcludeProductResultError")
		case "ok":
			out.Values[i] = ec._DeleteJanparaCrawlSettingExcludeProductResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._DeleteJanparaCrawlSettingExcludeProductResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteJanparaCrawlSettingExcludeProductResultSuccessImplementors = []string{"DeleteJanparaCrawlSettingExcludeProductResultSuccess", "DeleteJanparaCrawlSettingExcludeProductResult", "ResultBase"}

func (ec *executionContext) _DeleteJanparaCrawlSettingExcludeProductResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteJanparaCrawlSettingExcludeProductResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteJanparaCrawlSettingExcludeProductResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteJanparaCrawlSettingExcludeProductResultSuccess")
		case "ok":
			out.Values[i] = ec._DeleteJanparaCrawlSettingExcludeProductResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteJanparaCrawlSettingExcludeProductResultValidationFailedImplementors = []string{"DeleteJanparaCrawlSettingExcludeProductResultValidationFailed", "DeleteJanparaCrawlSettingExcludeProductResultErrors", "UserError"}

func (ec *executionContext) _DeleteJanparaCrawlSettingExcludeProductResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteJanparaCrawlSettingExcludeProductResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteJanparaCrawlSettingExcludeProductResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteJanparaCrawlSettingExcludeProductResultValidationFailed")
		case "code":
			out.Values[i] = ec._DeleteJanparaCrawlSettingExcludeProductResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._DeleteJanparaCrawlSettingExcludeProductResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._DeleteJanparaCrawlSettingExcludeProductResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteJanparaCrawlSettingRequiredKeywordResultErrorImplementors = []string{"DeleteJanparaCrawlSettingRequiredKeywordResultError", "DeleteJanparaCrawlSettingRequiredKeywordResult", "ResultBase"}

func (ec *executionContext) _DeleteJanparaCrawlSettingRequiredKeywordResultError(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteJanparaCrawlSettingRequiredKeywordResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteJanparaCrawlSettingRequiredKeywordResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteJanparaCrawlSettingRequiredKeywordResultError")
		case "ok":
			out.Values[i] = ec._DeleteJanparaCrawlSettingRequiredKeywordResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._DeleteJanparaCrawlSettingRequiredKeywordResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteJanparaCrawlSettingRequiredKeywordResultSuccessImplementors = []string{"DeleteJanparaCrawlSettingRequiredKeywordResultSuccess", "DeleteJanparaCrawlSettingRequiredKeywordResult", "ResultBase"}

func (ec *executionContext) _DeleteJanparaCrawlSettingRequiredKeywordResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteJanparaCrawlSettingRequiredKeywordResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteJanparaCrawlSettingRequiredKeywordResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteJanparaCrawlSettingRequiredKeywordResultSuccess")
		case "ok":
			out.Values[i] = ec._DeleteJanparaCrawlSettingRequiredKeywordResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteJanparaCrawlSettingRequiredKeywordResultValidationFailedImplementors = []string{"DeleteJanparaCrawlSettingRequiredKeywordResultValidationFailed", "DeleteJanparaCrawlSettingRequiredKeywordResultErrors", "UserError"}

func (ec *executionContext) _DeleteJanparaCrawlSettingRequiredKeywordResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteJanparaCrawlSettingRequiredKeywordResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteJanparaCrawlSettingRequiredKeywordResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteJanparaCrawlSettingRequiredKeywordResultValidationFailed")
		case "code":
			out.Values[i] = ec._DeleteJanparaCrawlSettingRequiredKeywordResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._DeleteJanparaCrawlSettingRequiredKeywordResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._DeleteJanparaCrawlSettingRequiredKeywordResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteMercariCrawlSettingExcludeKeywordResultErrorImplementors = []string{"DeleteMercariCrawlSettingExcludeKeywordResultError", "DeleteMercariCrawlSettingExcludeKeywordResult", "ResultBase"}

func (ec *executionContext) _DeleteMercariCrawlSettingExcludeKeywordResultError(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteMercariCrawlSettingExcludeKeywordResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteMercariCrawlSettingExcludeKeywordResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteMercariCrawlSettingExcludeKeywordResultError")
		case "ok":
			out.Values[i] = ec._DeleteMercariCrawlSettingExcludeKeywordResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._DeleteMercariCrawlSettingExcludeKeywordResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteMercariCrawlSettingExcludeKeywordResultSuccessImplementors = []string{"DeleteMercariCrawlSettingExcludeKeywordResultSuccess", "DeleteMercariCrawlSettingExcludeKeywordResult", "ResultBase"}

func (ec *executionContext) _DeleteMercariCrawlSettingExcludeKeywordResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteMercariCrawlSettingExcludeKeywordResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteMercariCrawlSettingExcludeKeywordResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteMercariCrawlSettingExcludeKeywordResultSuccess")
		case "ok":
			out.Values[i] = ec._DeleteMercariCrawlSettingExcludeKeywordResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteMercariCrawlSettingExcludeKeywordResultValidationFailedImplementors = []string{"DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed", "DeleteMercariCrawlSettingExcludeKeywordResultErrors", "UserError"}

func (ec *executionContext) _DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteMercariCrawlSettingExcludeKeywordResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed")
		case "code":
			out.Values[i] = ec._DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteMercariCrawlSettingExcludeProductResultErrorImplementors = []string{"DeleteMercariCrawlSettingExcludeProductResultError", "DeleteMercariCrawlSettingExcludeProductResult", "ResultBase"}

func (ec *executionContext) _DeleteMercariCrawlSettingExcludeProductResultError(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteMercariCrawlSettingExcludeProductResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteMercariCrawlSettingExcludeProductResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteMercariCrawlSettingExcludeProductResultError")
		case "ok":
			out.Values[i] = ec._DeleteMercariCrawlSettingExcludeProductResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._DeleteMercariCrawlSettingExcludeProductResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteMercariCrawlSettingExcludeProductResultSuccessImplementors = []string{"DeleteMercariCrawlSettingExcludeProductResultSuccess", "DeleteMercariCrawlSettingExcludeProductResult", "ResultBase"}

func (ec *executionContext) _DeleteMercariCrawlSettingExcludeProductResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteMercariCrawlSettingExcludeProductResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteMercariCrawlSettingExcludeProductResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteMercariCrawlSettingExcludeProductResultSuccess")
		case "ok":
			out.Values[i] = ec._DeleteMercariCrawlSettingExcludeProductResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteMercariCrawlSettingExcludeProductResultValidationFailedImplementors = []string{"DeleteMercariCrawlSettingExcludeProductResultValidationFailed", "DeleteMercariCrawlSettingExcludeProductResultErrors", "UserError"}

func (ec *executionContext) _DeleteMercariCrawlSettingExcludeProductResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteMercariCrawlSettingExcludeProductResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteMercariCrawlSettingExcludeProductResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteMercariCrawlSettingExcludeProductResultValidationFailed")
		case "code":
			out.Values[i] = ec._DeleteMercariCrawlSettingExcludeProductResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._DeleteMercariCrawlSettingExcludeProductResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._DeleteMercariCrawlSettingExcludeProductResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteMercariCrawlSettingRequiredKeywordResultErrorImplementors = []string{"DeleteMercariCrawlSettingRequiredKeywordResultError", "DeleteMercariCrawlSettingRequiredKeywordResult", "ResultBase"}

func (ec *executionContext) _DeleteMercariCrawlSettingRequiredKeywordResultError(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteMercariCrawlSettingRequiredKeywordResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteMercariCrawlSettingRequiredKeywordResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteMercariCrawlSettingRequiredKeywordResultError")
		case "ok":
			out.Values[i] = ec._DeleteMercariCrawlSettingRequiredKeywordResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._DeleteMercariCrawlSettingRequiredKeywordResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteMercariCrawlSettingRequiredKeywordResultSuccessImplementors = []string{"DeleteMercariCrawlSettingRequiredKeywordResultSuccess", "DeleteMercariCrawlSettingRequiredKeywordResult", "ResultBase"}

func (ec *executionContext) _DeleteMercariCrawlSettingRequiredKeywordResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteMercariCrawlSettingRequiredKeywordResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteMercariCrawlSettingRequiredKeywordResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteMercariCrawlSettingRequiredKeywordResultSuccess")
		case "ok":
			out.Values[i] = ec._DeleteMercariCrawlSettingRequiredKeywordResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteMercariCrawlSettingRequiredKeywordResultValidationFailedImplementors = []string{"DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed", "DeleteMercariCrawlSettingRequiredKeywordResultErrors", "UserError"}

func (ec *executionContext) _DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteMercariCrawlSettingRequiredKeywordResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed")
		case "code":
			out.Values[i] = ec._DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deletePcKoubouCrawlSettingExcludeKeywordResultErrorImplementors = []string{"DeletePcKoubouCrawlSettingExcludeKeywordResultError", "DeletePcKoubouCrawlSettingExcludeKeywordResult", "ResultBase"}

func (ec *executionContext) _DeletePcKoubouCrawlSettingExcludeKeywordResultError(ctx context.Context, sel ast.SelectionSet, obj *model.DeletePcKoubouCrawlSettingExcludeKeywordResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deletePcKoubouCrawlSettingExcludeKeywordResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeletePcKoubouCrawlSettingExcludeKeywordResultError")
		case "ok":
			out.Values[i] = ec._DeletePcKoubouCrawlSettingExcludeKeywordResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._DeletePcKoubouCrawlSettingExcludeKeywordResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deletePcKoubouCrawlSettingExcludeKeywordResultSuccessImplementors = []string{"DeletePcKoubouCrawlSettingExcludeKeywordResultSuccess", "DeletePcKoubouCrawlSettingExcludeKeywordResult", "ResultBase"}

func (ec *executionContext) _DeletePcKoubouCrawlSettingExcludeKeywordResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.DeletePcKoubouCrawlSettingExcludeKeywordResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deletePcKoubouCrawlSettingExcludeKeywordResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeletePcKoubouCrawlSettingExcludeKeywordResultSuccess")
		case "ok":
			out.Values[i] = ec._DeletePcKoubouCrawlSettingExcludeKeywordResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deletePcKoubouCrawlSettingExcludeKeywordResultValidationFailedImplementors = []string{"DeletePcKoubouCrawlSettingExcludeKeywordResultValidationFailed", "DeletePcKoubouCrawlSettingExcludeKeywordResultErrors", "UserError"}

func (ec *executionContext) _DeletePcKoubouCrawlSettingExcludeKeywordResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.DeletePcKoubouCrawlSettingExcludeKeywordResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deletePcKoubouCrawlSettingExcludeKeywordResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeletePcKoubouCrawlSettingExcludeKeywordResultValidationFailed")
		case "code":
			out.Values[i] = ec._DeletePcKoubouCrawlSettingExcludeKeywordResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._DeletePcKoubouCrawlSettingExcludeKeywordResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._DeletePcKoubouCrawlSettingExcludeKeywordResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deletePcKoubouCrawlSettingExcludeProductResultErrorImplementors = []string{"DeletePcKoubouCrawlSettingExcludeProductResultError", "DeletePcKoubouCrawlSettingExcludeProductResult", "ResultBase"}

func (ec *executionContext) _DeletePcKoubouCrawlSettingExcludeProductResultError(ctx context.Context, sel ast.SelectionSet, obj *model.DeletePcKoubouCrawlSettingExcludeProductResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deletePcKoubouCrawlSettingExcludeProductResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeletePcKoubouCrawlSettingExcludeProductResultError")
		case "ok":
			out.Values[i] = ec._DeletePcKoubouCrawlSettingExcludeProductResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._DeletePcKoubouCrawlSettingExcludeProductResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deletePcKoubouCrawlSettingExcludeProductResultSuccessImplementors = []string{"DeletePcKoubouCrawlSettingExcludeProductResultSuccess", "DeletePcKoubouCrawlSettingExcludeProductResult", "ResultBase"}

func (ec *executionContext) _DeletePcKoubouCrawlSettingExcludeProductResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.DeletePcKoubouCrawlSettingExcludeProductResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deletePcKoubouCrawlSettingExcludeProductResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeletePcKoubouCrawlSettingExcludeProductResultSuccess")
		case "ok":
			out.Values[i] = ec._DeletePcKoubouCrawlSettingExcludeProductResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deletePcKoubouCrawlSettingExcludeProductResultValidationFailedImplementors = []string{"DeletePcKoubouCrawlSettingExcludeProductResultValidationFailed", "DeletePcKoubouCrawlSettingExcludeProductResultErrors", "UserError"}

func (ec *executionContext) _DeletePcKoubouCrawlSettingExcludeProductResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.DeletePcKoubouCrawlSettingExcludeProductResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deletePcKoubouCrawlSettingExcludeProductResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeletePcKoubouCrawlSettingExcludeProductResultValidationFailed")
		case "code":
			out.Values[i] = ec._DeletePcKoubouCrawlSettingExcludeProductResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._DeletePcKoubouCrawlSettingExcludeProductResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._DeletePcKoubouCrawlSettingExcludeProductResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deletePcKoubouCrawlSettingRequiredKeywordResultErrorImplementors = []string{"DeletePcKoubouCrawlSettingRequiredKeywordResultError", "DeletePcKoubouCrawlSettingRequiredKeywordResult", "ResultBase"}

func (ec *executionContext) _DeletePcKoubouCrawlSettingRequiredKeywordResultError(ctx context.Context, sel ast.SelectionSet, obj *model.DeletePcKoubouCrawlSettingRequiredKeywordResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deletePcKoubouCrawlSettingRequiredKeywordResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeletePcKoubouCrawlSettingRequiredKeywordResultError")
		case "ok":
			out.Values[i] = ec._DeletePcKoubouCrawlSettingRequiredKeywordResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._DeletePcKoubouCrawlSettingRequiredKeywordResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deletePcKoubouCrawlSettingRequiredKeywordResultSuccessImplementors = []string{"DeletePcKoubouCrawlSettingRequiredKeywordResultSuccess", "DeletePcKoubouCrawlSettingRequiredKeywordResult", "ResultBase"}

func (ec *executionContext) _DeletePcKoubouCrawlSettingRequiredKeywordResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.DeletePcKoubouCrawlSettingRequiredKeywordResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deletePcKoubouCrawlSettingRequiredKeywordResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeletePcKoubouCrawlSettingRequiredKeywordResultSuccess")
		case "ok":
			out.Values[i] = ec._DeletePcKoubouCrawlSettingRequiredKeywordResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deletePcKoubouCrawlSettingRequiredKeywordResultValidationFailedImplementors = []string{"DeletePcKoubouCrawlSettingRequiredKeywordResultValidationFailed", "DeletePcKoubouCrawlSettingRequiredKeywordResultErrors", "UserError"}

func (ec *executionContext) _DeletePcKoubouCrawlSettingRequiredKeywordResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.DeletePcKoubouCrawlSettingRequiredKeywordResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deletePcKoubouCrawlSettingRequiredKeywordResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeletePcKoubouCrawlSettingRequiredKeywordResultValidationFailed")
		case "code":
			out.Values[i] = ec._DeletePcKoubouCrawlSettingRequiredKeywordResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._DeletePcKoubouCrawlSettingRequiredKeywordResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._DeletePcKoubouCrawlSettingRequiredKeywordResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteProductResultErrorImplementors = []string{"DeleteProductResultError", "DeleteProductResult", "ResultBase"}

func (ec *executionContext) _DeleteProductResultError(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteProductResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteProductResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteProductResultError")
		case "ok":
			out.Values[i] = ec._DeleteProductResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._DeleteProductResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteProductResultSuccessImplementors = []string{"DeleteProductResultSuccess", "DeleteProductResult", "ResultBase"}

func (ec *executionContext) _DeleteProductResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteProductResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteProductResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteProductResultSuccess")
		case "ok":
			out.Values[i] = ec._DeleteProductResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteProductResultValidationFailedImplementors = []string{"DeleteProductResultValidationFailed", "DeleteProductResultErrors", "UserError"}

func (ec *executionContext) _DeleteProductResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteProductResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteProductResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteProductResultValidationFailed")
		case "code":
			out.Values[i] = ec._DeleteProductResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._DeleteProductResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._DeleteProductResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteYahooAuctionCrawlSettingExcludeKeywordResultErrorImplementors = []string{"DeleteYahooAuctionCrawlSettingExcludeKeywordResultError", "DeleteYahooAuctionCrawlSettingExcludeKeywordResult", "ResultBase"}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingExcludeKeywordResultError(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteYahooAuctionCrawlSettingExcludeKeywordResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteYahooAuctionCrawlSettingExcludeKeywordResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteYahooAuctionCrawlSettingExcludeKeywordResultError")
		case "ok":
			out.Values[i] = ec._DeleteYahooAuctionCrawlSettingExcludeKeywordResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._DeleteYahooAuctionCrawlSettingExcludeKeywordResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteYahooAuctionCrawlSettingExcludeKeywordResultSuccessImplementors = []string{"DeleteYahooAuctionCrawlSettingExcludeKeywordResultSuccess", "DeleteYahooAuctionCrawlSettingExcludeKeywordResult", "ResultBase"}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingExcludeKeywordResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteYahooAuctionCrawlSettingExcludeKeywordResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteYahooAuctionCrawlSettingExcludeKeywordResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteYahooAuctionCrawlSettingExcludeKeywordResultSuccess")
		case "ok":
			out.Values[i] = ec._DeleteYahooAuctionCrawlSettingExcludeKeywordResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailedImplementors = []string{"DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed", "DeleteYahooAuctionCrawlSettingExcludeKeywordResultErrors", "UserError"}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed")
		case "code":
			out.Values[i] = ec._DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteYahooAuctionCrawlSettingExcludeProductResultErrorImplementors = []string{"DeleteYahooAuctionCrawlSettingExcludeProductResultError", "DeleteYahooAuctionCrawlSettingExcludeProductResult", "ResultBase"}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingExcludeProductResultError(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteYahooAuctionCrawlSettingExcludeProductResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteYahooAuctionCrawlSettingExcludeProductResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteYahooAuctionCrawlSettingExcludeProductResultError")
		case "ok":
			out.Values[i] = ec._DeleteYahooAuctionCrawlSettingExcludeProductResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._DeleteYahooAuctionCrawlSettingExcludeProductResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteYahooAuctionCrawlSettingExcludeProductResultSuccessImplementors = []string{"DeleteYahooAuctionCrawlSettingExcludeProductResultSuccess", "DeleteYahooAuctionCrawlSettingExcludeProductResult", "ResultBase"}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingExcludeProductResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteYahooAuctionCrawlSettingExcludeProductResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteYahooAuctionCrawlSettingExcludeProductResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteYahooAuctionCrawlSettingExcludeProductResultSuccess")
		case "ok":
			out.Values[i] = ec._DeleteYahooAuctionCrawlSettingExcludeProductResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteYahooAuctionCrawlSettingExcludeProductResultValidationFailedImplementors = []string{"DeleteYahooAuctionCrawlSettingExcludeProductResultValidationFailed", "DeleteYahooAuctionCrawlSettingExcludeProductResultErrors", "UserError"}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingExcludeProductResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteYahooAuctionCrawlSettingExcludeProductResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteYahooAuctionCrawlSettingExcludeProductResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteYahooAuctionCrawlSettingExcludeProductResultValidationFailed")
		case "code":
			out.Values[i] = ec._DeleteYahooAuctionCrawlSettingExcludeProductResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._DeleteYahooAuctionCrawlSettingExcludeProductResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._DeleteYahooAuctionCrawlSettingExcludeProductResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteYahooAuctionCrawlSettingRequiredKeywordResultErrorImplementors = []string{"DeleteYahooAuctionCrawlSettingRequiredKeywordResultError", "DeleteYahooAuctionCrawlSettingRequiredKeywordResult", "ResultBase"}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingRequiredKeywordResultError(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteYahooAuctionCrawlSettingRequiredKeywordResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteYahooAuctionCrawlSettingRequiredKeywordResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteYahooAuctionCrawlSettingRequiredKeywordResultError")
		case "ok":
			out.Values[i] = ec._DeleteYahooAuctionCrawlSettingRequiredKeywordResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._DeleteYahooAuctionCrawlSettingRequiredKeywordResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteYahooAuctionCrawlSettingRequiredKeywordResultSuccessImplementors = []string{"DeleteYahooAuctionCrawlSettingRequiredKeywordResultSuccess", "DeleteYahooAuctionCrawlSettingRequiredKeywordResult", "ResultBase"}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingRequiredKeywordResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteYahooAuctionCrawlSettingRequiredKeywordResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteYahooAuctionCrawlSettingRequiredKeywordResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteYahooAuctionCrawlSettingRequiredKeywordResultSuccess")
		case "ok":
			out.Values[i] = ec._DeleteYahooAuctionCrawlSettingRequiredKeywordResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailedImplementors = []string{"DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed", "DeleteYahooAuctionCrawlSettingRequiredKeywordResultErrors", "UserError"}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed")
		case "code":
			out.Values[i] = ec._DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var errorDetailImplementors = []string{"ErrorDetail"}

func (ec *executionContext) _ErrorDetail(ctx context.Context, sel ast.SelectionSet, obj *model.ErrorDetail) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, errorDetailImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ErrorDetail")
		case "field":
			out.Values[i] = ec._ErrorDetail_field(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ErrorDetail_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var iosysCrawlSettingImplementors = []string{"IosysCrawlSetting", "Node"}

func (ec *executionContext) _IosysCrawlSetting(ctx context.Context, sel ast.SelectionSet, obj *model.IosysCrawlSetting) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, iosysCrawlSettingImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IosysCrawlSetting")
		case "id":
			out.Values[i] = ec._IosysCrawlSetting_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "productId":
			out.Values[i] = ec._IosysCrawlSetting_productId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "keyword":
			out.Values[i] = ec._IosysCrawlSetting_keyword(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "minPrice":
			out.Values[i] = ec._IosysCrawlSetting_minPrice(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "maxPrice":
			out.Values[i] = ec._IosysCrawlSetting_maxPrice(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "enabled":
			out.Values[i] = ec._IosysCrawlSetting_enabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._IosysCrawlSetting_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._IosysCrawlSetting_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "iosysCrawlSettingExcludeKeywords":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._IosysCrawlSetting_iosysCrawlSettingExcludeKeywords(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "iosysCrawlSettingExcludeProducts":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._IosysCrawlSetting_iosysCrawlSettingExcludeProducts(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "iosysCrawlSettingRequiredKeywords":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._IosysCrawlSetting_iosysCrawlSettingRequiredKeywords(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var iosysCrawlSettingExcludeKeywordImplementors = []string{"IosysCrawlSettingExcludeKeyword", "Node"}

func (ec *executionContext) _IosysCrawlSettingExcludeKeyword(ctx context.Context, sel ast.SelectionSet, obj *model.IosysCrawlSettingExcludeKeyword) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, iosysCrawlSettingExcludeKeywordImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IosysCrawlSettingExcludeKeyword")
		case "id":
			out.Values[i] = ec._IosysCrawlSettingExcludeKeyword_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "iosysCrawlSettingId":
			out.Values[i] = ec._IosysCrawlSettingExcludeKeyword_iosysCrawlSettingId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "keyword":
			out.Values[i] = ec._IosysCrawlSettingExcludeKeyword_keyword(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._IosysCrawlSettingExcludeKeyword_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._IosysCrawlSettingExcludeKeyword_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var iosysCrawlSettingExcludeProductImplementors = []string{"IosysCrawlSettingExcludeProduct", "Node"}

func (ec *executionContext) _IosysCrawlSettingExcludeProduct(ctx context.Context, sel ast.SelectionSet, obj *model.IosysCrawlSettingExcludeProduct) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, iosysCrawlSettingExcludeProductImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IosysCrawlSettingExcludeProduct")
		case "id":
			out.Values[i] = ec._IosysCrawlSettingExcludeProduct_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "iosysCrawlSettingId":
			out.Values[i] = ec._IosysCrawlSettingExcludeProduct_iosysCrawlSettingId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "externalId":
			out.Values[i] = ec._IosysCrawlSettingExcludeProduct_externalId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._IosysCrawlSettingExcludeProduct_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._IosysCrawlSettingExcludeProduct_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var iosysCrawlSettingRequiredKeywordImplementors = []string{"IosysCrawlSettingRequiredKeyword", "Node"}

func (ec *executionContext) _IosysCrawlSettingRequiredKeyword(ctx context.Context, sel ast.SelectionSet, obj *model.IosysCrawlSettingRequiredKeyword) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, iosysCrawlSettingRequiredKeywordImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IosysCrawlSettingRequiredKeyword")
		case "id":
			out.Values[i] = ec._IosysCrawlSettingRequiredKeyword_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "iosysCrawlSettingId":
			out.Values[i] = ec._IosysCrawlSettingRequiredKeyword_iosysCrawlSettingId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "keyword":
			out.Values[i] = ec._IosysCrawlSettingRequiredKeyword_keyword(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._IosysCrawlSettingRequiredKeyword_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._IosysCrawlSettingRequiredKeyword_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var janparaCrawlSettingImplementors = []string{"JanparaCrawlSetting", "Node"}

func (ec *executionContext) _JanparaCrawlSetting(ctx context.Context, sel ast.SelectionSet, obj *model.JanparaCrawlSetting) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, janparaCrawlSettingImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JanparaCrawlSetting")
		case "id":
			out.Values[i] = ec._JanparaCrawlSetting_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "productId":
			out.Values[i] = ec._JanparaCrawlSetting_productId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "keyword":
			out.Values[i] = ec._JanparaCrawlSetting_keyword(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "minPrice":
			out.Values[i] = ec._JanparaCrawlSetting_minPrice(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "maxPrice":
			out.Values[i] = ec._JanparaCrawlSetting_maxPrice(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "enabled":
			out.Values[i] = ec._JanparaCrawlSetting_enabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._JanparaCrawlSetting_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._JanparaCrawlSetting_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "janparaCrawlSettingExcludeKeywords":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._JanparaCrawlSetting_janparaCrawlSettingExcludeKeywords(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "janparaCrawlSettingExcludeProducts":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._JanparaCrawlSetting_janparaCrawlSettingExcludeProducts(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "janparaCrawlSettingRequiredKeywords":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._JanparaCrawlSetting_janparaCrawlSettingRequiredKeywords(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var janparaCrawlSettingExcludeKeywordImplementors = []string{"JanparaCrawlSettingExcludeKeyword", "Node"}

func (ec *executionContext) _JanparaCrawlSettingExcludeKeyword(ctx context.Context, sel ast.SelectionSet, obj *model.JanparaCrawlSettingExcludeKeyword) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, janparaCrawlSettingExcludeKeywordImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JanparaCrawlSettingExcludeKeyword")
		case "id":
			out.Values[i] = ec._JanparaCrawlSettingExcludeKeyword_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "janparaCrawlSettingId":
			out.Values[i] = ec._JanparaCrawlSettingExcludeKeyword_janparaCrawlSettingId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "keyword":
			out.Values[i] = ec._JanparaCrawlSettingExcludeKeyword_keyword(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._JanparaCrawlSettingExcludeKeyword_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._JanparaCrawlSettingExcludeKeyword_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var janparaCrawlSettingExcludeProductImplementors = []string{"JanparaCrawlSettingExcludeProduct", "Node"}

func (ec *executionContext) _JanparaCrawlSettingExcludeProduct(ctx context.Context, sel ast.SelectionSet, obj *model.JanparaCrawlSettingExcludeProduct) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, janparaCrawlSettingExcludeProductImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JanparaCrawlSettingExcludeProduct")
		case "id":
			out.Values[i] = ec._JanparaCrawlSettingExcludeProduct_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "janparaCrawlSettingId":
			out.Values[i] = ec._JanparaCrawlSettingExcludeProduct_janparaCrawlSettingId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "externalId":
			out.Values[i] = ec._JanparaCrawlSettingExcludeProduct_externalId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._JanparaCrawlSettingExcludeProduct_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._JanparaCrawlSettingExcludeProduct_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var janparaCrawlSettingRequiredKeywordImplementors = []string{"JanparaCrawlSettingRequiredKeyword", "Node"}

func (ec *executionContext) _JanparaCrawlSettingRequiredKeyword(ctx context.Context, sel ast.SelectionSet, obj *model.JanparaCrawlSettingRequiredKeyword) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, janparaCrawlSettingRequiredKeywordImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JanparaCrawlSettingRequiredKeyword")
		case "id":
			out.Values[i] = ec._JanparaCrawlSettingRequiredKeyword_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "janparaCrawlSettingId":
			out.Values[i] = ec._JanparaCrawlSettingRequiredKeyword_janparaCrawlSettingId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "keyword":
			out.Values[i] = ec._JanparaCrawlSettingRequiredKeyword_keyword(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._JanparaCrawlSettingRequiredKeyword_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._JanparaCrawlSettingRequiredKeyword_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mercariCrawlSettingImplementors = []string{"MercariCrawlSetting", "Node"}

func (ec *executionContext) _MercariCrawlSetting(ctx context.Context, sel ast.SelectionSet, obj *model.MercariCrawlSetting) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mercariCrawlSettingImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MercariCrawlSetting")
		case "id":
			out.Values[i] = ec._MercariCrawlSetting_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "productId":
			out.Values[i] = ec._MercariCrawlSetting_productId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "keyword":
			out.Values[i] = ec._MercariCrawlSetting_keyword(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "minPrice":
			out.Values[i] = ec._MercariCrawlSetting_minPrice(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "maxPrice":
			out.Values[i] = ec._MercariCrawlSetting_maxPrice(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "categoryId":
			out.Values[i] = ec._MercariCrawlSetting_categoryId(ctx, field, obj)
		case "enabled":
			out.Values[i] = ec._MercariCrawlSetting_enabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._MercariCrawlSetting_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._MercariCrawlSetting_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "mercariCrawlSettingExcludeKeywords":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MercariCrawlSetting_mercariCrawlSettingExcludeKeywords(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "mercariCrawlSettingExcludeProducts":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MercariCrawlSetting_mercariCrawlSettingExcludeProducts(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "mercariCrawlSettingRequiredKeywords":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MercariCrawlSetting_mercariCrawlSettingRequiredKeywords(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mercariCrawlSettingExcludeKeywordImplementors = []string{"MercariCrawlSettingExcludeKeyword", "Node"}

func (ec *executionContext) _MercariCrawlSettingExcludeKeyword(ctx context.Context, sel ast.SelectionSet, obj *model.MercariCrawlSettingExcludeKeyword) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mercariCrawlSettingExcludeKeywordImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MercariCrawlSettingExcludeKeyword")
		case "id":
			out.Values[i] = ec._MercariCrawlSettingExcludeKeyword_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mercariCrawlSettingId":
			out.Values[i] = ec._MercariCrawlSettingExcludeKeyword_mercariCrawlSettingId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "keyword":
			out.Values[i] = ec._MercariCrawlSettingExcludeKeyword_keyword(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._MercariCrawlSettingExcludeKeyword_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._MercariCrawlSettingExcludeKeyword_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mercariCrawlSettingExcludeProductImplementors = []string{"MercariCrawlSettingExcludeProduct", "Node"}

func (ec *executionContext) _MercariCrawlSettingExcludeProduct(ctx context.Context, sel ast.SelectionSet, obj *model.MercariCrawlSettingExcludeProduct) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mercariCrawlSettingExcludeProductImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MercariCrawlSettingExcludeProduct")
		case "id":
			out.Values[i] = ec._MercariCrawlSettingExcludeProduct_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mercariCrawlSettingId":
			out.Values[i] = ec._MercariCrawlSettingExcludeProduct_mercariCrawlSettingId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "externalId":
			out.Values[i] = ec._MercariCrawlSettingExcludeProduct_externalId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._MercariCrawlSettingExcludeProduct_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._MercariCrawlSettingExcludeProduct_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mercariCrawlSettingRequiredKeywordImplementors = []string{"MercariCrawlSettingRequiredKeyword", "Node"}

func (ec *executionContext) _MercariCrawlSettingRequiredKeyword(ctx context.Context, sel ast.SelectionSet, obj *model.MercariCrawlSettingRequiredKeyword) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mercariCrawlSettingRequiredKeywordImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MercariCrawlSettingRequiredKeyword")
		case "id":
			out.Values[i] = ec._MercariCrawlSettingRequiredKeyword_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mercariCrawlSettingId":
			out.Values[i] = ec._MercariCrawlSettingRequiredKeyword_mercariCrawlSettingId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "keyword":
			out.Values[i] = ec._MercariCrawlSettingRequiredKeyword_keyword(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._MercariCrawlSettingRequiredKeyword_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._MercariCrawlSettingRequiredKeyword_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mercariDailyPurchaseSummaryImplementors = []string{"MercariDailyPurchaseSummary", "Node"}

func (ec *executionContext) _MercariDailyPurchaseSummary(ctx context.Context, sel ast.SelectionSet, obj *model.MercariDailyPurchaseSummary) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mercariDailyPurchaseSummaryImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MercariDailyPurchaseSummary")
		case "id":
			out.Values[i] = ec._MercariDailyPurchaseSummary_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "productId":
			out.Values[i] = ec._MercariDailyPurchaseSummary_productId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "averagePurchasePrice":
			out.Values[i] = ec._MercariDailyPurchaseSummary_averagePurchasePrice(ctx, field, obj)
		case "purchaseCount":
			out.Values[i] = ec._MercariDailyPurchaseSummary_purchaseCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "date":
			out.Values[i] = ec._MercariDailyPurchaseSummary_date(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._MercariDailyPurchaseSummary_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._MercariDailyPurchaseSummary_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mercariProductImplementors = []string{"MercariProduct", "Node"}

func (ec *executionContext) _MercariProduct(ctx context.Context, sel ast.SelectionSet, obj *model.MercariProduct) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mercariProductImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MercariProduct")
		case "id":
			out.Values[i] = ec._MercariProduct_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "productId":
			out.Values[i] = ec._MercariProduct_productId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mercariId":
			out.Values[i] = ec._MercariProduct_mercariId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._MercariProduct_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "thumbnailUrl":
			out.Values[i] = ec._MercariProduct_thumbnailUrl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "price":
			out.Values[i] = ec._MercariProduct_price(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "published":
			out.Values[i] = ec._MercariProduct_published(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "boughtDate":
			out.Values[i] = ec._MercariProduct_boughtDate(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._MercariProduct_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._MercariProduct_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createProduct":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createProduct(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateProduct":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateProduct(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteProduct":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteProduct(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createYahooAuctionCrawlSettingExcludeKeyword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createYahooAuctionCrawlSettingExcludeKeyword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateYahooAuctionCrawlSettingExcludeKeyword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateYahooAuctionCrawlSettingExcludeKeyword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteYahooAuctionCrawlSettingExcludeKeyword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteYahooAuctionCrawlSettingExcludeKeyword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createYahooAuctionCrawlSettingExcludeProduct":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createYahooAuctionCrawlSettingExcludeProduct(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateYahooAuctionCrawlSettingExcludeProduct":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateYahooAuctionCrawlSettingExcludeProduct(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteYahooAuctionCrawlSettingExcludeProduct":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteYahooAuctionCrawlSettingExcludeProduct(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createYahooAuctionCrawlSettingRequiredKeyword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createYahooAuctionCrawlSettingRequiredKeyword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateYahooAuctionCrawlSettingRequiredKeyword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateYahooAuctionCrawlSettingRequiredKeyword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteYahooAuctionCrawlSettingRequiredKeyword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteYahooAuctionCrawlSettingRequiredKeyword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createMercariCrawlSettingExcludeKeyword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createMercariCrawlSettingExcludeKeyword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateMercariCrawlSettingExcludeKeyword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateMercariCrawlSettingExcludeKeyword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteMercariCrawlSettingExcludeKeyword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteMercariCrawlSettingExcludeKeyword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createMercariCrawlSettingExcludeProduct":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createMercariCrawlSettingExcludeProduct(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateMercariCrawlSettingExcludeProduct":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateMercariCrawlSettingExcludeProduct(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteMercariCrawlSettingExcludeProduct":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteMercariCrawlSettingExcludeProduct(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createMercariCrawlSettingRequiredKeyword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createMercariCrawlSettingRequiredKeyword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateMercariCrawlSettingRequiredKeyword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateMercariCrawlSettingRequiredKeyword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteMercariCrawlSettingRequiredKeyword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteMercariCrawlSettingRequiredKeyword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createJanparaCrawlSettingExcludeKeyword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createJanparaCrawlSettingExcludeKeyword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateJanparaCrawlSettingExcludeKeyword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateJanparaCrawlSettingExcludeKeyword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteJanparaCrawlSettingExcludeKeyword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteJanparaCrawlSettingExcludeKeyword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createJanparaCrawlSettingExcludeProduct":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createJanparaCrawlSettingExcludeProduct(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateJanparaCrawlSettingExcludeProduct":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateJanparaCrawlSettingExcludeProduct(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteJanparaCrawlSettingExcludeProduct":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteJanparaCrawlSettingExcludeProduct(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createJanparaCrawlSettingRequiredKeyword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createJanparaCrawlSettingRequiredKeyword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateJanparaCrawlSettingRequiredKeyword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateJanparaCrawlSettingRequiredKeyword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteJanparaCrawlSettingRequiredKeyword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteJanparaCrawlSettingRequiredKeyword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createIosysCrawlSettingExcludeKeyword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createIosysCrawlSettingExcludeKeyword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateIosysCrawlSettingExcludeKeyword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateIosysCrawlSettingExcludeKeyword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteIosysCrawlSettingExcludeKeyword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteIosysCrawlSettingExcludeKeyword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createIosysCrawlSettingExcludeProduct":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createIosysCrawlSettingExcludeProduct(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateIosysCrawlSettingExcludeProduct":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateIosysCrawlSettingExcludeProduct(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteIosysCrawlSettingExcludeProduct":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteIosysCrawlSettingExcludeProduct(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createIosysCrawlSettingRequiredKeyword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createIosysCrawlSettingRequiredKeyword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateIosysCrawlSettingRequiredKeyword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateIosysCrawlSettingRequiredKeyword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteIosysCrawlSettingRequiredKeyword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteIosysCrawlSettingRequiredKeyword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createPcKoubouCrawlSettingExcludeKeyword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createPcKoubouCrawlSettingExcludeKeyword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatePcKoubouCrawlSettingExcludeKeyword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePcKoubouCrawlSettingExcludeKeyword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deletePcKoubouCrawlSettingExcludeKeyword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deletePcKoubouCrawlSettingExcludeKeyword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createPcKoubouCrawlSettingExcludeProduct":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createPcKoubouCrawlSettingExcludeProduct(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatePcKoubouCrawlSettingExcludeProduct":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePcKoubouCrawlSettingExcludeProduct(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deletePcKoubouCrawlSettingExcludeProduct":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deletePcKoubouCrawlSettingExcludeProduct(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createPcKoubouCrawlSettingRequiredKeyword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createPcKoubouCrawlSettingRequiredKeyword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatePcKoubouCrawlSettingRequiredKeyword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePcKoubouCrawlSettingRequiredKeyword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deletePcKoubouCrawlSettingRequiredKeyword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deletePcKoubouCrawlSettingRequiredKeyword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var pcKoubouCrawlSettingImplementors = []string{"PcKoubouCrawlSetting", "Node"}

func (ec *executionContext) _PcKoubouCrawlSetting(ctx context.Context, sel ast.SelectionSet, obj *model.PcKoubouCrawlSetting) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pcKoubouCrawlSettingImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PcKoubouCrawlSetting")
		case "id":
			out.Values[i] = ec._PcKoubouCrawlSetting_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "productId":
			out.Values[i] = ec._PcKoubouCrawlSetting_productId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "keyword":
			out.Values[i] = ec._PcKoubouCrawlSetting_keyword(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "minPrice":
			out.Values[i] = ec._PcKoubouCrawlSetting_minPrice(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "maxPrice":
			out.Values[i] = ec._PcKoubouCrawlSetting_maxPrice(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "enabled":
			out.Values[i] = ec._PcKoubouCrawlSetting_enabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._PcKoubouCrawlSetting_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._PcKoubouCrawlSetting_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "pcKoubouCrawlSettingExcludeKeywords":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PcKoubouCrawlSetting_pcKoubouCrawlSettingExcludeKeywords(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "pcKoubouCrawlSettingExcludeProducts":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PcKoubouCrawlSetting_pcKoubouCrawlSettingExcludeProducts(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "pcKoubouCrawlSettingRequiredKeywords":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PcKoubouCrawlSetting_pcKoubouCrawlSettingRequiredKeywords(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var pcKoubouCrawlSettingExcludeKeywordImplementors = []string{"PcKoubouCrawlSettingExcludeKeyword", "Node"}

func (ec *executionContext) _PcKoubouCrawlSettingExcludeKeyword(ctx context.Context, sel ast.SelectionSet, obj *model.PcKoubouCrawlSettingExcludeKeyword) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pcKoubouCrawlSettingExcludeKeywordImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PcKoubouCrawlSettingExcludeKeyword")
		case "id":
			out.Values[i] = ec._PcKoubouCrawlSettingExcludeKeyword_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pcKoubouCrawlSettingId":
			out.Values[i] = ec._PcKoubouCrawlSettingExcludeKeyword_pcKoubouCrawlSettingId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "keyword":
			out.Values[i] = ec._PcKoubouCrawlSettingExcludeKeyword_keyword(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._PcKoubouCrawlSettingExcludeKeyword_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._PcKoubouCrawlSettingExcludeKeyword_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var pcKoubouCrawlSettingExcludeProductImplementors = []string{"PcKoubouCrawlSettingExcludeProduct", "Node"}

func (ec *executionContext) _PcKoubouCrawlSettingExcludeProduct(ctx context.Context, sel ast.SelectionSet, obj *model.PcKoubouCrawlSettingExcludeProduct) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pcKoubouCrawlSettingExcludeProductImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PcKoubouCrawlSettingExcludeProduct")
		case "id":
			out.Values[i] = ec._PcKoubouCrawlSettingExcludeProduct_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pcKoubouCrawlSettingId":
			out.Values[i] = ec._PcKoubouCrawlSettingExcludeProduct_pcKoubouCrawlSettingId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "externalId":
			out.Values[i] = ec._PcKoubouCrawlSettingExcludeProduct_externalId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._PcKoubouCrawlSettingExcludeProduct_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._PcKoubouCrawlSettingExcludeProduct_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var pcKoubouCrawlSettingRequiredKeywordImplementors = []string{"PcKoubouCrawlSettingRequiredKeyword", "Node"}

func (ec *executionContext) _PcKoubouCrawlSettingRequiredKeyword(ctx context.Context, sel ast.SelectionSet, obj *model.PcKoubouCrawlSettingRequiredKeyword) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pcKoubouCrawlSettingRequiredKeywordImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PcKoubouCrawlSettingRequiredKeyword")
		case "id":
			out.Values[i] = ec._PcKoubouCrawlSettingRequiredKeyword_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pcKoubouCrawlSettingId":
			out.Values[i] = ec._PcKoubouCrawlSettingRequiredKeyword_pcKoubouCrawlSettingId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "keyword":
			out.Values[i] = ec._PcKoubouCrawlSettingRequiredKeyword_keyword(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._PcKoubouCrawlSettingRequiredKeyword_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._PcKoubouCrawlSettingRequiredKeyword_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var productImplementors = []string{"Product", "Node"}

func (ec *executionContext) _Product(ctx context.Context, sel ast.SelectionSet, obj *model.Product) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Product")
		case "id":
			out.Values[i] = ec._Product_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._Product_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "yahooAuctionProducts":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Product_yahooAuctionProducts(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "yahooAuctionCrawlSetting":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Product_yahooAuctionCrawlSetting(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "yahooAuctionDailyPurchaseSummaries":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Product_yahooAuctionDailyPurchaseSummaries(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "yahooFleamarketDailyPurchaseSummaries":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Product_yahooFleamarketDailyPurchaseSummaries(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "mercariProducts":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Product_mercariProducts(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "mercariCrawlSetting":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Product_mercariCrawlSetting(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "mercariDailyPurchaseSummaries":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Product_mercariDailyPurchaseSummaries(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "janparaCrawlSetting":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Product_janparaCrawlSetting(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "iosysCrawlSetting":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Product_iosysCrawlSetting(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "pcKoubouCrawlSetting":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Product_pcKoubouCrawlSetting(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "relatedProducts":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Product_relatedProducts(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "product":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_product(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "products":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_products(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "node":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_node(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var relatedProductImplementors = []string{"RelatedProduct"}

func (ec *executionContext) _RelatedProduct(ctx context.Context, sel ast.SelectionSet, obj *model.RelatedProduct) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, relatedProductImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RelatedProduct")
		case "platform":
			out.Values[i] = ec._RelatedProduct_platform(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "productId":
			out.Values[i] = ec._RelatedProduct_productId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "externalId":
			out.Values[i] = ec._RelatedProduct_externalId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._RelatedProduct_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "thumbnailUrl":
			out.Values[i] = ec._RelatedProduct_thumbnailUrl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "price":
			out.Values[i] = ec._RelatedProduct_price(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "buyoutPrice":
			out.Values[i] = ec._RelatedProduct_buyoutPrice(ctx, field, obj)
		case "published":
			out.Values[i] = ec._RelatedProduct_published(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "boughtDate":
			out.Values[i] = ec._RelatedProduct_boughtDate(ctx, field, obj)
		case "endDate":
			out.Values[i] = ec._RelatedProduct_endDate(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._RelatedProduct_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._RelatedProduct_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateIosysCrawlSettingExcludeKeywordResultErrorImplementors = []string{"UpdateIosysCrawlSettingExcludeKeywordResultError", "UpdateIosysCrawlSettingExcludeKeywordResult", "ResultBase"}

func (ec *executionContext) _UpdateIosysCrawlSettingExcludeKeywordResultError(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateIosysCrawlSettingExcludeKeywordResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateIosysCrawlSettingExcludeKeywordResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateIosysCrawlSettingExcludeKeywordResultError")
		case "ok":
			out.Values[i] = ec._UpdateIosysCrawlSettingExcludeKeywordResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._UpdateIosysCrawlSettingExcludeKeywordResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateIosysCrawlSettingExcludeKeywordResultSuccessImplementors = []string{"UpdateIosysCrawlSettingExcludeKeywordResultSuccess", "UpdateIosysCrawlSettingExcludeKeywordResult", "ResultBase"}

func (ec *executionContext) _UpdateIosysCrawlSettingExcludeKeywordResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateIosysCrawlSettingExcludeKeywordResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateIosysCrawlSettingExcludeKeywordResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateIosysCrawlSettingExcludeKeywordResultSuccess")
		case "ok":
			out.Values[i] = ec._UpdateIosysCrawlSettingExcludeKeywordResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "iosysCrawlSettingExcludeKeyword":
			out.Values[i] = ec._UpdateIosysCrawlSettingExcludeKeywordResultSuccess_iosysCrawlSettingExcludeKeyword(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateIosysCrawlSettingExcludeKeywordResultValidationFailedImplementors = []string{"UpdateIosysCrawlSettingExcludeKeywordResultValidationFailed", "UpdateIosysCrawlSettingExcludeKeywordResultErrors", "UserError"}

func (ec *executionContext) _UpdateIosysCrawlSettingExcludeKeywordResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateIosysCrawlSettingExcludeKeywordResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateIosysCrawlSettingExcludeKeywordResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateIosysCrawlSettingExcludeKeywordResultValidationFailed")
		case "code":
			out.Values[i] = ec._UpdateIosysCrawlSettingExcludeKeywordResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._UpdateIosysCrawlSettingExcludeKeywordResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._UpdateIosysCrawlSettingExcludeKeywordResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateIosysCrawlSettingExcludeProductResultErrorImplementors = []string{"UpdateIosysCrawlSettingExcludeProductResultError", "UpdateIosysCrawlSettingExcludeProductResult", "ResultBase"}

func (ec *executionContext) _UpdateIosysCrawlSettingExcludeProductResultError(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateIosysCrawlSettingExcludeProductResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateIosysCrawlSettingExcludeProductResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateIosysCrawlSettingExcludeProductResultError")
		case "ok":
			out.Values[i] = ec._UpdateIosysCrawlSettingExcludeProductResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._UpdateIosysCrawlSettingExcludeProductResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateIosysCrawlSettingExcludeProductResultSuccessImplementors = []string{"UpdateIosysCrawlSettingExcludeProductResultSuccess", "UpdateIosysCrawlSettingExcludeProductResult", "ResultBase"}

func (ec *executionContext) _UpdateIosysCrawlSettingExcludeProductResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateIosysCrawlSettingExcludeProductResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateIosysCrawlSettingExcludeProductResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateIosysCrawlSettingExcludeProductResultSuccess")
		case "ok":
			out.Values[i] = ec._UpdateIosysCrawlSettingExcludeProductResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "iosysCrawlSettingExcludeProduct":
			out.Values[i] = ec._UpdateIosysCrawlSettingExcludeProductResultSuccess_iosysCrawlSettingExcludeProduct(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateIosysCrawlSettingExcludeProductResultValidationFailedImplementors = []string{"UpdateIosysCrawlSettingExcludeProductResultValidationFailed", "UpdateIosysCrawlSettingExcludeProductResultErrors", "UserError"}

func (ec *executionContext) _UpdateIosysCrawlSettingExcludeProductResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateIosysCrawlSettingExcludeProductResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateIosysCrawlSettingExcludeProductResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateIosysCrawlSettingExcludeProductResultValidationFailed")
		case "code":
			out.Values[i] = ec._UpdateIosysCrawlSettingExcludeProductResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._UpdateIosysCrawlSettingExcludeProductResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._UpdateIosysCrawlSettingExcludeProductResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateIosysCrawlSettingRequiredKeywordResultErrorImplementors = []string{"UpdateIosysCrawlSettingRequiredKeywordResultError", "UpdateIosysCrawlSettingRequiredKeywordResult", "ResultBase"}

func (ec *executionContext) _UpdateIosysCrawlSettingRequiredKeywordResultError(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateIosysCrawlSettingRequiredKeywordResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateIosysCrawlSettingRequiredKeywordResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateIosysCrawlSettingRequiredKeywordResultError")
		case "ok":
			out.Values[i] = ec._UpdateIosysCrawlSettingRequiredKeywordResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._UpdateIosysCrawlSettingRequiredKeywordResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateIosysCrawlSettingRequiredKeywordResultSuccessImplementors = []string{"UpdateIosysCrawlSettingRequiredKeywordResultSuccess", "UpdateIosysCrawlSettingRequiredKeywordResult", "ResultBase"}

func (ec *executionContext) _UpdateIosysCrawlSettingRequiredKeywordResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateIosysCrawlSettingRequiredKeywordResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateIosysCrawlSettingRequiredKeywordResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateIosysCrawlSettingRequiredKeywordResultSuccess")
		case "ok":
			out.Values[i] = ec._UpdateIosysCrawlSettingRequiredKeywordResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "iosysCrawlSettingRequiredKeyword":
			out.Values[i] = ec._UpdateIosysCrawlSettingRequiredKeywordResultSuccess_iosysCrawlSettingRequiredKeyword(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateIosysCrawlSettingRequiredKeywordResultValidationFailedImplementors = []string{"UpdateIosysCrawlSettingRequiredKeywordResultValidationFailed", "UpdateIosysCrawlSettingRequiredKeywordResultErrors", "UserError"}

func (ec *executionContext) _UpdateIosysCrawlSettingRequiredKeywordResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateIosysCrawlSettingRequiredKeywordResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateIosysCrawlSettingRequiredKeywordResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateIosysCrawlSettingRequiredKeywordResultValidationFailed")
		case "code":
			out.Values[i] = ec._UpdateIosysCrawlSettingRequiredKeywordResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._UpdateIosysCrawlSettingRequiredKeywordResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._UpdateIosysCrawlSettingRequiredKeywordResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateJanparaCrawlSettingExcludeKeywordResultErrorImplementors = []string{"UpdateJanparaCrawlSettingExcludeKeywordResultError", "UpdateJanparaCrawlSettingExcludeKeywordResult", "ResultBase"}

func (ec *executionContext) _UpdateJanparaCrawlSettingExcludeKeywordResultError(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateJanparaCrawlSettingExcludeKeywordResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateJanparaCrawlSettingExcludeKeywordResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateJanparaCrawlSettingExcludeKeywordResultError")
		case "ok":
			out.Values[i] = ec._UpdateJanparaCrawlSettingExcludeKeywordResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._UpdateJanparaCrawlSettingExcludeKeywordResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateJanparaCrawlSettingExcludeKeywordResultSuccessImplementors = []string{"UpdateJanparaCrawlSettingExcludeKeywordResultSuccess", "UpdateJanparaCrawlSettingExcludeKeywordResult", "ResultBase"}

func (ec *executionContext) _UpdateJanparaCrawlSettingExcludeKeywordResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateJanparaCrawlSettingExcludeKeywordResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateJanparaCrawlSettingExcludeKeywordResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateJanparaCrawlSettingExcludeKeywordResultSuccess")
		case "ok":
			out.Values[i] = ec._UpdateJanparaCrawlSettingExcludeKeywordResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "janparaCrawlSettingExcludeKeyword":
			out.Values[i] = ec._UpdateJanparaCrawlSettingExcludeKeywordResultSuccess_janparaCrawlSettingExcludeKeyword(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateJanparaCrawlSettingExcludeKeywordResultValidationFailedImplementors = []string{"UpdateJanparaCrawlSettingExcludeKeywordResultValidationFailed", "UpdateJanparaCrawlSettingExcludeKeywordResultErrors", "UserError"}

func (ec *executionContext) _UpdateJanparaCrawlSettingExcludeKeywordResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateJanparaCrawlSettingExcludeKeywordResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateJanparaCrawlSettingExcludeKeywordResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateJanparaCrawlSettingExcludeKeywordResultValidationFailed")
		case "code":
			out.Values[i] = ec._UpdateJanparaCrawlSettingExcludeKeywordResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._UpdateJanparaCrawlSettingExcludeKeywordResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._UpdateJanparaCrawlSettingExcludeKeywordResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateJanparaCrawlSettingExcludeProductResultErrorImplementors = []string{"UpdateJanparaCrawlSettingExcludeProductResultError", "UpdateJanparaCrawlSettingExcludeProductResult", "ResultBase"}

func (ec *executionContext) _UpdateJanparaCrawlSettingExcludeProductResultError(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateJanparaCrawlSettingExcludeProductResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateJanparaCrawlSettingExcludeProductResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateJanparaCrawlSettingExcludeProductResultError")
		case "ok":
			out.Values[i] = ec._UpdateJanparaCrawlSettingExcludeProductResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._UpdateJanparaCrawlSettingExcludeProductResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateJanparaCrawlSettingExcludeProductResultSuccessImplementors = []string{"UpdateJanparaCrawlSettingExcludeProductResultSuccess", "UpdateJanparaCrawlSettingExcludeProductResult", "ResultBase"}

func (ec *executionContext) _UpdateJanparaCrawlSettingExcludeProductResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateJanparaCrawlSettingExcludeProductResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateJanparaCrawlSettingExcludeProductResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateJanparaCrawlSettingExcludeProductResultSuccess")
		case "ok":
			out.Values[i] = ec._UpdateJanparaCrawlSettingExcludeProductResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "janparaCrawlSettingExcludeProduct":
			out.Values[i] = ec._UpdateJanparaCrawlSettingExcludeProductResultSuccess_janparaCrawlSettingExcludeProduct(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateJanparaCrawlSettingExcludeProductResultValidationFailedImplementors = []string{"UpdateJanparaCrawlSettingExcludeProductResultValidationFailed", "UpdateJanparaCrawlSettingExcludeProductResultErrors", "UserError"}

func (ec *executionContext) _UpdateJanparaCrawlSettingExcludeProductResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateJanparaCrawlSettingExcludeProductResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateJanparaCrawlSettingExcludeProductResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateJanparaCrawlSettingExcludeProductResultValidationFailed")
		case "code":
			out.Values[i] = ec._UpdateJanparaCrawlSettingExcludeProductResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._UpdateJanparaCrawlSettingExcludeProductResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._UpdateJanparaCrawlSettingExcludeProductResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateJanparaCrawlSettingRequiredKeywordResultErrorImplementors = []string{"UpdateJanparaCrawlSettingRequiredKeywordResultError", "UpdateJanparaCrawlSettingRequiredKeywordResult", "ResultBase"}

func (ec *executionContext) _UpdateJanparaCrawlSettingRequiredKeywordResultError(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateJanparaCrawlSettingRequiredKeywordResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateJanparaCrawlSettingRequiredKeywordResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateJanparaCrawlSettingRequiredKeywordResultError")
		case "ok":
			out.Values[i] = ec._UpdateJanparaCrawlSettingRequiredKeywordResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._UpdateJanparaCrawlSettingRequiredKeywordResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateJanparaCrawlSettingRequiredKeywordResultSuccessImplementors = []string{"UpdateJanparaCrawlSettingRequiredKeywordResultSuccess", "UpdateJanparaCrawlSettingRequiredKeywordResult", "ResultBase"}

func (ec *executionContext) _UpdateJanparaCrawlSettingRequiredKeywordResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateJanparaCrawlSettingRequiredKeywordResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateJanparaCrawlSettingRequiredKeywordResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateJanparaCrawlSettingRequiredKeywordResultSuccess")
		case "ok":
			out.Values[i] = ec._UpdateJanparaCrawlSettingRequiredKeywordResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "janparaCrawlSettingRequiredKeyword":
			out.Values[i] = ec._UpdateJanparaCrawlSettingRequiredKeywordResultSuccess_janparaCrawlSettingRequiredKeyword(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateJanparaCrawlSettingRequiredKeywordResultValidationFailedImplementors = []string{"UpdateJanparaCrawlSettingRequiredKeywordResultValidationFailed", "UpdateJanparaCrawlSettingRequiredKeywordResultErrors", "UserError"}

func (ec *executionContext) _UpdateJanparaCrawlSettingRequiredKeywordResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateJanparaCrawlSettingRequiredKeywordResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateJanparaCrawlSettingRequiredKeywordResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateJanparaCrawlSettingRequiredKeywordResultValidationFailed")
		case "code":
			out.Values[i] = ec._UpdateJanparaCrawlSettingRequiredKeywordResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._UpdateJanparaCrawlSettingRequiredKeywordResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._UpdateJanparaCrawlSettingRequiredKeywordResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateMercariCrawlSettingExcludeKeywordResultErrorImplementors = []string{"UpdateMercariCrawlSettingExcludeKeywordResultError", "UpdateMercariCrawlSettingExcludeKeywordResult", "ResultBase"}

func (ec *executionContext) _UpdateMercariCrawlSettingExcludeKeywordResultError(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateMercariCrawlSettingExcludeKeywordResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateMercariCrawlSettingExcludeKeywordResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateMercariCrawlSettingExcludeKeywordResultError")
		case "ok":
			out.Values[i] = ec._UpdateMercariCrawlSettingExcludeKeywordResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._UpdateMercariCrawlSettingExcludeKeywordResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateMercariCrawlSettingExcludeKeywordResultSuccessImplementors = []string{"UpdateMercariCrawlSettingExcludeKeywordResultSuccess", "UpdateMercariCrawlSettingExcludeKeywordResult", "ResultBase"}

func (ec *executionContext) _UpdateMercariCrawlSettingExcludeKeywordResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateMercariCrawlSettingExcludeKeywordResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateMercariCrawlSettingExcludeKeywordResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateMercariCrawlSettingExcludeKeywordResultSuccess")
		case "ok":
			out.Values[i] = ec._UpdateMercariCrawlSettingExcludeKeywordResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mercariCrawlSettingExcludeKeyword":
			out.Values[i] = ec._UpdateMercariCrawlSettingExcludeKeywordResultSuccess_mercariCrawlSettingExcludeKeyword(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateMercariCrawlSettingExcludeKeywordResultValidationFailedImplementors = []string{"UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed", "UpdateMercariCrawlSettingExcludeKeywordResultErrors", "UserError"}

func (ec *executionContext) _UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateMercariCrawlSettingExcludeKeywordResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed")
		case "code":
			out.Values[i] = ec._UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateMercariCrawlSettingExcludeProductResultErrorImplementors = []string{"UpdateMercariCrawlSettingExcludeProductResultError", "UpdateMercariCrawlSettingExcludeProductResult", "ResultBase"}

func (ec *executionContext) _UpdateMercariCrawlSettingExcludeProductResultError(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateMercariCrawlSettingExcludeProductResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateMercariCrawlSettingExcludeProductResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateMercariCrawlSettingExcludeProductResultError")
		case "ok":
			out.Values[i] = ec._UpdateMercariCrawlSettingExcludeProductResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._UpdateMercariCrawlSettingExcludeProductResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateMercariCrawlSettingExcludeProductResultSuccessImplementors = []string{"UpdateMercariCrawlSettingExcludeProductResultSuccess", "UpdateMercariCrawlSettingExcludeProductResult", "ResultBase"}

func (ec *executionContext) _UpdateMercariCrawlSettingExcludeProductResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateMercariCrawlSettingExcludeProductResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateMercariCrawlSettingExcludeProductResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateMercariCrawlSettingExcludeProductResultSuccess")
		case "ok":
			out.Values[i] = ec._UpdateMercariCrawlSettingExcludeProductResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mercariCrawlSettingExcludeProduct":
			out.Values[i] = ec._UpdateMercariCrawlSettingExcludeProductResultSuccess_mercariCrawlSettingExcludeProduct(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateMercariCrawlSettingExcludeProductResultValidationFailedImplementors = []string{"UpdateMercariCrawlSettingExcludeProductResultValidationFailed", "UpdateMercariCrawlSettingExcludeProductResultErrors", "UserError"}

func (ec *executionContext) _UpdateMercariCrawlSettingExcludeProductResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateMercariCrawlSettingExcludeProductResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateMercariCrawlSettingExcludeProductResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateMercariCrawlSettingExcludeProductResultValidationFailed")
		case "code":
			out.Values[i] = ec._UpdateMercariCrawlSettingExcludeProductResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._UpdateMercariCrawlSettingExcludeProductResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._UpdateMercariCrawlSettingExcludeProductResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateMercariCrawlSettingRequiredKeywordResultErrorImplementors = []string{"UpdateMercariCrawlSettingRequiredKeywordResultError", "UpdateMercariCrawlSettingRequiredKeywordResult", "ResultBase"}

func (ec *executionContext) _UpdateMercariCrawlSettingRequiredKeywordResultError(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateMercariCrawlSettingRequiredKeywordResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateMercariCrawlSettingRequiredKeywordResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateMercariCrawlSettingRequiredKeywordResultError")
		case "ok":
			out.Values[i] = ec._UpdateMercariCrawlSettingRequiredKeywordResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._UpdateMercariCrawlSettingRequiredKeywordResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateMercariCrawlSettingRequiredKeywordResultSuccessImplementors = []string{"UpdateMercariCrawlSettingRequiredKeywordResultSuccess", "UpdateMercariCrawlSettingRequiredKeywordResult", "ResultBase"}

func (ec *executionContext) _UpdateMercariCrawlSettingRequiredKeywordResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateMercariCrawlSettingRequiredKeywordResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateMercariCrawlSettingRequiredKeywordResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateMercariCrawlSettingRequiredKeywordResultSuccess")
		case "ok":
			out.Values[i] = ec._UpdateMercariCrawlSettingRequiredKeywordResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mercariCrawlSettingRequiredKeyword":
			out.Values[i] = ec._UpdateMercariCrawlSettingRequiredKeywordResultSuccess_mercariCrawlSettingRequiredKeyword(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateMercariCrawlSettingRequiredKeywordResultValidationFailedImplementors = []string{"UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed", "UpdateMercariCrawlSettingRequiredKeywordResultErrors", "UserError"}

func (ec *executionContext) _UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateMercariCrawlSettingRequiredKeywordResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed")
		case "code":
			out.Values[i] = ec._UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updatePcKoubouCrawlSettingExcludeKeywordResultErrorImplementors = []string{"UpdatePcKoubouCrawlSettingExcludeKeywordResultError", "UpdatePcKoubouCrawlSettingExcludeKeywordResult", "ResultBase"}

func (ec *executionContext) _UpdatePcKoubouCrawlSettingExcludeKeywordResultError(ctx context.Context, sel ast.SelectionSet, obj *model.UpdatePcKoubouCrawlSettingExcludeKeywordResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updatePcKoubouCrawlSettingExcludeKeywordResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdatePcKoubouCrawlSettingExcludeKeywordResultError")
		case "ok":
			out.Values[i] = ec._UpdatePcKoubouCrawlSettingExcludeKeywordResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._UpdatePcKoubouCrawlSettingExcludeKeywordResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updatePcKoubouCrawlSettingExcludeKeywordResultSuccessImplementors = []string{"UpdatePcKoubouCrawlSettingExcludeKeywordResultSuccess", "UpdatePcKoubouCrawlSettingExcludeKeywordResult", "ResultBase"}

func (ec *executionContext) _UpdatePcKoubouCrawlSettingExcludeKeywordResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.UpdatePcKoubouCrawlSettingExcludeKeywordResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updatePcKoubouCrawlSettingExcludeKeywordResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdatePcKoubouCrawlSettingExcludeKeywordResultSuccess")
		case "ok":
			out.Values[i] = ec._UpdatePcKoubouCrawlSettingExcludeKeywordResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pcKoubouCrawlSettingExcludeKeyword":
			out.Values[i] = ec._UpdatePcKoubouCrawlSettingExcludeKeywordResultSuccess_pcKoubouCrawlSettingExcludeKeyword(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updatePcKoubouCrawlSettingExcludeKeywordResultValidationFailedImplementors = []string{"UpdatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed", "UpdatePcKoubouCrawlSettingExcludeKeywordResultErrors", "UserError"}

func (ec *executionContext) _UpdatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.UpdatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updatePcKoubouCrawlSettingExcludeKeywordResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed")
		case "code":
			out.Values[i] = ec._UpdatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._UpdatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._UpdatePcKoubouCrawlSettingExcludeKeywordResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updatePcKoubouCrawlSettingExcludeProductResultErrorImplementors = []string{"UpdatePcKoubouCrawlSettingExcludeProductResultError", "UpdatePcKoubouCrawlSettingExcludeProductResult", "ResultBase"}

func (ec *executionContext) _UpdatePcKoubouCrawlSettingExcludeProductResultError(ctx context.Context, sel ast.SelectionSet, obj *model.UpdatePcKoubouCrawlSettingExcludeProductResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updatePcKoubouCrawlSettingExcludeProductResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdatePcKoubouCrawlSettingExcludeProductResultError")
		case "ok":
			out.Values[i] = ec._UpdatePcKoubouCrawlSettingExcludeProductResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._UpdatePcKoubouCrawlSettingExcludeProductResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updatePcKoubouCrawlSettingExcludeProductResultSuccessImplementors = []string{"UpdatePcKoubouCrawlSettingExcludeProductResultSuccess", "UpdatePcKoubouCrawlSettingExcludeProductResult", "ResultBase"}

func (ec *executionContext) _UpdatePcKoubouCrawlSettingExcludeProductResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.UpdatePcKoubouCrawlSettingExcludeProductResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updatePcKoubouCrawlSettingExcludeProductResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdatePcKoubouCrawlSettingExcludeProductResultSuccess")
		case "ok":
			out.Values[i] = ec._UpdatePcKoubouCrawlSettingExcludeProductResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pcKoubouCrawlSettingExcludeProduct":
			out.Values[i] = ec._UpdatePcKoubouCrawlSettingExcludeProductResultSuccess_pcKoubouCrawlSettingExcludeProduct(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updatePcKoubouCrawlSettingExcludeProductResultValidationFailedImplementors = []string{"UpdatePcKoubouCrawlSettingExcludeProductResultValidationFailed", "UpdatePcKoubouCrawlSettingExcludeProductResultErrors", "UserError"}

func (ec *executionContext) _UpdatePcKoubouCrawlSettingExcludeProductResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.UpdatePcKoubouCrawlSettingExcludeProductResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updatePcKoubouCrawlSettingExcludeProductResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdatePcKoubouCrawlSettingExcludeProductResultValidationFailed")
		case "code":
			out.Values[i] = ec._UpdatePcKoubouCrawlSettingExcludeProductResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._UpdatePcKoubouCrawlSettingExcludeProductResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._UpdatePcKoubouCrawlSettingExcludeProductResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updatePcKoubouCrawlSettingRequiredKeywordResultErrorImplementors = []string{"UpdatePcKoubouCrawlSettingRequiredKeywordResultError", "UpdatePcKoubouCrawlSettingRequiredKeywordResult", "ResultBase"}

func (ec *executionContext) _UpdatePcKoubouCrawlSettingRequiredKeywordResultError(ctx context.Context, sel ast.SelectionSet, obj *model.UpdatePcKoubouCrawlSettingRequiredKeywordResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updatePcKoubouCrawlSettingRequiredKeywordResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdatePcKoubouCrawlSettingRequiredKeywordResultError")
		case "ok":
			out.Values[i] = ec._UpdatePcKoubouCrawlSettingRequiredKeywordResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._UpdatePcKoubouCrawlSettingRequiredKeywordResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updatePcKoubouCrawlSettingRequiredKeywordResultSuccessImplementors = []string{"UpdatePcKoubouCrawlSettingRequiredKeywordResultSuccess", "UpdatePcKoubouCrawlSettingRequiredKeywordResult", "ResultBase"}

func (ec *executionContext) _UpdatePcKoubouCrawlSettingRequiredKeywordResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.UpdatePcKoubouCrawlSettingRequiredKeywordResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updatePcKoubouCrawlSettingRequiredKeywordResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdatePcKoubouCrawlSettingRequiredKeywordResultSuccess")
		case "ok":
			out.Values[i] = ec._UpdatePcKoubouCrawlSettingRequiredKeywordResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pcKoubouCrawlSettingRequiredKeyword":
			out.Values[i] = ec._UpdatePcKoubouCrawlSettingRequiredKeywordResultSuccess_pcKoubouCrawlSettingRequiredKeyword(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updatePcKoubouCrawlSettingRequiredKeywordResultValidationFailedImplementors = []string{"UpdatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed", "UpdatePcKoubouCrawlSettingRequiredKeywordResultErrors", "UserError"}

func (ec *executionContext) _UpdatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.UpdatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updatePcKoubouCrawlSettingRequiredKeywordResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed")
		case "code":
			out.Values[i] = ec._UpdatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._UpdatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._UpdatePcKoubouCrawlSettingRequiredKeywordResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateProductResultErrorImplementors = []string{"UpdateProductResultError", "UpdateProductResult", "ResultBase"}

func (ec *executionContext) _UpdateProductResultError(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateProductResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateProductResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateProductResultError")
		case "ok":
			out.Values[i] = ec._UpdateProductResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._UpdateProductResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateProductResultSuccessImplementors = []string{"UpdateProductResultSuccess", "UpdateProductResult", "ResultBase"}

func (ec *executionContext) _UpdateProductResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateProductResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateProductResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateProductResultSuccess")
		case "ok":
			out.Values[i] = ec._UpdateProductResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "product":
			out.Values[i] = ec._UpdateProductResultSuccess_product(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateProductResultValidationFailedImplementors = []string{"UpdateProductResultValidationFailed", "UpdateProductResultErrors", "UserError"}

func (ec *executionContext) _UpdateProductResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateProductResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateProductResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateProductResultValidationFailed")
		case "code":
			out.Values[i] = ec._UpdateProductResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._UpdateProductResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._UpdateProductResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateYahooAuctionCrawlSettingExcludeKeywordResultErrorImplementors = []string{"UpdateYahooAuctionCrawlSettingExcludeKeywordResultError", "UpdateYahooAuctionCrawlSettingExcludeKeywordResult", "ResultBase"}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingExcludeKeywordResultError(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateYahooAuctionCrawlSettingExcludeKeywordResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateYahooAuctionCrawlSettingExcludeKeywordResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateYahooAuctionCrawlSettingExcludeKeywordResultError")
		case "ok":
			out.Values[i] = ec._UpdateYahooAuctionCrawlSettingExcludeKeywordResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._UpdateYahooAuctionCrawlSettingExcludeKeywordResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateYahooAuctionCrawlSettingExcludeKeywordResultSuccessImplementors = []string{"UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess", "UpdateYahooAuctionCrawlSettingExcludeKeywordResult", "ResultBase"}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateYahooAuctionCrawlSettingExcludeKeywordResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess")
		case "ok":
			out.Values[i] = ec._UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "yahooAuctionCrawlSettingExcludeKeyword":
			out.Values[i] = ec._UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess_yahooAuctionCrawlSettingExcludeKeyword(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailedImplementors = []string{"UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed", "UpdateYahooAuctionCrawlSettingExcludeKeywordResultErrors", "UserError"}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed")
		case "code":
			out.Values[i] = ec._UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateYahooAuctionCrawlSettingExcludeProductResultErrorImplementors = []string{"UpdateYahooAuctionCrawlSettingExcludeProductResultError", "UpdateYahooAuctionCrawlSettingExcludeProductResult", "ResultBase"}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingExcludeProductResultError(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateYahooAuctionCrawlSettingExcludeProductResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateYahooAuctionCrawlSettingExcludeProductResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateYahooAuctionCrawlSettingExcludeProductResultError")
		case "ok":
			out.Values[i] = ec._UpdateYahooAuctionCrawlSettingExcludeProductResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._UpdateYahooAuctionCrawlSettingExcludeProductResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateYahooAuctionCrawlSettingExcludeProductResultSuccessImplementors = []string{"UpdateYahooAuctionCrawlSettingExcludeProductResultSuccess", "UpdateYahooAuctionCrawlSettingExcludeProductResult", "ResultBase"}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingExcludeProductResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateYahooAuctionCrawlSettingExcludeProductResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateYahooAuctionCrawlSettingExcludeProductResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateYahooAuctionCrawlSettingExcludeProductResultSuccess")
		case "ok":
			out.Values[i] = ec._UpdateYahooAuctionCrawlSettingExcludeProductResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "yahooAuctionCrawlSettingExcludeProduct":
			out.Values[i] = ec._UpdateYahooAuctionCrawlSettingExcludeProductResultSuccess_yahooAuctionCrawlSettingExcludeProduct(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateYahooAuctionCrawlSettingExcludeProductResultValidationFailedImplementors = []string{"UpdateYahooAuctionCrawlSettingExcludeProductResultValidationFailed", "UpdateYahooAuctionCrawlSettingExcludeProductResultErrors", "UserError"}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingExcludeProductResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateYahooAuctionCrawlSettingExcludeProductResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateYahooAuctionCrawlSettingExcludeProductResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateYahooAuctionCrawlSettingExcludeProductResultValidationFailed")
		case "code":
			out.Values[i] = ec._UpdateYahooAuctionCrawlSettingExcludeProductResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._UpdateYahooAuctionCrawlSettingExcludeProductResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._UpdateYahooAuctionCrawlSettingExcludeProductResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateYahooAuctionCrawlSettingRequiredKeywordResultErrorImplementors = []string{"UpdateYahooAuctionCrawlSettingRequiredKeywordResultError", "UpdateYahooAuctionCrawlSettingRequiredKeywordResult", "ResultBase"}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingRequiredKeywordResultError(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateYahooAuctionCrawlSettingRequiredKeywordResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateYahooAuctionCrawlSettingRequiredKeywordResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateYahooAuctionCrawlSettingRequiredKeywordResultError")
		case "ok":
			out.Values[i] = ec._UpdateYahooAuctionCrawlSettingRequiredKeywordResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._UpdateYahooAuctionCrawlSettingRequiredKeywordResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateYahooAuctionCrawlSettingRequiredKeywordResultSuccessImplementors = []string{"UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess", "UpdateYahooAuctionCrawlSettingRequiredKeywordResult", "ResultBase"}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateYahooAuctionCrawlSettingRequiredKeywordResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess")
		case "ok":
			out.Values[i] = ec._UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "yahooAuctionCrawlSettingRequiredKeyword":
			out.Values[i] = ec._UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess_yahooAuctionCrawlSettingRequiredKeyword(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailedImplementors = []string{"UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed", "UpdateYahooAuctionCrawlSettingRequiredKeywordResultErrors", "UserError"}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed")
		case "code":
			out.Values[i] = ec._UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var yahooAuctionCrawlSettingImplementors = []string{"YahooAuctionCrawlSetting", "Node"}

func (ec *executionContext) _YahooAuctionCrawlSetting(ctx context.Context, sel ast.SelectionSet, obj *model.YahooAuctionCrawlSetting) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, yahooAuctionCrawlSettingImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("YahooAuctionCrawlSetting")
		case "id":
			out.Values[i] = ec._YahooAuctionCrawlSetting_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "productId":
			out.Values[i] = ec._YahooAuctionCrawlSetting_productId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "keyword":
			out.Values[i] = ec._YahooAuctionCrawlSetting_keyword(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "minPrice":
			out.Values[i] = ec._YahooAuctionCrawlSetting_minPrice(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "maxPrice":
			out.Values[i] = ec._YahooAuctionCrawlSetting_maxPrice(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "categoryId":
			out.Values[i] = ec._YahooAuctionCrawlSetting_categoryId(ctx, field, obj)
		case "enabled":
			out.Values[i] = ec._YahooAuctionCrawlSetting_enabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._YahooAuctionCrawlSetting_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._YahooAuctionCrawlSetting_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "yahooAuctionCrawlSettingExcludeKeywords":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._YahooAuctionCrawlSetting_yahooAuctionCrawlSettingExcludeKeywords(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "yahooAuctionCrawlSettingExcludeProducts":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._YahooAuctionCrawlSetting_yahooAuctionCrawlSettingExcludeProducts(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "yahooAuctionCrawlSettingRequiredKeywords":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._YahooAuctionCrawlSetting_yahooAuctionCrawlSettingRequiredKeywords(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var yahooAuctionCrawlSettingExcludeKeywordImplementors = []string{"YahooAuctionCrawlSettingExcludeKeyword", "Node"}

func (ec *executionContext) _YahooAuctionCrawlSettingExcludeKeyword(ctx context.Context, sel ast.SelectionSet, obj *model.YahooAuctionCrawlSettingExcludeKeyword) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, yahooAuctionCrawlSettingExcludeKeywordImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("YahooAuctionCrawlSettingExcludeKeyword")
		case "id":
			out.Values[i] = ec._YahooAuctionCrawlSettingExcludeKeyword_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "yahooAuctionCrawlSettingId":
			out.Values[i] = ec._YahooAuctionCrawlSettingExcludeKeyword_yahooAuctionCrawlSettingId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "keyword":
			out.Values[i] = ec._YahooAuctionCrawlSettingExcludeKeyword_keyword(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._YahooAuctionCrawlSettingExcludeKeyword_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._YahooAuctionCrawlSettingExcludeKeyword_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var yahooAuctionCrawlSettingExcludeProductImplementors = []string{"YahooAuctionCrawlSettingExcludeProduct", "Node"}

func (ec *executionContext) _YahooAuctionCrawlSettingExcludeProduct(ctx context.Context, sel ast.SelectionSet, obj *model.YahooAuctionCrawlSettingExcludeProduct) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, yahooAuctionCrawlSettingExcludeProductImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("YahooAuctionCrawlSettingExcludeProduct")
		case "id":
			out.Values[i] = ec._YahooAuctionCrawlSettingExcludeProduct_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "yahooAuctionCrawlSettingId":
			out.Values[i] = ec._YahooAuctionCrawlSettingExcludeProduct_yahooAuctionCrawlSettingId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "externalId":
			out.Values[i] = ec._YahooAuctionCrawlSettingExcludeProduct_externalId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._YahooAuctionCrawlSettingExcludeProduct_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._YahooAuctionCrawlSettingExcludeProduct_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var yahooAuctionCrawlSettingRequiredKeywordImplementors = []string{"YahooAuctionCrawlSettingRequiredKeyword", "Node"}

func (ec *executionContext) _YahooAuctionCrawlSettingRequiredKeyword(ctx context.Context, sel ast.SelectionSet, obj *model.YahooAuctionCrawlSettingRequiredKeyword) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, yahooAuctionCrawlSettingRequiredKeywordImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("YahooAuctionCrawlSettingRequiredKeyword")
		case "id":
			out.Values[i] = ec._YahooAuctionCrawlSettingRequiredKeyword_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "yahooAuctionCrawlSettingId":
			out.Values[i] = ec._YahooAuctionCrawlSettingRequiredKeyword_yahooAuctionCrawlSettingId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "keyword":
			out.Values[i] = ec._YahooAuctionCrawlSettingRequiredKeyword_keyword(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._YahooAuctionCrawlSettingRequiredKeyword_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._YahooAuctionCrawlSettingRequiredKeyword_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var yahooAuctionDailyPurchaseSummaryImplementors = []string{"YahooAuctionDailyPurchaseSummary", "Node"}

func (ec *executionContext) _YahooAuctionDailyPurchaseSummary(ctx context.Context, sel ast.SelectionSet, obj *model.YahooAuctionDailyPurchaseSummary) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, yahooAuctionDailyPurchaseSummaryImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("YahooAuctionDailyPurchaseSummary")
		case "id":
			out.Values[i] = ec._YahooAuctionDailyPurchaseSummary_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "productId":
			out.Values[i] = ec._YahooAuctionDailyPurchaseSummary_productId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "averagePurchasePrice":
			out.Values[i] = ec._YahooAuctionDailyPurchaseSummary_averagePurchasePrice(ctx, field, obj)
		case "purchaseCount":
			out.Values[i] = ec._YahooAuctionDailyPurchaseSummary_purchaseCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "date":
			out.Values[i] = ec._YahooAuctionDailyPurchaseSummary_date(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._YahooAuctionDailyPurchaseSummary_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._YahooAuctionDailyPurchaseSummary_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var yahooAuctionProductImplementors = []string{"YahooAuctionProduct", "Node"}

func (ec *executionContext) _YahooAuctionProduct(ctx context.Context, sel ast.SelectionSet, obj *model.YahooAuctionProduct) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, yahooAuctionProductImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("YahooAuctionProduct")
		case "id":
			out.Values[i] = ec._YahooAuctionProduct_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "productId":
			out.Values[i] = ec._YahooAuctionProduct_productId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "yahooAuctionId":
			out.Values[i] = ec._YahooAuctionProduct_yahooAuctionId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._YahooAuctionProduct_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "thumbnailUrl":
			out.Values[i] = ec._YahooAuctionProduct_thumbnailUrl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "price":
			out.Values[i] = ec._YahooAuctionProduct_price(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "published":
			out.Values[i] = ec._YahooAuctionProduct_published(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "boughtDate":
			out.Values[i] = ec._YahooAuctionProduct_boughtDate(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._YahooAuctionProduct_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._YahooAuctionProduct_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var yahooFleamarketDailyPurchaseSummaryImplementors = []string{"YahooFleamarketDailyPurchaseSummary", "Node"}

func (ec *executionContext) _YahooFleamarketDailyPurchaseSummary(ctx context.Context, sel ast.SelectionSet, obj *model.YahooFleamarketDailyPurchaseSummary) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, yahooFleamarketDailyPurchaseSummaryImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("YahooFleamarketDailyPurchaseSummary")
		case "id":
			out.Values[i] = ec._YahooFleamarketDailyPurchaseSummary_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "productId":
			out.Values[i] = ec._YahooFleamarketDailyPurchaseSummary_productId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "averagePurchasePrice":
			out.Values[i] = ec._YahooFleamarketDailyPurchaseSummary_averagePurchasePrice(ctx, field, obj)
		case "purchaseCount":
			out.Values[i] = ec._YahooFleamarketDailyPurchaseSummary_purchaseCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "date":
			out.Values[i] = ec._YahooFleamarketDailyPurchaseSummary_date(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._YahooFleamarketDailyPurchaseSummary_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._YahooFleamarketDailyPurchaseSummary_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			out.Values[i] = ec.___Schema_description(ctx, field, obj)
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		case "specifiedByURL":
			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNCreateIosysCrawlSettingExcludeKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateIosysCrawlSettingExcludeKeywordInput(ctx context.Context, v interface{}) (model.CreateIosysCrawlSettingExcludeKeywordInput, error) {
	res, err := ec.unmarshalInputCreateIosysCrawlSettingExcludeKeywordInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCreateIosysCrawlSettingExcludeKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateIosysCrawlSettingExcludeKeywordResult(ctx context.Context, sel ast.SelectionSet, v model.CreateIosysCrawlSettingExcludeKeywordResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateIosysCrawlSettingExcludeKeywordResult(ctx, sel, v)
}

func (ec *executionContext) marshalNCreateIosysCrawlSettingExcludeKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateIosysCrawlSettingExcludeKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, v model.CreateIosysCrawlSettingExcludeKeywordResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateIosysCrawlSettingExcludeKeywordResultErrors(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateIosysCrawlSettingExcludeProductInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateIosysCrawlSettingExcludeProductInput(ctx context.Context, v interface{}) (model.CreateIosysCrawlSettingExcludeProductInput, error) {
	res, err := ec.unmarshalInputCreateIosysCrawlSettingExcludeProductInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCreateIosysCrawlSettingExcludeProductResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateIosysCrawlSettingExcludeProductResult(ctx context.Context, sel ast.SelectionSet, v model.CreateIosysCrawlSettingExcludeProductResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateIosysCrawlSettingExcludeProductResult(ctx, sel, v)
}

func (ec *executionContext) marshalNCreateIosysCrawlSettingExcludeProductResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateIosysCrawlSettingExcludeProductResultErrors(ctx context.Context, sel ast.SelectionSet, v model.CreateIosysCrawlSettingExcludeProductResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateIosysCrawlSettingExcludeProductResultErrors(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateIosysCrawlSettingInput2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateIosysCrawlSettingInput(ctx context.Context, v interface{}) (*model.CreateIosysCrawlSettingInput, error) {
	res, err := ec.unmarshalInputCreateIosysCrawlSettingInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateIosysCrawlSettingRequiredKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateIosysCrawlSettingRequiredKeywordInput(ctx context.Context, v interface{}) (model.CreateIosysCrawlSettingRequiredKeywordInput, error) {
	res, err := ec.unmarshalInputCreateIosysCrawlSettingRequiredKeywordInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCreateIosysCrawlSettingRequiredKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateIosysCrawlSettingRequiredKeywordResult(ctx context.Context, sel ast.SelectionSet, v model.CreateIosysCrawlSettingRequiredKeywordResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateIosysCrawlSettingRequiredKeywordResult(ctx, sel, v)
}

func (ec *executionContext) marshalNCreateIosysCrawlSettingRequiredKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateIosysCrawlSettingRequiredKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, v model.CreateIosysCrawlSettingRequiredKeywordResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateIosysCrawlSettingRequiredKeywordResultErrors(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateJanparaCrawlSettingExcludeKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateJanparaCrawlSettingExcludeKeywordInput(ctx context.Context, v interface{}) (model.CreateJanparaCrawlSettingExcludeKeywordInput, error) {
	res, err := ec.unmarshalInputCreateJanparaCrawlSettingExcludeKeywordInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCreateJanparaCrawlSettingExcludeKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateJanparaCrawlSettingExcludeKeywordResult(ctx context.Context, sel ast.SelectionSet, v model.CreateJanparaCrawlSettingExcludeKeywordResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateJanparaCrawlSettingExcludeKeywordResult(ctx, sel, v)
}

func (ec *executionContext) marshalNCreateJanparaCrawlSettingExcludeKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateJanparaCrawlSettingExcludeKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, v model.CreateJanparaCrawlSettingExcludeKeywordResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateJanparaCrawlSettingExcludeKeywordResultErrors(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateJanparaCrawlSettingExcludeProductInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateJanparaCrawlSettingExcludeProductInput(ctx context.Context, v interface{}) (model.CreateJanparaCrawlSettingExcludeProductInput, error) {
	res, err := ec.unmarshalInputCreateJanparaCrawlSettingExcludeProductInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCreateJanparaCrawlSettingExcludeProductResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateJanparaCrawlSettingExcludeProductResult(ctx context.Context, sel ast.SelectionSet, v model.CreateJanparaCrawlSettingExcludeProductResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateJanparaCrawlSettingExcludeProductResult(ctx, sel, v)
}

func (ec *executionContext) marshalNCreateJanparaCrawlSettingExcludeProductResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateJanparaCrawlSettingExcludeProductResultErrors(ctx context.Context, sel ast.SelectionSet, v model.CreateJanparaCrawlSettingExcludeProductResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateJanparaCrawlSettingExcludeProductResultErrors(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateJanparaCrawlSettingInput2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateJanparaCrawlSettingInput(ctx context.Context, v interface{}) (*model.CreateJanparaCrawlSettingInput, error) {
	res, err := ec.unmarshalInputCreateJanparaCrawlSettingInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateJanparaCrawlSettingRequiredKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateJanparaCrawlSettingRequiredKeywordInput(ctx context.Context, v interface{}) (model.CreateJanparaCrawlSettingRequiredKeywordInput, error) {
	res, err := ec.unmarshalInputCreateJanparaCrawlSettingRequiredKeywordInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCreateJanparaCrawlSettingRequiredKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateJanparaCrawlSettingRequiredKeywordResult(ctx context.Context, sel ast.SelectionSet, v model.CreateJanparaCrawlSettingRequiredKeywordResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateJanparaCrawlSettingRequiredKeywordResult(ctx, sel, v)
}

func (ec *executionContext) marshalNCreateJanparaCrawlSettingRequiredKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateJanparaCrawlSettingRequiredKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, v model.CreateJanparaCrawlSettingRequiredKeywordResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateJanparaCrawlSettingRequiredKeywordResultErrors(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateMercariCrawlSettingExcludeKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateMercariCrawlSettingExcludeKeywordInput(ctx context.Context, v interface{}) (model.CreateMercariCrawlSettingExcludeKeywordInput, error) {
	res, err := ec.unmarshalInputCreateMercariCrawlSettingExcludeKeywordInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCreateMercariCrawlSettingExcludeKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateMercariCrawlSettingExcludeKeywordResult(ctx context.Context, sel ast.SelectionSet, v model.CreateMercariCrawlSettingExcludeKeywordResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateMercariCrawlSettingExcludeKeywordResult(ctx, sel, v)
}

func (ec *executionContext) marshalNCreateMercariCrawlSettingExcludeKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateMercariCrawlSettingExcludeKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, v model.CreateMercariCrawlSettingExcludeKeywordResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateMercariCrawlSettingExcludeKeywordResultErrors(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateMercariCrawlSettingExcludeProductInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateMercariCrawlSettingExcludeProductInput(ctx context.Context, v interface{}) (model.CreateMercariCrawlSettingExcludeProductInput, error) {
	res, err := ec.unmarshalInputCreateMercariCrawlSettingExcludeProductInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCreateMercariCrawlSettingExcludeProductResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateMercariCrawlSettingExcludeProductResult(ctx context.Context, sel ast.SelectionSet, v model.CreateMercariCrawlSettingExcludeProductResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateMercariCrawlSettingExcludeProductResult(ctx, sel, v)
}

func (ec *executionContext) marshalNCreateMercariCrawlSettingExcludeProductResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateMercariCrawlSettingExcludeProductResultErrors(ctx context.Context, sel ast.SelectionSet, v model.CreateMercariCrawlSettingExcludeProductResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateMercariCrawlSettingExcludeProductResultErrors(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateMercariCrawlSettingInput2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateMercariCrawlSettingInput(ctx context.Context, v interface{}) (*model.CreateMercariCrawlSettingInput, error) {
	res, err := ec.unmarshalInputCreateMercariCrawlSettingInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateMercariCrawlSettingRequiredKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateMercariCrawlSettingRequiredKeywordInput(ctx context.Context, v interface{}) (model.CreateMercariCrawlSettingRequiredKeywordInput, error) {
	res, err := ec.unmarshalInputCreateMercariCrawlSettingRequiredKeywordInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCreateMercariCrawlSettingRequiredKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateMercariCrawlSettingRequiredKeywordResult(ctx context.Context, sel ast.SelectionSet, v model.CreateMercariCrawlSettingRequiredKeywordResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateMercariCrawlSettingRequiredKeywordResult(ctx, sel, v)
}

func (ec *executionContext) marshalNCreateMercariCrawlSettingRequiredKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateMercariCrawlSettingRequiredKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, v model.CreateMercariCrawlSettingRequiredKeywordResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateMercariCrawlSettingRequiredKeywordResultErrors(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreatePcKoubouCrawlSettingExcludeKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreatePcKoubouCrawlSettingExcludeKeywordInput(ctx context.Context, v interface{}) (model.CreatePcKoubouCrawlSettingExcludeKeywordInput, error) {
	res, err := ec.unmarshalInputCreatePcKoubouCrawlSettingExcludeKeywordInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCreatePcKoubouCrawlSettingExcludeKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreatePcKoubouCrawlSettingExcludeKeywordResult(ctx context.Context, sel ast.SelectionSet, v model.CreatePcKoubouCrawlSettingExcludeKeywordResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreatePcKoubouCrawlSettingExcludeKeywordResult(ctx, sel, v)
}

func (ec *executionContext) marshalNCreatePcKoubouCrawlSettingExcludeKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreatePcKoubouCrawlSettingExcludeKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, v model.CreatePcKoubouCrawlSettingExcludeKeywordResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreatePcKoubouCrawlSettingExcludeKeywordResultErrors(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreatePcKoubouCrawlSettingExcludeProductInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreatePcKoubouCrawlSettingExcludeProductInput(ctx context.Context, v interface{}) (model.CreatePcKoubouCrawlSettingExcludeProductInput, error) {
	res, err := ec.unmarshalInputCreatePcKoubouCrawlSettingExcludeProductInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCreatePcKoubouCrawlSettingExcludeProductResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreatePcKoubouCrawlSettingExcludeProductResult(ctx context.Context, sel ast.SelectionSet, v model.CreatePcKoubouCrawlSettingExcludeProductResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreatePcKoubouCrawlSettingExcludeProductResult(ctx, sel, v)
}

func (ec *executionContext) marshalNCreatePcKoubouCrawlSettingExcludeProductResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreatePcKoubouCrawlSettingExcludeProductResultErrors(ctx context.Context, sel ast.SelectionSet, v model.CreatePcKoubouCrawlSettingExcludeProductResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreatePcKoubouCrawlSettingExcludeProductResultErrors(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreatePcKoubouCrawlSettingInput2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreatePcKoubouCrawlSettingInput(ctx context.Context, v interface{}) (*model.CreatePcKoubouCrawlSettingInput, error) {
	res, err := ec.unmarshalInputCreatePcKoubouCrawlSettingInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreatePcKoubouCrawlSettingRequiredKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreatePcKoubouCrawlSettingRequiredKeywordInput(ctx context.Context, v interface{}) (model.CreatePcKoubouCrawlSettingRequiredKeywordInput, error) {
	res, err := ec.unmarshalInputCreatePcKoubouCrawlSettingRequiredKeywordInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCreatePcKoubouCrawlSettingRequiredKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreatePcKoubouCrawlSettingRequiredKeywordResult(ctx context.Context, sel ast.SelectionSet, v model.CreatePcKoubouCrawlSettingRequiredKeywordResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreatePcKoubouCrawlSettingRequiredKeywordResult(ctx, sel, v)
}

func (ec *executionContext) marshalNCreatePcKoubouCrawlSettingRequiredKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreatePcKoubouCrawlSettingRequiredKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, v model.CreatePcKoubouCrawlSettingRequiredKeywordResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreatePcKoubouCrawlSettingRequiredKeywordResultErrors(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateProductInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateProductInput(ctx context.Context, v interface{}) (model.CreateProductInput, error) {
	res, err := ec.unmarshalInputCreateProductInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCreateProductResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateProductResult(ctx context.Context, sel ast.SelectionSet, v model.CreateProductResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateProductResult(ctx, sel, v)
}

func (ec *executionContext) marshalNCreateProductResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateProductResultErrors(ctx context.Context, sel ast.SelectionSet, v model.CreateProductResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateProductResultErrors(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateYahooAuctionCrawlSettingExcludeKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateYahooAuctionCrawlSettingExcludeKeywordInput(ctx context.Context, v interface{}) (model.CreateYahooAuctionCrawlSettingExcludeKeywordInput, error) {
	res, err := ec.unmarshalInputCreateYahooAuctionCrawlSettingExcludeKeywordInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCreateYahooAuctionCrawlSettingExcludeKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateYahooAuctionCrawlSettingExcludeKeywordResult(ctx context.Context, sel ast.SelectionSet, v model.CreateYahooAuctionCrawlSettingExcludeKeywordResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateYahooAuctionCrawlSettingExcludeKeywordResult(ctx, sel, v)
}

func (ec *executionContext) marshalNCreateYahooAuctionCrawlSettingExcludeKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateYahooAuctionCrawlSettingExcludeKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, v model.CreateYahooAuctionCrawlSettingExcludeKeywordResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateYahooAuctionCrawlSettingExcludeKeywordResultErrors(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateYahooAuctionCrawlSettingExcludeProductInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateYahooAuctionCrawlSettingExcludeProductInput(ctx context.Context, v interface{}) (model.CreateYahooAuctionCrawlSettingExcludeProductInput, error) {
	res, err := ec.unmarshalInputCreateYahooAuctionCrawlSettingExcludeProductInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCreateYahooAuctionCrawlSettingExcludeProductResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateYahooAuctionCrawlSettingExcludeProductResult(ctx context.Context, sel ast.SelectionSet, v model.CreateYahooAuctionCrawlSettingExcludeProductResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateYahooAuctionCrawlSettingExcludeProductResult(ctx, sel, v)
}

func (ec *executionContext) marshalNCreateYahooAuctionCrawlSettingExcludeProductResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateYahooAuctionCrawlSettingExcludeProductResultErrors(ctx context.Context, sel ast.SelectionSet, v model.CreateYahooAuctionCrawlSettingExcludeProductResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateYahooAuctionCrawlSettingExcludeProductResultErrors(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateYahooAuctionCrawlSettingInput2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateYahooAuctionCrawlSettingInput(ctx context.Context, v interface{}) (*model.CreateYahooAuctionCrawlSettingInput, error) {
	res, err := ec.unmarshalInputCreateYahooAuctionCrawlSettingInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateYahooAuctionCrawlSettingRequiredKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateYahooAuctionCrawlSettingRequiredKeywordInput(ctx context.Context, v interface{}) (model.CreateYahooAuctionCrawlSettingRequiredKeywordInput, error) {
	res, err := ec.unmarshalInputCreateYahooAuctionCrawlSettingRequiredKeywordInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCreateYahooAuctionCrawlSettingRequiredKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateYahooAuctionCrawlSettingRequiredKeywordResult(ctx context.Context, sel ast.SelectionSet, v model.CreateYahooAuctionCrawlSettingRequiredKeywordResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateYahooAuctionCrawlSettingRequiredKeywordResult(ctx, sel, v)
}

func (ec *executionContext) marshalNCreateYahooAuctionCrawlSettingRequiredKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateYahooAuctionCrawlSettingRequiredKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, v model.CreateYahooAuctionCrawlSettingRequiredKeywordResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateYahooAuctionCrawlSettingRequiredKeywordResultErrors(ctx, sel, v)
}

func (ec *executionContext) marshalNDeleteIosysCrawlSettingExcludeKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteIosysCrawlSettingExcludeKeywordResult(ctx context.Context, sel ast.SelectionSet, v model.DeleteIosysCrawlSettingExcludeKeywordResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeleteIosysCrawlSettingExcludeKeywordResult(ctx, sel, v)
}

func (ec *executionContext) marshalNDeleteIosysCrawlSettingExcludeKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteIosysCrawlSettingExcludeKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, v model.DeleteIosysCrawlSettingExcludeKeywordResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeleteIosysCrawlSettingExcludeKeywordResultErrors(ctx, sel, v)
}

func (ec *executionContext) marshalNDeleteIosysCrawlSettingExcludeProductResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteIosysCrawlSettingExcludeProductResult(ctx context.Context, sel ast.SelectionSet, v model.DeleteIosysCrawlSettingExcludeProductResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeleteIosysCrawlSettingExcludeProductResult(ctx, sel, v)
}

func (ec *executionContext) marshalNDeleteIosysCrawlSettingExcludeProductResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteIosysCrawlSettingExcludeProductResultErrors(ctx context.Context, sel ast.SelectionSet, v model.DeleteIosysCrawlSettingExcludeProductResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeleteIosysCrawlSettingExcludeProductResultErrors(ctx, sel, v)
}

func (ec *executionContext) marshalNDeleteIosysCrawlSettingRequiredKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteIosysCrawlSettingRequiredKeywordResult(ctx context.Context, sel ast.SelectionSet, v model.DeleteIosysCrawlSettingRequiredKeywordResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeleteIosysCrawlSettingRequiredKeywordResult(ctx, sel, v)
}

func (ec *executionContext) marshalNDeleteIosysCrawlSettingRequiredKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteIosysCrawlSettingRequiredKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, v model.DeleteIosysCrawlSettingRequiredKeywordResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeleteIosysCrawlSettingRequiredKeywordResultErrors(ctx, sel, v)
}

func (ec *executionContext) marshalNDeleteJanparaCrawlSettingExcludeKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteJanparaCrawlSettingExcludeKeywordResult(ctx context.Context, sel ast.SelectionSet, v model.DeleteJanparaCrawlSettingExcludeKeywordResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeleteJanparaCrawlSettingExcludeKeywordResult(ctx, sel, v)
}

func (ec *executionContext) marshalNDeleteJanparaCrawlSettingExcludeKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteJanparaCrawlSettingExcludeKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, v model.DeleteJanparaCrawlSettingExcludeKeywordResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeleteJanparaCrawlSettingExcludeKeywordResultErrors(ctx, sel, v)
}

func (ec *executionContext) marshalNDeleteJanparaCrawlSettingExcludeProductResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteJanparaCrawlSettingExcludeProductResult(ctx context.Context, sel ast.SelectionSet, v model.DeleteJanparaCrawlSettingExcludeProductResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeleteJanparaCrawlSettingExcludeProductResult(ctx, sel, v)
}

func (ec *executionContext) marshalNDeleteJanparaCrawlSettingExcludeProductResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteJanparaCrawlSettingExcludeProductResultErrors(ctx context.Context, sel ast.SelectionSet, v model.DeleteJanparaCrawlSettingExcludeProductResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeleteJanparaCrawlSettingExcludeProductResultErrors(ctx, sel, v)
}

func (ec *executionContext) marshalNDeleteJanparaCrawlSettingRequiredKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteJanparaCrawlSettingRequiredKeywordResult(ctx context.Context, sel ast.SelectionSet, v model.DeleteJanparaCrawlSettingRequiredKeywordResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeleteJanparaCrawlSettingRequiredKeywordResult(ctx, sel, v)
}

func (ec *executionContext) marshalNDeleteJanparaCrawlSettingRequiredKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteJanparaCrawlSettingRequiredKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, v model.DeleteJanparaCrawlSettingRequiredKeywordResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeleteJanparaCrawlSettingRequiredKeywordResultErrors(ctx, sel, v)
}

func (ec *executionContext) marshalNDeleteMercariCrawlSettingExcludeKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteMercariCrawlSettingExcludeKeywordResult(ctx context.Context, sel ast.SelectionSet, v model.DeleteMercariCrawlSettingExcludeKeywordResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeleteMercariCrawlSettingExcludeKeywordResult(ctx, sel, v)
}

func (ec *executionContext) marshalNDeleteMercariCrawlSettingExcludeKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteMercariCrawlSettingExcludeKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, v model.DeleteMercariCrawlSettingExcludeKeywordResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeleteMercariCrawlSettingExcludeKeywordResultErrors(ctx, sel, v)
}

func (ec *executionContext) marshalNDeleteMercariCrawlSettingExcludeProductResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteMercariCrawlSettingExcludeProductResult(ctx context.Context, sel ast.SelectionSet, v model.DeleteMercariCrawlSettingExcludeProductResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeleteMercariCrawlSettingExcludeProductResult(ctx, sel, v)
}

func (ec *executionContext) marshalNDeleteMercariCrawlSettingExcludeProductResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteMercariCrawlSettingExcludeProductResultErrors(ctx context.Context, sel ast.SelectionSet, v model.DeleteMercariCrawlSettingExcludeProductResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeleteMercariCrawlSettingExcludeProductResultErrors(ctx, sel, v)
}

func (ec *executionContext) marshalNDeleteMercariCrawlSettingRequiredKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteMercariCrawlSettingRequiredKeywordResult(ctx context.Context, sel ast.SelectionSet, v model.DeleteMercariCrawlSettingRequiredKeywordResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeleteMercariCrawlSettingRequiredKeywordResult(ctx, sel, v)
}

func (ec *executionContext) marshalNDeleteMercariCrawlSettingRequiredKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteMercariCrawlSettingRequiredKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, v model.DeleteMercariCrawlSettingRequiredKeywordResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeleteMercariCrawlSettingRequiredKeywordResultErrors(ctx, sel, v)
}

func (ec *executionContext) marshalNDeletePcKoubouCrawlSettingExcludeKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeletePcKoubouCrawlSettingExcludeKeywordResult(ctx context.Context, sel ast.SelectionSet, v model.DeletePcKoubouCrawlSettingExcludeKeywordResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeletePcKoubouCrawlSettingExcludeKeywordResult(ctx, sel, v)
}

func (ec *executionContext) marshalNDeletePcKoubouCrawlSettingExcludeKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeletePcKoubouCrawlSettingExcludeKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, v model.DeletePcKoubouCrawlSettingExcludeKeywordResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeletePcKoubouCrawlSettingExcludeKeywordResultErrors(ctx, sel, v)
}

func (ec *executionContext) marshalNDeletePcKoubouCrawlSettingExcludeProductResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeletePcKoubouCrawlSettingExcludeProductResult(ctx context.Context, sel ast.SelectionSet, v model.DeletePcKoubouCrawlSettingExcludeProductResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeletePcKoubouCrawlSettingExcludeProductResult(ctx, sel, v)
}

func (ec *executionContext) marshalNDeletePcKoubouCrawlSettingExcludeProductResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeletePcKoubouCrawlSettingExcludeProductResultErrors(ctx context.Context, sel ast.SelectionSet, v model.DeletePcKoubouCrawlSettingExcludeProductResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeletePcKoubouCrawlSettingExcludeProductResultErrors(ctx, sel, v)
}

func (ec *executionContext) marshalNDeletePcKoubouCrawlSettingRequiredKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeletePcKoubouCrawlSettingRequiredKeywordResult(ctx context.Context, sel ast.SelectionSet, v model.DeletePcKoubouCrawlSettingRequiredKeywordResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeletePcKoubouCrawlSettingRequiredKeywordResult(ctx, sel, v)
}

func (ec *executionContext) marshalNDeletePcKoubouCrawlSettingRequiredKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeletePcKoubouCrawlSettingRequiredKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, v model.DeletePcKoubouCrawlSettingRequiredKeywordResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeletePcKoubouCrawlSettingRequiredKeywordResultErrors(ctx, sel, v)
}

func (ec *executionContext) marshalNDeleteProductResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteProductResult(ctx context.Context, sel ast.SelectionSet, v model.DeleteProductResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeleteProductResult(ctx, sel, v)
}

func (ec *executionContext) marshalNDeleteProductResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteProductResultErrors(ctx context.Context, sel ast.SelectionSet, v model.DeleteProductResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeleteProductResultErrors(ctx, sel, v)
}

func (ec *executionContext) marshalNDeleteYahooAuctionCrawlSettingExcludeKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteYahooAuctionCrawlSettingExcludeKeywordResult(ctx context.Context, sel ast.SelectionSet, v model.DeleteYahooAuctionCrawlSettingExcludeKeywordResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeleteYahooAuctionCrawlSettingExcludeKeywordResult(ctx, sel, v)
}

func (ec *executionContext) marshalNDeleteYahooAuctionCrawlSettingExcludeKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteYahooAuctionCrawlSettingExcludeKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, v model.DeleteYahooAuctionCrawlSettingExcludeKeywordResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeleteYahooAuctionCrawlSettingExcludeKeywordResultErrors(ctx, sel, v)
}

func (ec *executionContext) marshalNDeleteYahooAuctionCrawlSettingExcludeProductResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteYahooAuctionCrawlSettingExcludeProductResult(ctx context.Context, sel ast.SelectionSet, v model.DeleteYahooAuctionCrawlSettingExcludeProductResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeleteYahooAuctionCrawlSettingExcludeProductResult(ctx, sel, v)
}

func (ec *executionContext) marshalNDeleteYahooAuctionCrawlSettingExcludeProductResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteYahooAuctionCrawlSettingExcludeProductResultErrors(ctx context.Context, sel ast.SelectionSet, v model.DeleteYahooAuctionCrawlSettingExcludeProductResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeleteYahooAuctionCrawlSettingExcludeProductResultErrors(ctx, sel, v)
}

func (ec *executionContext) marshalNDeleteYahooAuctionCrawlSettingRequiredKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteYahooAuctionCrawlSettingRequiredKeywordResult(ctx context.Context, sel ast.SelectionSet, v model.DeleteYahooAuctionCrawlSettingRequiredKeywordResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeleteYahooAuctionCrawlSettingRequiredKeywordResult(ctx, sel, v)
}

func (ec *executionContext) marshalNDeleteYahooAuctionCrawlSettingRequiredKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteYahooAuctionCrawlSettingRequiredKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, v model.DeleteYahooAuctionCrawlSettingRequiredKeywordResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeleteYahooAuctionCrawlSettingRequiredKeywordResultErrors(ctx, sel, v)
}

func (ec *executionContext) marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ErrorDetail) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNErrorDetail2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetail(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNErrorDetail2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetail(ctx context.Context, sel ast.SelectionSet, v *model.ErrorDetail) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ErrorDetail(ctx, sel, v)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNIosysCrawlSetting2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐIosysCrawlSetting(ctx context.Context, sel ast.SelectionSet, v model.IosysCrawlSetting) graphql.Marshaler {
	return ec._IosysCrawlSetting(ctx, sel, &v)
}

func (ec *executionContext) marshalNIosysCrawlSetting2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐIosysCrawlSetting(ctx context.Context, sel ast.SelectionSet, v *model.IosysCrawlSetting) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._IosysCrawlSetting(ctx, sel, v)
}

func (ec *executionContext) marshalNIosysCrawlSettingExcludeKeyword2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐIosysCrawlSettingExcludeKeywordᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.IosysCrawlSettingExcludeKeyword) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNIosysCrawlSettingExcludeKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐIosysCrawlSettingExcludeKeyword(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNIosysCrawlSettingExcludeKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐIosysCrawlSettingExcludeKeyword(ctx context.Context, sel ast.SelectionSet, v *model.IosysCrawlSettingExcludeKeyword) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._IosysCrawlSettingExcludeKeyword(ctx, sel, v)
}

func (ec *executionContext) marshalNIosysCrawlSettingExcludeProduct2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐIosysCrawlSettingExcludeProductᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.IosysCrawlSettingExcludeProduct) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNIosysCrawlSettingExcludeProduct2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐIosysCrawlSettingExcludeProduct(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNIosysCrawlSettingExcludeProduct2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐIosysCrawlSettingExcludeProduct(ctx context.Context, sel ast.SelectionSet, v *model.IosysCrawlSettingExcludeProduct) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._IosysCrawlSettingExcludeProduct(ctx, sel, v)
}

func (ec *executionContext) marshalNIosysCrawlSettingRequiredKeyword2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐIosysCrawlSettingRequiredKeywordᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.IosysCrawlSettingRequiredKeyword) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNIosysCrawlSettingRequiredKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐIosysCrawlSettingRequiredKeyword(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNIosysCrawlSettingRequiredKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐIosysCrawlSettingRequiredKeyword(ctx context.Context, sel ast.SelectionSet, v *model.IosysCrawlSettingRequiredKeyword) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._IosysCrawlSettingRequiredKeyword(ctx, sel, v)
}

func (ec *executionContext) marshalNJanparaCrawlSetting2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐJanparaCrawlSetting(ctx context.Context, sel ast.SelectionSet, v model.JanparaCrawlSetting) graphql.Marshaler {
	return ec._JanparaCrawlSetting(ctx, sel, &v)
}

func (ec *executionContext) marshalNJanparaCrawlSetting2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐJanparaCrawlSetting(ctx context.Context, sel ast.SelectionSet, v *model.JanparaCrawlSetting) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._JanparaCrawlSetting(ctx, sel, v)
}

func (ec *executionContext) marshalNJanparaCrawlSettingExcludeKeyword2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐJanparaCrawlSettingExcludeKeywordᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.JanparaCrawlSettingExcludeKeyword) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNJanparaCrawlSettingExcludeKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐJanparaCrawlSettingExcludeKeyword(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNJanparaCrawlSettingExcludeKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐJanparaCrawlSettingExcludeKeyword(ctx context.Context, sel ast.SelectionSet, v *model.JanparaCrawlSettingExcludeKeyword) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._JanparaCrawlSettingExcludeKeyword(ctx, sel, v)
}

func (ec *executionContext) marshalNJanparaCrawlSettingExcludeProduct2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐJanparaCrawlSettingExcludeProductᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.JanparaCrawlSettingExcludeProduct) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNJanparaCrawlSettingExcludeProduct2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐJanparaCrawlSettingExcludeProduct(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNJanparaCrawlSettingExcludeProduct2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐJanparaCrawlSettingExcludeProduct(ctx context.Context, sel ast.SelectionSet, v *model.JanparaCrawlSettingExcludeProduct) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._JanparaCrawlSettingExcludeProduct(ctx, sel, v)
}

func (ec *executionContext) marshalNJanparaCrawlSettingRequiredKeyword2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐJanparaCrawlSettingRequiredKeywordᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.JanparaCrawlSettingRequiredKeyword) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNJanparaCrawlSettingRequiredKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐJanparaCrawlSettingRequiredKeyword(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNJanparaCrawlSettingRequiredKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐJanparaCrawlSettingRequiredKeyword(ctx context.Context, sel ast.SelectionSet, v *model.JanparaCrawlSettingRequiredKeyword) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._JanparaCrawlSettingRequiredKeyword(ctx, sel, v)
}

func (ec *executionContext) marshalNMercariCrawlSetting2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariCrawlSetting(ctx context.Context, sel ast.SelectionSet, v model.MercariCrawlSetting) graphql.Marshaler {
	return ec._MercariCrawlSetting(ctx, sel, &v)
}

func (ec *executionContext) marshalNMercariCrawlSetting2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariCrawlSetting(ctx context.Context, sel ast.SelectionSet, v *model.MercariCrawlSetting) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MercariCrawlSetting(ctx, sel, v)
}

func (ec *executionContext) marshalNMercariCrawlSettingExcludeKeyword2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariCrawlSettingExcludeKeywordᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.MercariCrawlSettingExcludeKeyword) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMercariCrawlSettingExcludeKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariCrawlSettingExcludeKeyword(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMercariCrawlSettingExcludeKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariCrawlSettingExcludeKeyword(ctx context.Context, sel ast.SelectionSet, v *model.MercariCrawlSettingExcludeKeyword) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MercariCrawlSettingExcludeKeyword(ctx, sel, v)
}

func (ec *executionContext) marshalNMercariCrawlSettingExcludeProduct2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariCrawlSettingExcludeProductᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.MercariCrawlSettingExcludeProduct) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMercariCrawlSettingExcludeProduct2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariCrawlSettingExcludeProduct(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMercariCrawlSettingExcludeProduct2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariCrawlSettingExcludeProduct(ctx context.Context, sel ast.SelectionSet, v *model.MercariCrawlSettingExcludeProduct) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MercariCrawlSettingExcludeProduct(ctx, sel, v)
}

func (ec *executionContext) marshalNMercariCrawlSettingRequiredKeyword2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariCrawlSettingRequiredKeywordᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.MercariCrawlSettingRequiredKeyword) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMercariCrawlSettingRequiredKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariCrawlSettingRequiredKeyword(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMercariCrawlSettingRequiredKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariCrawlSettingRequiredKeyword(ctx context.Context, sel ast.SelectionSet, v *model.MercariCrawlSettingRequiredKeyword) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MercariCrawlSettingRequiredKeyword(ctx, sel, v)
}

func (ec *executionContext) marshalNMercariDailyPurchaseSummary2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariDailyPurchaseSummaryᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.MercariDailyPurchaseSummary) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMercariDailyPurchaseSummary2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariDailyPurchaseSummary(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMercariDailyPurchaseSummary2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariDailyPurchaseSummary(ctx context.Context, sel ast.SelectionSet, v *model.MercariDailyPurchaseSummary) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MercariDailyPurchaseSummary(ctx, sel, v)
}

func (ec *executionContext) marshalNMercariProduct2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariProductᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.MercariProduct) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMercariProduct2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariProduct(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMercariProduct2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariProduct(ctx context.Context, sel ast.SelectionSet, v *model.MercariProduct) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MercariProduct(ctx, sel, v)
}

func (ec *executionContext) marshalNPcKoubouCrawlSetting2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐPcKoubouCrawlSetting(ctx context.Context, sel ast.SelectionSet, v model.PcKoubouCrawlSetting) graphql.Marshaler {
	return ec._PcKoubouCrawlSetting(ctx, sel, &v)
}

func (ec *executionContext) marshalNPcKoubouCrawlSetting2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐPcKoubouCrawlSetting(ctx context.Context, sel ast.SelectionSet, v *model.PcKoubouCrawlSetting) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PcKoubouCrawlSetting(ctx, sel, v)
}

func (ec *executionContext) marshalNPcKoubouCrawlSettingExcludeKeyword2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐPcKoubouCrawlSettingExcludeKeywordᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.PcKoubouCrawlSettingExcludeKeyword) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPcKoubouCrawlSettingExcludeKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐPcKoubouCrawlSettingExcludeKeyword(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPcKoubouCrawlSettingExcludeKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐPcKoubouCrawlSettingExcludeKeyword(ctx context.Context, sel ast.SelectionSet, v *model.PcKoubouCrawlSettingExcludeKeyword) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PcKoubouCrawlSettingExcludeKeyword(ctx, sel, v)
}

func (ec *executionContext) marshalNPcKoubouCrawlSettingExcludeProduct2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐPcKoubouCrawlSettingExcludeProductᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.PcKoubouCrawlSettingExcludeProduct) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPcKoubouCrawlSettingExcludeProduct2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐPcKoubouCrawlSettingExcludeProduct(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPcKoubouCrawlSettingExcludeProduct2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐPcKoubouCrawlSettingExcludeProduct(ctx context.Context, sel ast.SelectionSet, v *model.PcKoubouCrawlSettingExcludeProduct) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PcKoubouCrawlSettingExcludeProduct(ctx, sel, v)
}

func (ec *executionContext) marshalNPcKoubouCrawlSettingRequiredKeyword2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐPcKoubouCrawlSettingRequiredKeywordᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.PcKoubouCrawlSettingRequiredKeyword) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPcKoubouCrawlSettingRequiredKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐPcKoubouCrawlSettingRequiredKeyword(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPcKoubouCrawlSettingRequiredKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐPcKoubouCrawlSettingRequiredKeyword(ctx context.Context, sel ast.SelectionSet, v *model.PcKoubouCrawlSettingRequiredKeyword) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PcKoubouCrawlSettingRequiredKeyword(ctx, sel, v)
}

func (ec *executionContext) marshalNProduct2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐProduct(ctx context.Context, sel ast.SelectionSet, v model.Product) graphql.Marshaler {
	return ec._Product(ctx, sel, &v)
}

func (ec *executionContext) marshalNProduct2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐProductᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Product) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProduct2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐProduct(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNProduct2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐProduct(ctx context.Context, sel ast.SelectionSet, v *model.Product) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Product(ctx, sel, v)
}

func (ec *executionContext) marshalNRelatedProduct2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐRelatedProductᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.RelatedProduct) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRelatedProduct2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐRelatedProduct(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNRelatedProduct2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐRelatedProduct(ctx context.Context, sel ast.SelectionSet, v *model.RelatedProduct) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RelatedProduct(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNUpdateIosysCrawlSettingExcludeKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateIosysCrawlSettingExcludeKeywordInput(ctx context.Context, v interface{}) (model.UpdateIosysCrawlSettingExcludeKeywordInput, error) {
	res, err := ec.unmarshalInputUpdateIosysCrawlSettingExcludeKeywordInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpdateIosysCrawlSettingExcludeKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateIosysCrawlSettingExcludeKeywordResult(ctx context.Context, sel ast.SelectionSet, v model.UpdateIosysCrawlSettingExcludeKeywordResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateIosysCrawlSettingExcludeKeywordResult(ctx, sel, v)
}

func (ec *executionContext) marshalNUpdateIosysCrawlSettingExcludeKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateIosysCrawlSettingExcludeKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, v model.UpdateIosysCrawlSettingExcludeKeywordResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateIosysCrawlSettingExcludeKeywordResultErrors(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateIosysCrawlSettingExcludeProductInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateIosysCrawlSettingExcludeProductInput(ctx context.Context, v interface{}) (model.UpdateIosysCrawlSettingExcludeProductInput, error) {
	res, err := ec.unmarshalInputUpdateIosysCrawlSettingExcludeProductInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpdateIosysCrawlSettingExcludeProductResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateIosysCrawlSettingExcludeProductResult(ctx context.Context, sel ast.SelectionSet, v model.UpdateIosysCrawlSettingExcludeProductResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateIosysCrawlSettingExcludeProductResult(ctx, sel, v)
}

func (ec *executionContext) marshalNUpdateIosysCrawlSettingExcludeProductResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateIosysCrawlSettingExcludeProductResultErrors(ctx context.Context, sel ast.SelectionSet, v model.UpdateIosysCrawlSettingExcludeProductResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateIosysCrawlSettingExcludeProductResultErrors(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateIosysCrawlSettingInput2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateIosysCrawlSettingInput(ctx context.Context, v interface{}) (*model.UpdateIosysCrawlSettingInput, error) {
	res, err := ec.unmarshalInputUpdateIosysCrawlSettingInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateIosysCrawlSettingRequiredKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateIosysCrawlSettingRequiredKeywordInput(ctx context.Context, v interface{}) (model.UpdateIosysCrawlSettingRequiredKeywordInput, error) {
	res, err := ec.unmarshalInputUpdateIosysCrawlSettingRequiredKeywordInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpdateIosysCrawlSettingRequiredKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateIosysCrawlSettingRequiredKeywordResult(ctx context.Context, sel ast.SelectionSet, v model.UpdateIosysCrawlSettingRequiredKeywordResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateIosysCrawlSettingRequiredKeywordResult(ctx, sel, v)
}

func (ec *executionContext) marshalNUpdateIosysCrawlSettingRequiredKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateIosysCrawlSettingRequiredKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, v model.UpdateIosysCrawlSettingRequiredKeywordResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateIosysCrawlSettingRequiredKeywordResultErrors(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateJanparaCrawlSettingExcludeKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateJanparaCrawlSettingExcludeKeywordInput(ctx context.Context, v interface{}) (model.UpdateJanparaCrawlSettingExcludeKeywordInput, error) {
	res, err := ec.unmarshalInputUpdateJanparaCrawlSettingExcludeKeywordInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpdateJanparaCrawlSettingExcludeKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateJanparaCrawlSettingExcludeKeywordResult(ctx context.Context, sel ast.SelectionSet, v model.UpdateJanparaCrawlSettingExcludeKeywordResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateJanparaCrawlSettingExcludeKeywordResult(ctx, sel, v)
}

func (ec *executionContext) marshalNUpdateJanparaCrawlSettingExcludeKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateJanparaCrawlSettingExcludeKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, v model.UpdateJanparaCrawlSettingExcludeKeywordResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateJanparaCrawlSettingExcludeKeywordResultErrors(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateJanparaCrawlSettingExcludeProductInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateJanparaCrawlSettingExcludeProductInput(ctx context.Context, v interface{}) (model.UpdateJanparaCrawlSettingExcludeProductInput, error) {
	res, err := ec.unmarshalInputUpdateJanparaCrawlSettingExcludeProductInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpdateJanparaCrawlSettingExcludeProductResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateJanparaCrawlSettingExcludeProductResult(ctx context.Context, sel ast.SelectionSet, v model.UpdateJanparaCrawlSettingExcludeProductResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateJanparaCrawlSettingExcludeProductResult(ctx, sel, v)
}

func (ec *executionContext) marshalNUpdateJanparaCrawlSettingExcludeProductResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateJanparaCrawlSettingExcludeProductResultErrors(ctx context.Context, sel ast.SelectionSet, v model.UpdateJanparaCrawlSettingExcludeProductResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateJanparaCrawlSettingExcludeProductResultErrors(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateJanparaCrawlSettingInput2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateJanparaCrawlSettingInput(ctx context.Context, v interface{}) (*model.UpdateJanparaCrawlSettingInput, error) {
	res, err := ec.unmarshalInputUpdateJanparaCrawlSettingInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateJanparaCrawlSettingRequiredKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateJanparaCrawlSettingRequiredKeywordInput(ctx context.Context, v interface{}) (model.UpdateJanparaCrawlSettingRequiredKeywordInput, error) {
	res, err := ec.unmarshalInputUpdateJanparaCrawlSettingRequiredKeywordInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpdateJanparaCrawlSettingRequiredKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateJanparaCrawlSettingRequiredKeywordResult(ctx context.Context, sel ast.SelectionSet, v model.UpdateJanparaCrawlSettingRequiredKeywordResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateJanparaCrawlSettingRequiredKeywordResult(ctx, sel, v)
}

func (ec *executionContext) marshalNUpdateJanparaCrawlSettingRequiredKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateJanparaCrawlSettingRequiredKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, v model.UpdateJanparaCrawlSettingRequiredKeywordResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateJanparaCrawlSettingRequiredKeywordResultErrors(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateMercariCrawlSettingExcludeKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateMercariCrawlSettingExcludeKeywordInput(ctx context.Context, v interface{}) (model.UpdateMercariCrawlSettingExcludeKeywordInput, error) {
	res, err := ec.unmarshalInputUpdateMercariCrawlSettingExcludeKeywordInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpdateMercariCrawlSettingExcludeKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateMercariCrawlSettingExcludeKeywordResult(ctx context.Context, sel ast.SelectionSet, v model.UpdateMercariCrawlSettingExcludeKeywordResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateMercariCrawlSettingExcludeKeywordResult(ctx, sel, v)
}

func (ec *executionContext) marshalNUpdateMercariCrawlSettingExcludeKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateMercariCrawlSettingExcludeKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, v model.UpdateMercariCrawlSettingExcludeKeywordResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateMercariCrawlSettingExcludeKeywordResultErrors(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateMercariCrawlSettingExcludeProductInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateMercariCrawlSettingExcludeProductInput(ctx context.Context, v interface{}) (model.UpdateMercariCrawlSettingExcludeProductInput, error) {
	res, err := ec.unmarshalInputUpdateMercariCrawlSettingExcludeProductInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpdateMercariCrawlSettingExcludeProductResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateMercariCrawlSettingExcludeProductResult(ctx context.Context, sel ast.SelectionSet, v model.UpdateMercariCrawlSettingExcludeProductResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateMercariCrawlSettingExcludeProductResult(ctx, sel, v)
}

func (ec *executionContext) marshalNUpdateMercariCrawlSettingExcludeProductResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateMercariCrawlSettingExcludeProductResultErrors(ctx context.Context, sel ast.SelectionSet, v model.UpdateMercariCrawlSettingExcludeProductResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateMercariCrawlSettingExcludeProductResultErrors(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateMercariCrawlSettingInput2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateMercariCrawlSettingInput(ctx context.Context, v interface{}) (*model.UpdateMercariCrawlSettingInput, error) {
	res, err := ec.unmarshalInputUpdateMercariCrawlSettingInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateMercariCrawlSettingRequiredKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateMercariCrawlSettingRequiredKeywordInput(ctx context.Context, v interface{}) (model.UpdateMercariCrawlSettingRequiredKeywordInput, error) {
	res, err := ec.unmarshalInputUpdateMercariCrawlSettingRequiredKeywordInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpdateMercariCrawlSettingRequiredKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateMercariCrawlSettingRequiredKeywordResult(ctx context.Context, sel ast.SelectionSet, v model.UpdateMercariCrawlSettingRequiredKeywordResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateMercariCrawlSettingRequiredKeywordResult(ctx, sel, v)
}

func (ec *executionContext) marshalNUpdateMercariCrawlSettingRequiredKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateMercariCrawlSettingRequiredKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, v model.UpdateMercariCrawlSettingRequiredKeywordResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateMercariCrawlSettingRequiredKeywordResultErrors(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdatePcKoubouCrawlSettingExcludeKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdatePcKoubouCrawlSettingExcludeKeywordInput(ctx context.Context, v interface{}) (model.UpdatePcKoubouCrawlSettingExcludeKeywordInput, error) {
	res, err := ec.unmarshalInputUpdatePcKoubouCrawlSettingExcludeKeywordInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpdatePcKoubouCrawlSettingExcludeKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdatePcKoubouCrawlSettingExcludeKeywordResult(ctx context.Context, sel ast.SelectionSet, v model.UpdatePcKoubouCrawlSettingExcludeKeywordResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdatePcKoubouCrawlSettingExcludeKeywordResult(ctx, sel, v)
}

func (ec *executionContext) marshalNUpdatePcKoubouCrawlSettingExcludeKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdatePcKoubouCrawlSettingExcludeKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, v model.UpdatePcKoubouCrawlSettingExcludeKeywordResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdatePcKoubouCrawlSettingExcludeKeywordResultErrors(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdatePcKoubouCrawlSettingExcludeProductInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdatePcKoubouCrawlSettingExcludeProductInput(ctx context.Context, v interface{}) (model.UpdatePcKoubouCrawlSettingExcludeProductInput, error) {
	res, err := ec.unmarshalInputUpdatePcKoubouCrawlSettingExcludeProductInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpdatePcKoubouCrawlSettingExcludeProductResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdatePcKoubouCrawlSettingExcludeProductResult(ctx context.Context, sel ast.SelectionSet, v model.UpdatePcKoubouCrawlSettingExcludeProductResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdatePcKoubouCrawlSettingExcludeProductResult(ctx, sel, v)
}

func (ec *executionContext) marshalNUpdatePcKoubouCrawlSettingExcludeProductResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdatePcKoubouCrawlSettingExcludeProductResultErrors(ctx context.Context, sel ast.SelectionSet, v model.UpdatePcKoubouCrawlSettingExcludeProductResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdatePcKoubouCrawlSettingExcludeProductResultErrors(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdatePcKoubouCrawlSettingInput2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdatePcKoubouCrawlSettingInput(ctx context.Context, v interface{}) (*model.UpdatePcKoubouCrawlSettingInput, error) {
	res, err := ec.unmarshalInputUpdatePcKoubouCrawlSettingInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdatePcKoubouCrawlSettingRequiredKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdatePcKoubouCrawlSettingRequiredKeywordInput(ctx context.Context, v interface{}) (model.UpdatePcKoubouCrawlSettingRequiredKeywordInput, error) {
	res, err := ec.unmarshalInputUpdatePcKoubouCrawlSettingRequiredKeywordInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpdatePcKoubouCrawlSettingRequiredKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdatePcKoubouCrawlSettingRequiredKeywordResult(ctx context.Context, sel ast.SelectionSet, v model.UpdatePcKoubouCrawlSettingRequiredKeywordResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdatePcKoubouCrawlSettingRequiredKeywordResult(ctx, sel, v)
}

func (ec *executionContext) marshalNUpdatePcKoubouCrawlSettingRequiredKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdatePcKoubouCrawlSettingRequiredKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, v model.UpdatePcKoubouCrawlSettingRequiredKeywordResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdatePcKoubouCrawlSettingRequiredKeywordResultErrors(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateProductInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateProductInput(ctx context.Context, v interface{}) (model.UpdateProductInput, error) {
	res, err := ec.unmarshalInputUpdateProductInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpdateProductResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateProductResult(ctx context.Context, sel ast.SelectionSet, v model.UpdateProductResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateProductResult(ctx, sel, v)
}

func (ec *executionContext) marshalNUpdateProductResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateProductResultErrors(ctx context.Context, sel ast.SelectionSet, v model.UpdateProductResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateProductResultErrors(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateYahooAuctionCrawlSettingExcludeKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateYahooAuctionCrawlSettingExcludeKeywordInput(ctx context.Context, v interface{}) (model.UpdateYahooAuctionCrawlSettingExcludeKeywordInput, error) {
	res, err := ec.unmarshalInputUpdateYahooAuctionCrawlSettingExcludeKeywordInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpdateYahooAuctionCrawlSettingExcludeKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateYahooAuctionCrawlSettingExcludeKeywordResult(ctx context.Context, sel ast.SelectionSet, v model.UpdateYahooAuctionCrawlSettingExcludeKeywordResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateYahooAuctionCrawlSettingExcludeKeywordResult(ctx, sel, v)
}

func (ec *executionContext) marshalNUpdateYahooAuctionCrawlSettingExcludeKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateYahooAuctionCrawlSettingExcludeKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, v model.UpdateYahooAuctionCrawlSettingExcludeKeywordResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateYahooAuctionCrawlSettingExcludeKeywordResultErrors(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateYahooAuctionCrawlSettingExcludeProductInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateYahooAuctionCrawlSettingExcludeProductInput(ctx context.Context, v interface{}) (model.UpdateYahooAuctionCrawlSettingExcludeProductInput, error) {
	res, err := ec.unmarshalInputUpdateYahooAuctionCrawlSettingExcludeProductInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpdateYahooAuctionCrawlSettingExcludeProductResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateYahooAuctionCrawlSettingExcludeProductResult(ctx context.Context, sel ast.SelectionSet, v model.UpdateYahooAuctionCrawlSettingExcludeProductResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateYahooAuctionCrawlSettingExcludeProductResult(ctx, sel, v)
}

func (ec *executionContext) marshalNUpdateYahooAuctionCrawlSettingExcludeProductResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateYahooAuctionCrawlSettingExcludeProductResultErrors(ctx context.Context, sel ast.SelectionSet, v model.UpdateYahooAuctionCrawlSettingExcludeProductResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateYahooAuctionCrawlSettingExcludeProductResultErrors(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateYahooAuctionCrawlSettingInput2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateYahooAuctionCrawlSettingInput(ctx context.Context, v interface{}) (*model.UpdateYahooAuctionCrawlSettingInput, error) {
	res, err := ec.unmarshalInputUpdateYahooAuctionCrawlSettingInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateYahooAuctionCrawlSettingRequiredKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateYahooAuctionCrawlSettingRequiredKeywordInput(ctx context.Context, v interface{}) (model.UpdateYahooAuctionCrawlSettingRequiredKeywordInput, error) {
	res, err := ec.unmarshalInputUpdateYahooAuctionCrawlSettingRequiredKeywordInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpdateYahooAuctionCrawlSettingRequiredKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateYahooAuctionCrawlSettingRequiredKeywordResult(ctx context.Context, sel ast.SelectionSet, v model.UpdateYahooAuctionCrawlSettingRequiredKeywordResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateYahooAuctionCrawlSettingRequiredKeywordResult(ctx, sel, v)
}

func (ec *executionContext) marshalNUpdateYahooAuctionCrawlSettingRequiredKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateYahooAuctionCrawlSettingRequiredKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, v model.UpdateYahooAuctionCrawlSettingRequiredKeywordResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateYahooAuctionCrawlSettingRequiredKeywordResultErrors(ctx, sel, v)
}

func (ec *executionContext) marshalNYahooAuctionCrawlSetting2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionCrawlSetting(ctx context.Context, sel ast.SelectionSet, v model.YahooAuctionCrawlSetting) graphql.Marshaler {
	return ec._YahooAuctionCrawlSetting(ctx, sel, &v)
}

func (ec *executionContext) marshalNYahooAuctionCrawlSetting2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionCrawlSetting(ctx context.Context, sel ast.SelectionSet, v *model.YahooAuctionCrawlSetting) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._YahooAuctionCrawlSetting(ctx, sel, v)
}

func (ec *executionContext) marshalNYahooAuctionCrawlSettingExcludeKeyword2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionCrawlSettingExcludeKeywordᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.YahooAuctionCrawlSettingExcludeKeyword) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNYahooAuctionCrawlSettingExcludeKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionCrawlSettingExcludeKeyword(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNYahooAuctionCrawlSettingExcludeKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionCrawlSettingExcludeKeyword(ctx context.Context, sel ast.SelectionSet, v *model.YahooAuctionCrawlSettingExcludeKeyword) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._YahooAuctionCrawlSettingExcludeKeyword(ctx, sel, v)
}

func (ec *executionContext) marshalNYahooAuctionCrawlSettingExcludeProduct2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionCrawlSettingExcludeProductᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.YahooAuctionCrawlSettingExcludeProduct) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNYahooAuctionCrawlSettingExcludeProduct2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionCrawlSettingExcludeProduct(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNYahooAuctionCrawlSettingExcludeProduct2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionCrawlSettingExcludeProduct(ctx context.Context, sel ast.SelectionSet, v *model.YahooAuctionCrawlSettingExcludeProduct) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._YahooAuctionCrawlSettingExcludeProduct(ctx, sel, v)
}

func (ec *executionContext) marshalNYahooAuctionCrawlSettingRequiredKeyword2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionCrawlSettingRequiredKeywordᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.YahooAuctionCrawlSettingRequiredKeyword) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNYahooAuctionCrawlSettingRequiredKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionCrawlSettingRequiredKeyword(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNYahooAuctionCrawlSettingRequiredKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionCrawlSettingRequiredKeyword(ctx context.Context, sel ast.SelectionSet, v *model.YahooAuctionCrawlSettingRequiredKeyword) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._YahooAuctionCrawlSettingRequiredKeyword(ctx, sel, v)
}

func (ec *executionContext) marshalNYahooAuctionDailyPurchaseSummary2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionDailyPurchaseSummaryᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.YahooAuctionDailyPurchaseSummary) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNYahooAuctionDailyPurchaseSummary2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionDailyPurchaseSummary(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNYahooAuctionDailyPurchaseSummary2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionDailyPurchaseSummary(ctx context.Context, sel ast.SelectionSet, v *model.YahooAuctionDailyPurchaseSummary) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._YahooAuctionDailyPurchaseSummary(ctx, sel, v)
}

func (ec *executionContext) marshalNYahooAuctionProduct2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionProductᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.YahooAuctionProduct) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNYahooAuctionProduct2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionProduct(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNYahooAuctionProduct2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionProduct(ctx context.Context, sel ast.SelectionSet, v *model.YahooAuctionProduct) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._YahooAuctionProduct(ctx, sel, v)
}

func (ec *executionContext) marshalNYahooFleamarketDailyPurchaseSummary2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooFleamarketDailyPurchaseSummaryᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.YahooFleamarketDailyPurchaseSummary) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNYahooFleamarketDailyPurchaseSummary2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooFleamarketDailyPurchaseSummary(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNYahooFleamarketDailyPurchaseSummary2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooFleamarketDailyPurchaseSummary(ctx context.Context, sel ast.SelectionSet, v *model.YahooFleamarketDailyPurchaseSummary) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._YahooFleamarketDailyPurchaseSummary(ctx, sel, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalID(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) marshalONode2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐNode(ctx context.Context, sel ast.SelectionSet, v model.Node) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Node(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
