// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package internal

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/kuroweb/price-monitoring/volumes/bff/graph/model"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	MercariCrawlSetting() MercariCrawlSettingResolver
	Mutation() MutationResolver
	Product() ProductResolver
	Query() QueryResolver
	YahooAuctionCrawlSetting() YahooAuctionCrawlSettingResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	CreateMercariCrawlSettingExcludeKeywordResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	CreateMercariCrawlSettingExcludeKeywordResultSuccess struct {
		MercariCrawlSettingExcludeKeyword func(childComplexity int) int
		Ok                                func(childComplexity int) int
	}

	CreateMercariCrawlSettingExcludeKeywordResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	CreateMercariCrawlSettingRequiredKeywordResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	CreateMercariCrawlSettingRequiredKeywordResultSuccess struct {
		MercariCrawlSettingRequiredKeyword func(childComplexity int) int
		Ok                                 func(childComplexity int) int
	}

	CreateMercariCrawlSettingRequiredKeywordResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	CreateProductResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	CreateProductResultSuccess struct {
		Ok      func(childComplexity int) int
		Product func(childComplexity int) int
	}

	CreateProductResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	CreateYahooAuctionCrawlSettingExcludeKeywordResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess struct {
		Ok                                     func(childComplexity int) int
		YahooAuctionCrawlSettingExcludeKeyword func(childComplexity int) int
	}

	CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	CreateYahooAuctionCrawlSettingRequiredKeywordResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess struct {
		Ok                                      func(childComplexity int) int
		YahooAuctionCrawlSettingRequiredKeyword func(childComplexity int) int
	}

	CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	DeleteMercariCrawlSettingExcludeKeywordResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	DeleteMercariCrawlSettingExcludeKeywordResultSuccess struct {
		Ok func(childComplexity int) int
	}

	DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	DeleteMercariCrawlSettingRequiredKeywordResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	DeleteMercariCrawlSettingRequiredKeywordResultSuccess struct {
		Ok func(childComplexity int) int
	}

	DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	DeleteProductResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	DeleteProductResultSuccess struct {
		Ok func(childComplexity int) int
	}

	DeleteProductResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	DeleteYahooAuctionCrawlSettingExcludeKeywordResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	DeleteYahooAuctionCrawlSettingExcludeKeywordResultSuccess struct {
		Ok func(childComplexity int) int
	}

	DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	DeleteYahooAuctionCrawlSettingRequiredKeywordResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	DeleteYahooAuctionCrawlSettingRequiredKeywordResultSuccess struct {
		Ok func(childComplexity int) int
	}

	DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	ErrorDetail struct {
		Field   func(childComplexity int) int
		Message func(childComplexity int) int
	}

	MercariCrawlSetting struct {
		CategoryID                          func(childComplexity int) int
		CreatedAt                           func(childComplexity int) int
		Enabled                             func(childComplexity int) int
		ID                                  func(childComplexity int) int
		Keyword                             func(childComplexity int) int
		MaxPrice                            func(childComplexity int) int
		MercariCrawlSettingExcludeKeywords  func(childComplexity int) int
		MercariCrawlSettingRequiredKeywords func(childComplexity int) int
		MinPrice                            func(childComplexity int) int
		ProductID                           func(childComplexity int) int
		UpdatedAt                           func(childComplexity int) int
	}

	MercariCrawlSettingExcludeKeyword struct {
		CreatedAt             func(childComplexity int) int
		ID                    func(childComplexity int) int
		Keyword               func(childComplexity int) int
		MercariCrawlSettingID func(childComplexity int) int
		UpdatedAt             func(childComplexity int) int
	}

	MercariCrawlSettingRequiredKeyword struct {
		CreatedAt             func(childComplexity int) int
		ID                    func(childComplexity int) int
		Keyword               func(childComplexity int) int
		MercariCrawlSettingID func(childComplexity int) int
		UpdatedAt             func(childComplexity int) int
	}

	MercariDailyPurchaseSummary struct {
		AveragePurchasePrice func(childComplexity int) int
		CreatedAt            func(childComplexity int) int
		Date                 func(childComplexity int) int
		ID                   func(childComplexity int) int
		ProductID            func(childComplexity int) int
		PurchaseCount        func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
	}

	MercariProduct struct {
		BoughtDate   func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		ID           func(childComplexity int) int
		MercariID    func(childComplexity int) int
		Name         func(childComplexity int) int
		Price        func(childComplexity int) int
		ProductID    func(childComplexity int) int
		Published    func(childComplexity int) int
		ThumbnailURL func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
	}

	Mutation struct {
		CreateMercariCrawlSettingExcludeKeyword       func(childComplexity int, input model.CreateMercariCrawlSettingExcludeKeywordInput) int
		CreateMercariCrawlSettingRequiredKeyword      func(childComplexity int, input model.CreateMercariCrawlSettingRequiredKeywordInput) int
		CreateProduct                                 func(childComplexity int, input model.CreateProductInput) int
		CreateYahooAuctionCrawlSettingExcludeKeyword  func(childComplexity int, input model.CreateYahooAuctionCrawlSettingExcludeKeywordInput) int
		CreateYahooAuctionCrawlSettingRequiredKeyword func(childComplexity int, input model.CreateYahooAuctionCrawlSettingRequiredKeywordInput) int
		DeleteMercariCrawlSettingExcludeKeyword       func(childComplexity int, id string, productID string) int
		DeleteMercariCrawlSettingRequiredKeyword      func(childComplexity int, id string, productID string) int
		DeleteProduct                                 func(childComplexity int, id string) int
		DeleteYahooAuctionCrawlSettingExcludeKeyword  func(childComplexity int, id string, productID string) int
		DeleteYahooAuctionCrawlSettingRequiredKeyword func(childComplexity int, id string, productID string) int
		UpdateMercariCrawlSettingExcludeKeyword       func(childComplexity int, input model.UpdateMercariCrawlSettingExcludeKeywordInput) int
		UpdateMercariCrawlSettingRequiredKeyword      func(childComplexity int, input model.UpdateMercariCrawlSettingRequiredKeywordInput) int
		UpdateProduct                                 func(childComplexity int, id string, input model.UpdateProductInput) int
		UpdateYahooAuctionCrawlSettingExcludeKeyword  func(childComplexity int, input model.UpdateYahooAuctionCrawlSettingExcludeKeywordInput) int
		UpdateYahooAuctionCrawlSettingRequiredKeyword func(childComplexity int, input model.UpdateYahooAuctionCrawlSettingRequiredKeywordInput) int
	}

	Product struct {
		ID                                 func(childComplexity int) int
		MercariCrawlSetting                func(childComplexity int) int
		MercariDailyPurchaseSummaries      func(childComplexity int) int
		MercariProducts                    func(childComplexity int, published *bool, sort *string, order *string) int
		Name                               func(childComplexity int) int
		RelatedProducts                    func(childComplexity int, published *bool, page *int, per *int, sort *string, order *string) int
		YahooAuctionCrawlSetting           func(childComplexity int) int
		YahooAuctionDailyPurchaseSummaries func(childComplexity int) int
		YahooAuctionProducts               func(childComplexity int, published *bool, sort *string, order *string) int
	}

	Query struct {
		Node     func(childComplexity int, id string) int
		Product  func(childComplexity int, id string) int
		Products func(childComplexity int, id *string, name *string) int
	}

	RelatedProduct struct {
		BoughtDate   func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		ExternalID   func(childComplexity int) int
		Name         func(childComplexity int) int
		Price        func(childComplexity int) int
		ProductID    func(childComplexity int) int
		Published    func(childComplexity int) int
		RelatedType  func(childComplexity int) int
		ThumbnailURL func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
	}

	UpdateMercariCrawlSettingExcludeKeywordResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	UpdateMercariCrawlSettingExcludeKeywordResultSuccess struct {
		MercariCrawlSettingExcludeKeyword func(childComplexity int) int
		Ok                                func(childComplexity int) int
	}

	UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	UpdateMercariCrawlSettingRequiredKeywordResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	UpdateMercariCrawlSettingRequiredKeywordResultSuccess struct {
		MercariCrawlSettingRequiredKeyword func(childComplexity int) int
		Ok                                 func(childComplexity int) int
	}

	UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	UpdateProductResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	UpdateProductResultSuccess struct {
		Ok      func(childComplexity int) int
		Product func(childComplexity int) int
	}

	UpdateProductResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	UpdateYahooAuctionCrawlSettingExcludeKeywordResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess struct {
		Ok                                     func(childComplexity int) int
		YahooAuctionCrawlSettingExcludeKeyword func(childComplexity int) int
	}

	UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	UpdateYahooAuctionCrawlSettingRequiredKeywordResultError struct {
		Error func(childComplexity int) int
		Ok    func(childComplexity int) int
	}

	UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess struct {
		Ok                                      func(childComplexity int) int
		YahooAuctionCrawlSettingRequiredKeyword func(childComplexity int) int
	}

	UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed struct {
		Code    func(childComplexity int) int
		Details func(childComplexity int) int
		Message func(childComplexity int) int
	}

	YahooAuctionCrawlSetting struct {
		CategoryID                               func(childComplexity int) int
		CreatedAt                                func(childComplexity int) int
		Enabled                                  func(childComplexity int) int
		ID                                       func(childComplexity int) int
		Keyword                                  func(childComplexity int) int
		MaxPrice                                 func(childComplexity int) int
		MinPrice                                 func(childComplexity int) int
		ProductID                                func(childComplexity int) int
		UpdatedAt                                func(childComplexity int) int
		YahooAuctionCrawlSettingExcludeKeywords  func(childComplexity int) int
		YahooAuctionCrawlSettingRequiredKeywords func(childComplexity int) int
	}

	YahooAuctionCrawlSettingExcludeKeyword struct {
		CreatedAt                  func(childComplexity int) int
		ID                         func(childComplexity int) int
		Keyword                    func(childComplexity int) int
		UpdatedAt                  func(childComplexity int) int
		YahooAuctionCrawlSettingID func(childComplexity int) int
	}

	YahooAuctionCrawlSettingRequiredKeyword struct {
		CreatedAt                  func(childComplexity int) int
		ID                         func(childComplexity int) int
		Keyword                    func(childComplexity int) int
		UpdatedAt                  func(childComplexity int) int
		YahooAuctionCrawlSettingID func(childComplexity int) int
	}

	YahooAuctionDailyPurchaseSummary struct {
		AveragePurchasePrice func(childComplexity int) int
		CreatedAt            func(childComplexity int) int
		Date                 func(childComplexity int) int
		ID                   func(childComplexity int) int
		ProductID            func(childComplexity int) int
		PurchaseCount        func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
	}

	YahooAuctionProduct struct {
		BoughtDate     func(childComplexity int) int
		CreatedAt      func(childComplexity int) int
		ID             func(childComplexity int) int
		Name           func(childComplexity int) int
		Price          func(childComplexity int) int
		ProductID      func(childComplexity int) int
		Published      func(childComplexity int) int
		ThumbnailURL   func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
		YahooAuctionID func(childComplexity int) int
	}
}

type MercariCrawlSettingResolver interface {
	MercariCrawlSettingExcludeKeywords(ctx context.Context, obj *model.MercariCrawlSetting) ([]*model.MercariCrawlSettingExcludeKeyword, error)
	MercariCrawlSettingRequiredKeywords(ctx context.Context, obj *model.MercariCrawlSetting) ([]*model.MercariCrawlSettingRequiredKeyword, error)
}
type MutationResolver interface {
	CreateProduct(ctx context.Context, input model.CreateProductInput) (model.CreateProductResult, error)
	UpdateProduct(ctx context.Context, id string, input model.UpdateProductInput) (model.UpdateProductResult, error)
	DeleteProduct(ctx context.Context, id string) (model.DeleteProductResult, error)
	CreateYahooAuctionCrawlSettingExcludeKeyword(ctx context.Context, input model.CreateYahooAuctionCrawlSettingExcludeKeywordInput) (model.CreateYahooAuctionCrawlSettingExcludeKeywordResult, error)
	UpdateYahooAuctionCrawlSettingExcludeKeyword(ctx context.Context, input model.UpdateYahooAuctionCrawlSettingExcludeKeywordInput) (model.UpdateYahooAuctionCrawlSettingExcludeKeywordResult, error)
	DeleteYahooAuctionCrawlSettingExcludeKeyword(ctx context.Context, id string, productID string) (model.DeleteYahooAuctionCrawlSettingExcludeKeywordResult, error)
	CreateYahooAuctionCrawlSettingRequiredKeyword(ctx context.Context, input model.CreateYahooAuctionCrawlSettingRequiredKeywordInput) (model.CreateYahooAuctionCrawlSettingRequiredKeywordResult, error)
	UpdateYahooAuctionCrawlSettingRequiredKeyword(ctx context.Context, input model.UpdateYahooAuctionCrawlSettingRequiredKeywordInput) (model.UpdateYahooAuctionCrawlSettingRequiredKeywordResult, error)
	DeleteYahooAuctionCrawlSettingRequiredKeyword(ctx context.Context, id string, productID string) (model.DeleteYahooAuctionCrawlSettingRequiredKeywordResult, error)
	CreateMercariCrawlSettingExcludeKeyword(ctx context.Context, input model.CreateMercariCrawlSettingExcludeKeywordInput) (model.CreateMercariCrawlSettingExcludeKeywordResult, error)
	UpdateMercariCrawlSettingExcludeKeyword(ctx context.Context, input model.UpdateMercariCrawlSettingExcludeKeywordInput) (model.UpdateMercariCrawlSettingExcludeKeywordResult, error)
	DeleteMercariCrawlSettingExcludeKeyword(ctx context.Context, id string, productID string) (model.DeleteMercariCrawlSettingExcludeKeywordResult, error)
	CreateMercariCrawlSettingRequiredKeyword(ctx context.Context, input model.CreateMercariCrawlSettingRequiredKeywordInput) (model.CreateMercariCrawlSettingRequiredKeywordResult, error)
	UpdateMercariCrawlSettingRequiredKeyword(ctx context.Context, input model.UpdateMercariCrawlSettingRequiredKeywordInput) (model.UpdateMercariCrawlSettingRequiredKeywordResult, error)
	DeleteMercariCrawlSettingRequiredKeyword(ctx context.Context, id string, productID string) (model.DeleteMercariCrawlSettingRequiredKeywordResult, error)
}
type ProductResolver interface {
	YahooAuctionProducts(ctx context.Context, obj *model.Product, published *bool, sort *string, order *string) ([]*model.YahooAuctionProduct, error)
	YahooAuctionCrawlSetting(ctx context.Context, obj *model.Product) (*model.YahooAuctionCrawlSetting, error)
	YahooAuctionDailyPurchaseSummaries(ctx context.Context, obj *model.Product) ([]*model.YahooAuctionDailyPurchaseSummary, error)
	MercariProducts(ctx context.Context, obj *model.Product, published *bool, sort *string, order *string) ([]*model.MercariProduct, error)
	MercariCrawlSetting(ctx context.Context, obj *model.Product) (*model.MercariCrawlSetting, error)
	MercariDailyPurchaseSummaries(ctx context.Context, obj *model.Product) ([]*model.MercariDailyPurchaseSummary, error)
	RelatedProducts(ctx context.Context, obj *model.Product, published *bool, page *int, per *int, sort *string, order *string) ([]*model.RelatedProduct, error)
}
type QueryResolver interface {
	Product(ctx context.Context, id string) (*model.Product, error)
	Products(ctx context.Context, id *string, name *string) ([]*model.Product, error)
	Node(ctx context.Context, id string) (model.Node, error)
}
type YahooAuctionCrawlSettingResolver interface {
	YahooAuctionCrawlSettingExcludeKeywords(ctx context.Context, obj *model.YahooAuctionCrawlSetting) ([]*model.YahooAuctionCrawlSettingExcludeKeyword, error)
	YahooAuctionCrawlSettingRequiredKeywords(ctx context.Context, obj *model.YahooAuctionCrawlSetting) ([]*model.YahooAuctionCrawlSettingRequiredKeyword, error)
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "CreateMercariCrawlSettingExcludeKeywordResultError.error":
		if e.complexity.CreateMercariCrawlSettingExcludeKeywordResultError.Error == nil {
			break
		}

		return e.complexity.CreateMercariCrawlSettingExcludeKeywordResultError.Error(childComplexity), true

	case "CreateMercariCrawlSettingExcludeKeywordResultError.ok":
		if e.complexity.CreateMercariCrawlSettingExcludeKeywordResultError.Ok == nil {
			break
		}

		return e.complexity.CreateMercariCrawlSettingExcludeKeywordResultError.Ok(childComplexity), true

	case "CreateMercariCrawlSettingExcludeKeywordResultSuccess.mercariCrawlSettingExcludeKeyword":
		if e.complexity.CreateMercariCrawlSettingExcludeKeywordResultSuccess.MercariCrawlSettingExcludeKeyword == nil {
			break
		}

		return e.complexity.CreateMercariCrawlSettingExcludeKeywordResultSuccess.MercariCrawlSettingExcludeKeyword(childComplexity), true

	case "CreateMercariCrawlSettingExcludeKeywordResultSuccess.ok":
		if e.complexity.CreateMercariCrawlSettingExcludeKeywordResultSuccess.Ok == nil {
			break
		}

		return e.complexity.CreateMercariCrawlSettingExcludeKeywordResultSuccess.Ok(childComplexity), true

	case "CreateMercariCrawlSettingExcludeKeywordResultValidationFailed.code":
		if e.complexity.CreateMercariCrawlSettingExcludeKeywordResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.CreateMercariCrawlSettingExcludeKeywordResultValidationFailed.Code(childComplexity), true

	case "CreateMercariCrawlSettingExcludeKeywordResultValidationFailed.details":
		if e.complexity.CreateMercariCrawlSettingExcludeKeywordResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.CreateMercariCrawlSettingExcludeKeywordResultValidationFailed.Details(childComplexity), true

	case "CreateMercariCrawlSettingExcludeKeywordResultValidationFailed.message":
		if e.complexity.CreateMercariCrawlSettingExcludeKeywordResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.CreateMercariCrawlSettingExcludeKeywordResultValidationFailed.Message(childComplexity), true

	case "CreateMercariCrawlSettingRequiredKeywordResultError.error":
		if e.complexity.CreateMercariCrawlSettingRequiredKeywordResultError.Error == nil {
			break
		}

		return e.complexity.CreateMercariCrawlSettingRequiredKeywordResultError.Error(childComplexity), true

	case "CreateMercariCrawlSettingRequiredKeywordResultError.ok":
		if e.complexity.CreateMercariCrawlSettingRequiredKeywordResultError.Ok == nil {
			break
		}

		return e.complexity.CreateMercariCrawlSettingRequiredKeywordResultError.Ok(childComplexity), true

	case "CreateMercariCrawlSettingRequiredKeywordResultSuccess.mercariCrawlSettingRequiredKeyword":
		if e.complexity.CreateMercariCrawlSettingRequiredKeywordResultSuccess.MercariCrawlSettingRequiredKeyword == nil {
			break
		}

		return e.complexity.CreateMercariCrawlSettingRequiredKeywordResultSuccess.MercariCrawlSettingRequiredKeyword(childComplexity), true

	case "CreateMercariCrawlSettingRequiredKeywordResultSuccess.ok":
		if e.complexity.CreateMercariCrawlSettingRequiredKeywordResultSuccess.Ok == nil {
			break
		}

		return e.complexity.CreateMercariCrawlSettingRequiredKeywordResultSuccess.Ok(childComplexity), true

	case "CreateMercariCrawlSettingRequiredKeywordResultValidationFailed.code":
		if e.complexity.CreateMercariCrawlSettingRequiredKeywordResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.CreateMercariCrawlSettingRequiredKeywordResultValidationFailed.Code(childComplexity), true

	case "CreateMercariCrawlSettingRequiredKeywordResultValidationFailed.details":
		if e.complexity.CreateMercariCrawlSettingRequiredKeywordResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.CreateMercariCrawlSettingRequiredKeywordResultValidationFailed.Details(childComplexity), true

	case "CreateMercariCrawlSettingRequiredKeywordResultValidationFailed.message":
		if e.complexity.CreateMercariCrawlSettingRequiredKeywordResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.CreateMercariCrawlSettingRequiredKeywordResultValidationFailed.Message(childComplexity), true

	case "CreateProductResultError.error":
		if e.complexity.CreateProductResultError.Error == nil {
			break
		}

		return e.complexity.CreateProductResultError.Error(childComplexity), true

	case "CreateProductResultError.ok":
		if e.complexity.CreateProductResultError.Ok == nil {
			break
		}

		return e.complexity.CreateProductResultError.Ok(childComplexity), true

	case "CreateProductResultSuccess.ok":
		if e.complexity.CreateProductResultSuccess.Ok == nil {
			break
		}

		return e.complexity.CreateProductResultSuccess.Ok(childComplexity), true

	case "CreateProductResultSuccess.product":
		if e.complexity.CreateProductResultSuccess.Product == nil {
			break
		}

		return e.complexity.CreateProductResultSuccess.Product(childComplexity), true

	case "CreateProductResultValidationFailed.code":
		if e.complexity.CreateProductResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.CreateProductResultValidationFailed.Code(childComplexity), true

	case "CreateProductResultValidationFailed.details":
		if e.complexity.CreateProductResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.CreateProductResultValidationFailed.Details(childComplexity), true

	case "CreateProductResultValidationFailed.message":
		if e.complexity.CreateProductResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.CreateProductResultValidationFailed.Message(childComplexity), true

	case "CreateYahooAuctionCrawlSettingExcludeKeywordResultError.error":
		if e.complexity.CreateYahooAuctionCrawlSettingExcludeKeywordResultError.Error == nil {
			break
		}

		return e.complexity.CreateYahooAuctionCrawlSettingExcludeKeywordResultError.Error(childComplexity), true

	case "CreateYahooAuctionCrawlSettingExcludeKeywordResultError.ok":
		if e.complexity.CreateYahooAuctionCrawlSettingExcludeKeywordResultError.Ok == nil {
			break
		}

		return e.complexity.CreateYahooAuctionCrawlSettingExcludeKeywordResultError.Ok(childComplexity), true

	case "CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess.ok":
		if e.complexity.CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess.Ok == nil {
			break
		}

		return e.complexity.CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess.Ok(childComplexity), true

	case "CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess.yahooAuctionCrawlSettingExcludeKeyword":
		if e.complexity.CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess.YahooAuctionCrawlSettingExcludeKeyword == nil {
			break
		}

		return e.complexity.CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess.YahooAuctionCrawlSettingExcludeKeyword(childComplexity), true

	case "CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.code":
		if e.complexity.CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.Code(childComplexity), true

	case "CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.details":
		if e.complexity.CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.Details(childComplexity), true

	case "CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.message":
		if e.complexity.CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.Message(childComplexity), true

	case "CreateYahooAuctionCrawlSettingRequiredKeywordResultError.error":
		if e.complexity.CreateYahooAuctionCrawlSettingRequiredKeywordResultError.Error == nil {
			break
		}

		return e.complexity.CreateYahooAuctionCrawlSettingRequiredKeywordResultError.Error(childComplexity), true

	case "CreateYahooAuctionCrawlSettingRequiredKeywordResultError.ok":
		if e.complexity.CreateYahooAuctionCrawlSettingRequiredKeywordResultError.Ok == nil {
			break
		}

		return e.complexity.CreateYahooAuctionCrawlSettingRequiredKeywordResultError.Ok(childComplexity), true

	case "CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess.ok":
		if e.complexity.CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess.Ok == nil {
			break
		}

		return e.complexity.CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess.Ok(childComplexity), true

	case "CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess.yahooAuctionCrawlSettingRequiredKeyword":
		if e.complexity.CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess.YahooAuctionCrawlSettingRequiredKeyword == nil {
			break
		}

		return e.complexity.CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess.YahooAuctionCrawlSettingRequiredKeyword(childComplexity), true

	case "CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.code":
		if e.complexity.CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.Code(childComplexity), true

	case "CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.details":
		if e.complexity.CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.Details(childComplexity), true

	case "CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.message":
		if e.complexity.CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.Message(childComplexity), true

	case "DeleteMercariCrawlSettingExcludeKeywordResultError.error":
		if e.complexity.DeleteMercariCrawlSettingExcludeKeywordResultError.Error == nil {
			break
		}

		return e.complexity.DeleteMercariCrawlSettingExcludeKeywordResultError.Error(childComplexity), true

	case "DeleteMercariCrawlSettingExcludeKeywordResultError.ok":
		if e.complexity.DeleteMercariCrawlSettingExcludeKeywordResultError.Ok == nil {
			break
		}

		return e.complexity.DeleteMercariCrawlSettingExcludeKeywordResultError.Ok(childComplexity), true

	case "DeleteMercariCrawlSettingExcludeKeywordResultSuccess.ok":
		if e.complexity.DeleteMercariCrawlSettingExcludeKeywordResultSuccess.Ok == nil {
			break
		}

		return e.complexity.DeleteMercariCrawlSettingExcludeKeywordResultSuccess.Ok(childComplexity), true

	case "DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed.code":
		if e.complexity.DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed.Code(childComplexity), true

	case "DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed.details":
		if e.complexity.DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed.Details(childComplexity), true

	case "DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed.message":
		if e.complexity.DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed.Message(childComplexity), true

	case "DeleteMercariCrawlSettingRequiredKeywordResultError.error":
		if e.complexity.DeleteMercariCrawlSettingRequiredKeywordResultError.Error == nil {
			break
		}

		return e.complexity.DeleteMercariCrawlSettingRequiredKeywordResultError.Error(childComplexity), true

	case "DeleteMercariCrawlSettingRequiredKeywordResultError.ok":
		if e.complexity.DeleteMercariCrawlSettingRequiredKeywordResultError.Ok == nil {
			break
		}

		return e.complexity.DeleteMercariCrawlSettingRequiredKeywordResultError.Ok(childComplexity), true

	case "DeleteMercariCrawlSettingRequiredKeywordResultSuccess.ok":
		if e.complexity.DeleteMercariCrawlSettingRequiredKeywordResultSuccess.Ok == nil {
			break
		}

		return e.complexity.DeleteMercariCrawlSettingRequiredKeywordResultSuccess.Ok(childComplexity), true

	case "DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed.code":
		if e.complexity.DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed.Code(childComplexity), true

	case "DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed.details":
		if e.complexity.DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed.Details(childComplexity), true

	case "DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed.message":
		if e.complexity.DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed.Message(childComplexity), true

	case "DeleteProductResultError.error":
		if e.complexity.DeleteProductResultError.Error == nil {
			break
		}

		return e.complexity.DeleteProductResultError.Error(childComplexity), true

	case "DeleteProductResultError.ok":
		if e.complexity.DeleteProductResultError.Ok == nil {
			break
		}

		return e.complexity.DeleteProductResultError.Ok(childComplexity), true

	case "DeleteProductResultSuccess.ok":
		if e.complexity.DeleteProductResultSuccess.Ok == nil {
			break
		}

		return e.complexity.DeleteProductResultSuccess.Ok(childComplexity), true

	case "DeleteProductResultValidationFailed.code":
		if e.complexity.DeleteProductResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.DeleteProductResultValidationFailed.Code(childComplexity), true

	case "DeleteProductResultValidationFailed.details":
		if e.complexity.DeleteProductResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.DeleteProductResultValidationFailed.Details(childComplexity), true

	case "DeleteProductResultValidationFailed.message":
		if e.complexity.DeleteProductResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.DeleteProductResultValidationFailed.Message(childComplexity), true

	case "DeleteYahooAuctionCrawlSettingExcludeKeywordResultError.error":
		if e.complexity.DeleteYahooAuctionCrawlSettingExcludeKeywordResultError.Error == nil {
			break
		}

		return e.complexity.DeleteYahooAuctionCrawlSettingExcludeKeywordResultError.Error(childComplexity), true

	case "DeleteYahooAuctionCrawlSettingExcludeKeywordResultError.ok":
		if e.complexity.DeleteYahooAuctionCrawlSettingExcludeKeywordResultError.Ok == nil {
			break
		}

		return e.complexity.DeleteYahooAuctionCrawlSettingExcludeKeywordResultError.Ok(childComplexity), true

	case "DeleteYahooAuctionCrawlSettingExcludeKeywordResultSuccess.ok":
		if e.complexity.DeleteYahooAuctionCrawlSettingExcludeKeywordResultSuccess.Ok == nil {
			break
		}

		return e.complexity.DeleteYahooAuctionCrawlSettingExcludeKeywordResultSuccess.Ok(childComplexity), true

	case "DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.code":
		if e.complexity.DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.Code(childComplexity), true

	case "DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.details":
		if e.complexity.DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.Details(childComplexity), true

	case "DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.message":
		if e.complexity.DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.Message(childComplexity), true

	case "DeleteYahooAuctionCrawlSettingRequiredKeywordResultError.error":
		if e.complexity.DeleteYahooAuctionCrawlSettingRequiredKeywordResultError.Error == nil {
			break
		}

		return e.complexity.DeleteYahooAuctionCrawlSettingRequiredKeywordResultError.Error(childComplexity), true

	case "DeleteYahooAuctionCrawlSettingRequiredKeywordResultError.ok":
		if e.complexity.DeleteYahooAuctionCrawlSettingRequiredKeywordResultError.Ok == nil {
			break
		}

		return e.complexity.DeleteYahooAuctionCrawlSettingRequiredKeywordResultError.Ok(childComplexity), true

	case "DeleteYahooAuctionCrawlSettingRequiredKeywordResultSuccess.ok":
		if e.complexity.DeleteYahooAuctionCrawlSettingRequiredKeywordResultSuccess.Ok == nil {
			break
		}

		return e.complexity.DeleteYahooAuctionCrawlSettingRequiredKeywordResultSuccess.Ok(childComplexity), true

	case "DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.code":
		if e.complexity.DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.Code(childComplexity), true

	case "DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.details":
		if e.complexity.DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.Details(childComplexity), true

	case "DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.message":
		if e.complexity.DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.Message(childComplexity), true

	case "ErrorDetail.field":
		if e.complexity.ErrorDetail.Field == nil {
			break
		}

		return e.complexity.ErrorDetail.Field(childComplexity), true

	case "ErrorDetail.message":
		if e.complexity.ErrorDetail.Message == nil {
			break
		}

		return e.complexity.ErrorDetail.Message(childComplexity), true

	case "MercariCrawlSetting.categoryId":
		if e.complexity.MercariCrawlSetting.CategoryID == nil {
			break
		}

		return e.complexity.MercariCrawlSetting.CategoryID(childComplexity), true

	case "MercariCrawlSetting.createdAt":
		if e.complexity.MercariCrawlSetting.CreatedAt == nil {
			break
		}

		return e.complexity.MercariCrawlSetting.CreatedAt(childComplexity), true

	case "MercariCrawlSetting.enabled":
		if e.complexity.MercariCrawlSetting.Enabled == nil {
			break
		}

		return e.complexity.MercariCrawlSetting.Enabled(childComplexity), true

	case "MercariCrawlSetting.id":
		if e.complexity.MercariCrawlSetting.ID == nil {
			break
		}

		return e.complexity.MercariCrawlSetting.ID(childComplexity), true

	case "MercariCrawlSetting.keyword":
		if e.complexity.MercariCrawlSetting.Keyword == nil {
			break
		}

		return e.complexity.MercariCrawlSetting.Keyword(childComplexity), true

	case "MercariCrawlSetting.maxPrice":
		if e.complexity.MercariCrawlSetting.MaxPrice == nil {
			break
		}

		return e.complexity.MercariCrawlSetting.MaxPrice(childComplexity), true

	case "MercariCrawlSetting.mercariCrawlSettingExcludeKeywords":
		if e.complexity.MercariCrawlSetting.MercariCrawlSettingExcludeKeywords == nil {
			break
		}

		return e.complexity.MercariCrawlSetting.MercariCrawlSettingExcludeKeywords(childComplexity), true

	case "MercariCrawlSetting.mercariCrawlSettingRequiredKeywords":
		if e.complexity.MercariCrawlSetting.MercariCrawlSettingRequiredKeywords == nil {
			break
		}

		return e.complexity.MercariCrawlSetting.MercariCrawlSettingRequiredKeywords(childComplexity), true

	case "MercariCrawlSetting.minPrice":
		if e.complexity.MercariCrawlSetting.MinPrice == nil {
			break
		}

		return e.complexity.MercariCrawlSetting.MinPrice(childComplexity), true

	case "MercariCrawlSetting.productId":
		if e.complexity.MercariCrawlSetting.ProductID == nil {
			break
		}

		return e.complexity.MercariCrawlSetting.ProductID(childComplexity), true

	case "MercariCrawlSetting.updatedAt":
		if e.complexity.MercariCrawlSetting.UpdatedAt == nil {
			break
		}

		return e.complexity.MercariCrawlSetting.UpdatedAt(childComplexity), true

	case "MercariCrawlSettingExcludeKeyword.createdAt":
		if e.complexity.MercariCrawlSettingExcludeKeyword.CreatedAt == nil {
			break
		}

		return e.complexity.MercariCrawlSettingExcludeKeyword.CreatedAt(childComplexity), true

	case "MercariCrawlSettingExcludeKeyword.id":
		if e.complexity.MercariCrawlSettingExcludeKeyword.ID == nil {
			break
		}

		return e.complexity.MercariCrawlSettingExcludeKeyword.ID(childComplexity), true

	case "MercariCrawlSettingExcludeKeyword.keyword":
		if e.complexity.MercariCrawlSettingExcludeKeyword.Keyword == nil {
			break
		}

		return e.complexity.MercariCrawlSettingExcludeKeyword.Keyword(childComplexity), true

	case "MercariCrawlSettingExcludeKeyword.mercariCrawlSettingId":
		if e.complexity.MercariCrawlSettingExcludeKeyword.MercariCrawlSettingID == nil {
			break
		}

		return e.complexity.MercariCrawlSettingExcludeKeyword.MercariCrawlSettingID(childComplexity), true

	case "MercariCrawlSettingExcludeKeyword.updatedAt":
		if e.complexity.MercariCrawlSettingExcludeKeyword.UpdatedAt == nil {
			break
		}

		return e.complexity.MercariCrawlSettingExcludeKeyword.UpdatedAt(childComplexity), true

	case "MercariCrawlSettingRequiredKeyword.createdAt":
		if e.complexity.MercariCrawlSettingRequiredKeyword.CreatedAt == nil {
			break
		}

		return e.complexity.MercariCrawlSettingRequiredKeyword.CreatedAt(childComplexity), true

	case "MercariCrawlSettingRequiredKeyword.id":
		if e.complexity.MercariCrawlSettingRequiredKeyword.ID == nil {
			break
		}

		return e.complexity.MercariCrawlSettingRequiredKeyword.ID(childComplexity), true

	case "MercariCrawlSettingRequiredKeyword.keyword":
		if e.complexity.MercariCrawlSettingRequiredKeyword.Keyword == nil {
			break
		}

		return e.complexity.MercariCrawlSettingRequiredKeyword.Keyword(childComplexity), true

	case "MercariCrawlSettingRequiredKeyword.mercariCrawlSettingId":
		if e.complexity.MercariCrawlSettingRequiredKeyword.MercariCrawlSettingID == nil {
			break
		}

		return e.complexity.MercariCrawlSettingRequiredKeyword.MercariCrawlSettingID(childComplexity), true

	case "MercariCrawlSettingRequiredKeyword.updatedAt":
		if e.complexity.MercariCrawlSettingRequiredKeyword.UpdatedAt == nil {
			break
		}

		return e.complexity.MercariCrawlSettingRequiredKeyword.UpdatedAt(childComplexity), true

	case "MercariDailyPurchaseSummary.averagePurchasePrice":
		if e.complexity.MercariDailyPurchaseSummary.AveragePurchasePrice == nil {
			break
		}

		return e.complexity.MercariDailyPurchaseSummary.AveragePurchasePrice(childComplexity), true

	case "MercariDailyPurchaseSummary.createdAt":
		if e.complexity.MercariDailyPurchaseSummary.CreatedAt == nil {
			break
		}

		return e.complexity.MercariDailyPurchaseSummary.CreatedAt(childComplexity), true

	case "MercariDailyPurchaseSummary.date":
		if e.complexity.MercariDailyPurchaseSummary.Date == nil {
			break
		}

		return e.complexity.MercariDailyPurchaseSummary.Date(childComplexity), true

	case "MercariDailyPurchaseSummary.id":
		if e.complexity.MercariDailyPurchaseSummary.ID == nil {
			break
		}

		return e.complexity.MercariDailyPurchaseSummary.ID(childComplexity), true

	case "MercariDailyPurchaseSummary.productId":
		if e.complexity.MercariDailyPurchaseSummary.ProductID == nil {
			break
		}

		return e.complexity.MercariDailyPurchaseSummary.ProductID(childComplexity), true

	case "MercariDailyPurchaseSummary.purchaseCount":
		if e.complexity.MercariDailyPurchaseSummary.PurchaseCount == nil {
			break
		}

		return e.complexity.MercariDailyPurchaseSummary.PurchaseCount(childComplexity), true

	case "MercariDailyPurchaseSummary.updatedAt":
		if e.complexity.MercariDailyPurchaseSummary.UpdatedAt == nil {
			break
		}

		return e.complexity.MercariDailyPurchaseSummary.UpdatedAt(childComplexity), true

	case "MercariProduct.boughtDate":
		if e.complexity.MercariProduct.BoughtDate == nil {
			break
		}

		return e.complexity.MercariProduct.BoughtDate(childComplexity), true

	case "MercariProduct.createdAt":
		if e.complexity.MercariProduct.CreatedAt == nil {
			break
		}

		return e.complexity.MercariProduct.CreatedAt(childComplexity), true

	case "MercariProduct.id":
		if e.complexity.MercariProduct.ID == nil {
			break
		}

		return e.complexity.MercariProduct.ID(childComplexity), true

	case "MercariProduct.mercariId":
		if e.complexity.MercariProduct.MercariID == nil {
			break
		}

		return e.complexity.MercariProduct.MercariID(childComplexity), true

	case "MercariProduct.name":
		if e.complexity.MercariProduct.Name == nil {
			break
		}

		return e.complexity.MercariProduct.Name(childComplexity), true

	case "MercariProduct.price":
		if e.complexity.MercariProduct.Price == nil {
			break
		}

		return e.complexity.MercariProduct.Price(childComplexity), true

	case "MercariProduct.productId":
		if e.complexity.MercariProduct.ProductID == nil {
			break
		}

		return e.complexity.MercariProduct.ProductID(childComplexity), true

	case "MercariProduct.published":
		if e.complexity.MercariProduct.Published == nil {
			break
		}

		return e.complexity.MercariProduct.Published(childComplexity), true

	case "MercariProduct.thumbnailUrl":
		if e.complexity.MercariProduct.ThumbnailURL == nil {
			break
		}

		return e.complexity.MercariProduct.ThumbnailURL(childComplexity), true

	case "MercariProduct.updatedAt":
		if e.complexity.MercariProduct.UpdatedAt == nil {
			break
		}

		return e.complexity.MercariProduct.UpdatedAt(childComplexity), true

	case "Mutation.createMercariCrawlSettingExcludeKeyword":
		if e.complexity.Mutation.CreateMercariCrawlSettingExcludeKeyword == nil {
			break
		}

		args, err := ec.field_Mutation_createMercariCrawlSettingExcludeKeyword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateMercariCrawlSettingExcludeKeyword(childComplexity, args["input"].(model.CreateMercariCrawlSettingExcludeKeywordInput)), true

	case "Mutation.createMercariCrawlSettingRequiredKeyword":
		if e.complexity.Mutation.CreateMercariCrawlSettingRequiredKeyword == nil {
			break
		}

		args, err := ec.field_Mutation_createMercariCrawlSettingRequiredKeyword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateMercariCrawlSettingRequiredKeyword(childComplexity, args["input"].(model.CreateMercariCrawlSettingRequiredKeywordInput)), true

	case "Mutation.createProduct":
		if e.complexity.Mutation.CreateProduct == nil {
			break
		}

		args, err := ec.field_Mutation_createProduct_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateProduct(childComplexity, args["input"].(model.CreateProductInput)), true

	case "Mutation.createYahooAuctionCrawlSettingExcludeKeyword":
		if e.complexity.Mutation.CreateYahooAuctionCrawlSettingExcludeKeyword == nil {
			break
		}

		args, err := ec.field_Mutation_createYahooAuctionCrawlSettingExcludeKeyword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateYahooAuctionCrawlSettingExcludeKeyword(childComplexity, args["input"].(model.CreateYahooAuctionCrawlSettingExcludeKeywordInput)), true

	case "Mutation.createYahooAuctionCrawlSettingRequiredKeyword":
		if e.complexity.Mutation.CreateYahooAuctionCrawlSettingRequiredKeyword == nil {
			break
		}

		args, err := ec.field_Mutation_createYahooAuctionCrawlSettingRequiredKeyword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateYahooAuctionCrawlSettingRequiredKeyword(childComplexity, args["input"].(model.CreateYahooAuctionCrawlSettingRequiredKeywordInput)), true

	case "Mutation.deleteMercariCrawlSettingExcludeKeyword":
		if e.complexity.Mutation.DeleteMercariCrawlSettingExcludeKeyword == nil {
			break
		}

		args, err := ec.field_Mutation_deleteMercariCrawlSettingExcludeKeyword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteMercariCrawlSettingExcludeKeyword(childComplexity, args["id"].(string), args["productId"].(string)), true

	case "Mutation.deleteMercariCrawlSettingRequiredKeyword":
		if e.complexity.Mutation.DeleteMercariCrawlSettingRequiredKeyword == nil {
			break
		}

		args, err := ec.field_Mutation_deleteMercariCrawlSettingRequiredKeyword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteMercariCrawlSettingRequiredKeyword(childComplexity, args["id"].(string), args["productId"].(string)), true

	case "Mutation.deleteProduct":
		if e.complexity.Mutation.DeleteProduct == nil {
			break
		}

		args, err := ec.field_Mutation_deleteProduct_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteProduct(childComplexity, args["id"].(string)), true

	case "Mutation.deleteYahooAuctionCrawlSettingExcludeKeyword":
		if e.complexity.Mutation.DeleteYahooAuctionCrawlSettingExcludeKeyword == nil {
			break
		}

		args, err := ec.field_Mutation_deleteYahooAuctionCrawlSettingExcludeKeyword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteYahooAuctionCrawlSettingExcludeKeyword(childComplexity, args["id"].(string), args["productId"].(string)), true

	case "Mutation.deleteYahooAuctionCrawlSettingRequiredKeyword":
		if e.complexity.Mutation.DeleteYahooAuctionCrawlSettingRequiredKeyword == nil {
			break
		}

		args, err := ec.field_Mutation_deleteYahooAuctionCrawlSettingRequiredKeyword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteYahooAuctionCrawlSettingRequiredKeyword(childComplexity, args["id"].(string), args["productId"].(string)), true

	case "Mutation.updateMercariCrawlSettingExcludeKeyword":
		if e.complexity.Mutation.UpdateMercariCrawlSettingExcludeKeyword == nil {
			break
		}

		args, err := ec.field_Mutation_updateMercariCrawlSettingExcludeKeyword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMercariCrawlSettingExcludeKeyword(childComplexity, args["input"].(model.UpdateMercariCrawlSettingExcludeKeywordInput)), true

	case "Mutation.updateMercariCrawlSettingRequiredKeyword":
		if e.complexity.Mutation.UpdateMercariCrawlSettingRequiredKeyword == nil {
			break
		}

		args, err := ec.field_Mutation_updateMercariCrawlSettingRequiredKeyword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMercariCrawlSettingRequiredKeyword(childComplexity, args["input"].(model.UpdateMercariCrawlSettingRequiredKeywordInput)), true

	case "Mutation.updateProduct":
		if e.complexity.Mutation.UpdateProduct == nil {
			break
		}

		args, err := ec.field_Mutation_updateProduct_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateProduct(childComplexity, args["id"].(string), args["input"].(model.UpdateProductInput)), true

	case "Mutation.updateYahooAuctionCrawlSettingExcludeKeyword":
		if e.complexity.Mutation.UpdateYahooAuctionCrawlSettingExcludeKeyword == nil {
			break
		}

		args, err := ec.field_Mutation_updateYahooAuctionCrawlSettingExcludeKeyword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateYahooAuctionCrawlSettingExcludeKeyword(childComplexity, args["input"].(model.UpdateYahooAuctionCrawlSettingExcludeKeywordInput)), true

	case "Mutation.updateYahooAuctionCrawlSettingRequiredKeyword":
		if e.complexity.Mutation.UpdateYahooAuctionCrawlSettingRequiredKeyword == nil {
			break
		}

		args, err := ec.field_Mutation_updateYahooAuctionCrawlSettingRequiredKeyword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateYahooAuctionCrawlSettingRequiredKeyword(childComplexity, args["input"].(model.UpdateYahooAuctionCrawlSettingRequiredKeywordInput)), true

	case "Product.id":
		if e.complexity.Product.ID == nil {
			break
		}

		return e.complexity.Product.ID(childComplexity), true

	case "Product.mercariCrawlSetting":
		if e.complexity.Product.MercariCrawlSetting == nil {
			break
		}

		return e.complexity.Product.MercariCrawlSetting(childComplexity), true

	case "Product.mercariDailyPurchaseSummaries":
		if e.complexity.Product.MercariDailyPurchaseSummaries == nil {
			break
		}

		return e.complexity.Product.MercariDailyPurchaseSummaries(childComplexity), true

	case "Product.mercariProducts":
		if e.complexity.Product.MercariProducts == nil {
			break
		}

		args, err := ec.field_Product_mercariProducts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Product.MercariProducts(childComplexity, args["published"].(*bool), args["sort"].(*string), args["order"].(*string)), true

	case "Product.name":
		if e.complexity.Product.Name == nil {
			break
		}

		return e.complexity.Product.Name(childComplexity), true

	case "Product.relatedProducts":
		if e.complexity.Product.RelatedProducts == nil {
			break
		}

		args, err := ec.field_Product_relatedProducts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Product.RelatedProducts(childComplexity, args["published"].(*bool), args["page"].(*int), args["per"].(*int), args["sort"].(*string), args["order"].(*string)), true

	case "Product.yahooAuctionCrawlSetting":
		if e.complexity.Product.YahooAuctionCrawlSetting == nil {
			break
		}

		return e.complexity.Product.YahooAuctionCrawlSetting(childComplexity), true

	case "Product.yahooAuctionDailyPurchaseSummaries":
		if e.complexity.Product.YahooAuctionDailyPurchaseSummaries == nil {
			break
		}

		return e.complexity.Product.YahooAuctionDailyPurchaseSummaries(childComplexity), true

	case "Product.yahooAuctionProducts":
		if e.complexity.Product.YahooAuctionProducts == nil {
			break
		}

		args, err := ec.field_Product_yahooAuctionProducts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Product.YahooAuctionProducts(childComplexity, args["published"].(*bool), args["sort"].(*string), args["order"].(*string)), true

	case "Query.node":
		if e.complexity.Query.Node == nil {
			break
		}

		args, err := ec.field_Query_node_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Node(childComplexity, args["id"].(string)), true

	case "Query.product":
		if e.complexity.Query.Product == nil {
			break
		}

		args, err := ec.field_Query_product_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Product(childComplexity, args["id"].(string)), true

	case "Query.products":
		if e.complexity.Query.Products == nil {
			break
		}

		args, err := ec.field_Query_products_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Products(childComplexity, args["id"].(*string), args["name"].(*string)), true

	case "RelatedProduct.boughtDate":
		if e.complexity.RelatedProduct.BoughtDate == nil {
			break
		}

		return e.complexity.RelatedProduct.BoughtDate(childComplexity), true

	case "RelatedProduct.createdAt":
		if e.complexity.RelatedProduct.CreatedAt == nil {
			break
		}

		return e.complexity.RelatedProduct.CreatedAt(childComplexity), true

	case "RelatedProduct.externalId":
		if e.complexity.RelatedProduct.ExternalID == nil {
			break
		}

		return e.complexity.RelatedProduct.ExternalID(childComplexity), true

	case "RelatedProduct.name":
		if e.complexity.RelatedProduct.Name == nil {
			break
		}

		return e.complexity.RelatedProduct.Name(childComplexity), true

	case "RelatedProduct.price":
		if e.complexity.RelatedProduct.Price == nil {
			break
		}

		return e.complexity.RelatedProduct.Price(childComplexity), true

	case "RelatedProduct.productId":
		if e.complexity.RelatedProduct.ProductID == nil {
			break
		}

		return e.complexity.RelatedProduct.ProductID(childComplexity), true

	case "RelatedProduct.published":
		if e.complexity.RelatedProduct.Published == nil {
			break
		}

		return e.complexity.RelatedProduct.Published(childComplexity), true

	case "RelatedProduct.relatedType":
		if e.complexity.RelatedProduct.RelatedType == nil {
			break
		}

		return e.complexity.RelatedProduct.RelatedType(childComplexity), true

	case "RelatedProduct.thumbnailUrl":
		if e.complexity.RelatedProduct.ThumbnailURL == nil {
			break
		}

		return e.complexity.RelatedProduct.ThumbnailURL(childComplexity), true

	case "RelatedProduct.updatedAt":
		if e.complexity.RelatedProduct.UpdatedAt == nil {
			break
		}

		return e.complexity.RelatedProduct.UpdatedAt(childComplexity), true

	case "UpdateMercariCrawlSettingExcludeKeywordResultError.error":
		if e.complexity.UpdateMercariCrawlSettingExcludeKeywordResultError.Error == nil {
			break
		}

		return e.complexity.UpdateMercariCrawlSettingExcludeKeywordResultError.Error(childComplexity), true

	case "UpdateMercariCrawlSettingExcludeKeywordResultError.ok":
		if e.complexity.UpdateMercariCrawlSettingExcludeKeywordResultError.Ok == nil {
			break
		}

		return e.complexity.UpdateMercariCrawlSettingExcludeKeywordResultError.Ok(childComplexity), true

	case "UpdateMercariCrawlSettingExcludeKeywordResultSuccess.mercariCrawlSettingExcludeKeyword":
		if e.complexity.UpdateMercariCrawlSettingExcludeKeywordResultSuccess.MercariCrawlSettingExcludeKeyword == nil {
			break
		}

		return e.complexity.UpdateMercariCrawlSettingExcludeKeywordResultSuccess.MercariCrawlSettingExcludeKeyword(childComplexity), true

	case "UpdateMercariCrawlSettingExcludeKeywordResultSuccess.ok":
		if e.complexity.UpdateMercariCrawlSettingExcludeKeywordResultSuccess.Ok == nil {
			break
		}

		return e.complexity.UpdateMercariCrawlSettingExcludeKeywordResultSuccess.Ok(childComplexity), true

	case "UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed.code":
		if e.complexity.UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed.Code(childComplexity), true

	case "UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed.details":
		if e.complexity.UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed.Details(childComplexity), true

	case "UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed.message":
		if e.complexity.UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed.Message(childComplexity), true

	case "UpdateMercariCrawlSettingRequiredKeywordResultError.error":
		if e.complexity.UpdateMercariCrawlSettingRequiredKeywordResultError.Error == nil {
			break
		}

		return e.complexity.UpdateMercariCrawlSettingRequiredKeywordResultError.Error(childComplexity), true

	case "UpdateMercariCrawlSettingRequiredKeywordResultError.ok":
		if e.complexity.UpdateMercariCrawlSettingRequiredKeywordResultError.Ok == nil {
			break
		}

		return e.complexity.UpdateMercariCrawlSettingRequiredKeywordResultError.Ok(childComplexity), true

	case "UpdateMercariCrawlSettingRequiredKeywordResultSuccess.mercariCrawlSettingRequiredKeyword":
		if e.complexity.UpdateMercariCrawlSettingRequiredKeywordResultSuccess.MercariCrawlSettingRequiredKeyword == nil {
			break
		}

		return e.complexity.UpdateMercariCrawlSettingRequiredKeywordResultSuccess.MercariCrawlSettingRequiredKeyword(childComplexity), true

	case "UpdateMercariCrawlSettingRequiredKeywordResultSuccess.ok":
		if e.complexity.UpdateMercariCrawlSettingRequiredKeywordResultSuccess.Ok == nil {
			break
		}

		return e.complexity.UpdateMercariCrawlSettingRequiredKeywordResultSuccess.Ok(childComplexity), true

	case "UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed.code":
		if e.complexity.UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed.Code(childComplexity), true

	case "UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed.details":
		if e.complexity.UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed.Details(childComplexity), true

	case "UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed.message":
		if e.complexity.UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed.Message(childComplexity), true

	case "UpdateProductResultError.error":
		if e.complexity.UpdateProductResultError.Error == nil {
			break
		}

		return e.complexity.UpdateProductResultError.Error(childComplexity), true

	case "UpdateProductResultError.ok":
		if e.complexity.UpdateProductResultError.Ok == nil {
			break
		}

		return e.complexity.UpdateProductResultError.Ok(childComplexity), true

	case "UpdateProductResultSuccess.ok":
		if e.complexity.UpdateProductResultSuccess.Ok == nil {
			break
		}

		return e.complexity.UpdateProductResultSuccess.Ok(childComplexity), true

	case "UpdateProductResultSuccess.product":
		if e.complexity.UpdateProductResultSuccess.Product == nil {
			break
		}

		return e.complexity.UpdateProductResultSuccess.Product(childComplexity), true

	case "UpdateProductResultValidationFailed.code":
		if e.complexity.UpdateProductResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.UpdateProductResultValidationFailed.Code(childComplexity), true

	case "UpdateProductResultValidationFailed.details":
		if e.complexity.UpdateProductResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.UpdateProductResultValidationFailed.Details(childComplexity), true

	case "UpdateProductResultValidationFailed.message":
		if e.complexity.UpdateProductResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.UpdateProductResultValidationFailed.Message(childComplexity), true

	case "UpdateYahooAuctionCrawlSettingExcludeKeywordResultError.error":
		if e.complexity.UpdateYahooAuctionCrawlSettingExcludeKeywordResultError.Error == nil {
			break
		}

		return e.complexity.UpdateYahooAuctionCrawlSettingExcludeKeywordResultError.Error(childComplexity), true

	case "UpdateYahooAuctionCrawlSettingExcludeKeywordResultError.ok":
		if e.complexity.UpdateYahooAuctionCrawlSettingExcludeKeywordResultError.Ok == nil {
			break
		}

		return e.complexity.UpdateYahooAuctionCrawlSettingExcludeKeywordResultError.Ok(childComplexity), true

	case "UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess.ok":
		if e.complexity.UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess.Ok == nil {
			break
		}

		return e.complexity.UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess.Ok(childComplexity), true

	case "UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess.yahooAuctionCrawlSettingExcludeKeyword":
		if e.complexity.UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess.YahooAuctionCrawlSettingExcludeKeyword == nil {
			break
		}

		return e.complexity.UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess.YahooAuctionCrawlSettingExcludeKeyword(childComplexity), true

	case "UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.code":
		if e.complexity.UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.Code(childComplexity), true

	case "UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.details":
		if e.complexity.UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.Details(childComplexity), true

	case "UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.message":
		if e.complexity.UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed.Message(childComplexity), true

	case "UpdateYahooAuctionCrawlSettingRequiredKeywordResultError.error":
		if e.complexity.UpdateYahooAuctionCrawlSettingRequiredKeywordResultError.Error == nil {
			break
		}

		return e.complexity.UpdateYahooAuctionCrawlSettingRequiredKeywordResultError.Error(childComplexity), true

	case "UpdateYahooAuctionCrawlSettingRequiredKeywordResultError.ok":
		if e.complexity.UpdateYahooAuctionCrawlSettingRequiredKeywordResultError.Ok == nil {
			break
		}

		return e.complexity.UpdateYahooAuctionCrawlSettingRequiredKeywordResultError.Ok(childComplexity), true

	case "UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess.ok":
		if e.complexity.UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess.Ok == nil {
			break
		}

		return e.complexity.UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess.Ok(childComplexity), true

	case "UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess.yahooAuctionCrawlSettingRequiredKeyword":
		if e.complexity.UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess.YahooAuctionCrawlSettingRequiredKeyword == nil {
			break
		}

		return e.complexity.UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess.YahooAuctionCrawlSettingRequiredKeyword(childComplexity), true

	case "UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.code":
		if e.complexity.UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.Code == nil {
			break
		}

		return e.complexity.UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.Code(childComplexity), true

	case "UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.details":
		if e.complexity.UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.Details == nil {
			break
		}

		return e.complexity.UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.Details(childComplexity), true

	case "UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.message":
		if e.complexity.UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.Message == nil {
			break
		}

		return e.complexity.UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed.Message(childComplexity), true

	case "YahooAuctionCrawlSetting.categoryId":
		if e.complexity.YahooAuctionCrawlSetting.CategoryID == nil {
			break
		}

		return e.complexity.YahooAuctionCrawlSetting.CategoryID(childComplexity), true

	case "YahooAuctionCrawlSetting.createdAt":
		if e.complexity.YahooAuctionCrawlSetting.CreatedAt == nil {
			break
		}

		return e.complexity.YahooAuctionCrawlSetting.CreatedAt(childComplexity), true

	case "YahooAuctionCrawlSetting.enabled":
		if e.complexity.YahooAuctionCrawlSetting.Enabled == nil {
			break
		}

		return e.complexity.YahooAuctionCrawlSetting.Enabled(childComplexity), true

	case "YahooAuctionCrawlSetting.id":
		if e.complexity.YahooAuctionCrawlSetting.ID == nil {
			break
		}

		return e.complexity.YahooAuctionCrawlSetting.ID(childComplexity), true

	case "YahooAuctionCrawlSetting.keyword":
		if e.complexity.YahooAuctionCrawlSetting.Keyword == nil {
			break
		}

		return e.complexity.YahooAuctionCrawlSetting.Keyword(childComplexity), true

	case "YahooAuctionCrawlSetting.maxPrice":
		if e.complexity.YahooAuctionCrawlSetting.MaxPrice == nil {
			break
		}

		return e.complexity.YahooAuctionCrawlSetting.MaxPrice(childComplexity), true

	case "YahooAuctionCrawlSetting.minPrice":
		if e.complexity.YahooAuctionCrawlSetting.MinPrice == nil {
			break
		}

		return e.complexity.YahooAuctionCrawlSetting.MinPrice(childComplexity), true

	case "YahooAuctionCrawlSetting.productId":
		if e.complexity.YahooAuctionCrawlSetting.ProductID == nil {
			break
		}

		return e.complexity.YahooAuctionCrawlSetting.ProductID(childComplexity), true

	case "YahooAuctionCrawlSetting.updatedAt":
		if e.complexity.YahooAuctionCrawlSetting.UpdatedAt == nil {
			break
		}

		return e.complexity.YahooAuctionCrawlSetting.UpdatedAt(childComplexity), true

	case "YahooAuctionCrawlSetting.yahooAuctionCrawlSettingExcludeKeywords":
		if e.complexity.YahooAuctionCrawlSetting.YahooAuctionCrawlSettingExcludeKeywords == nil {
			break
		}

		return e.complexity.YahooAuctionCrawlSetting.YahooAuctionCrawlSettingExcludeKeywords(childComplexity), true

	case "YahooAuctionCrawlSetting.yahooAuctionCrawlSettingRequiredKeywords":
		if e.complexity.YahooAuctionCrawlSetting.YahooAuctionCrawlSettingRequiredKeywords == nil {
			break
		}

		return e.complexity.YahooAuctionCrawlSetting.YahooAuctionCrawlSettingRequiredKeywords(childComplexity), true

	case "YahooAuctionCrawlSettingExcludeKeyword.createdAt":
		if e.complexity.YahooAuctionCrawlSettingExcludeKeyword.CreatedAt == nil {
			break
		}

		return e.complexity.YahooAuctionCrawlSettingExcludeKeyword.CreatedAt(childComplexity), true

	case "YahooAuctionCrawlSettingExcludeKeyword.id":
		if e.complexity.YahooAuctionCrawlSettingExcludeKeyword.ID == nil {
			break
		}

		return e.complexity.YahooAuctionCrawlSettingExcludeKeyword.ID(childComplexity), true

	case "YahooAuctionCrawlSettingExcludeKeyword.keyword":
		if e.complexity.YahooAuctionCrawlSettingExcludeKeyword.Keyword == nil {
			break
		}

		return e.complexity.YahooAuctionCrawlSettingExcludeKeyword.Keyword(childComplexity), true

	case "YahooAuctionCrawlSettingExcludeKeyword.updatedAt":
		if e.complexity.YahooAuctionCrawlSettingExcludeKeyword.UpdatedAt == nil {
			break
		}

		return e.complexity.YahooAuctionCrawlSettingExcludeKeyword.UpdatedAt(childComplexity), true

	case "YahooAuctionCrawlSettingExcludeKeyword.yahooAuctionCrawlSettingId":
		if e.complexity.YahooAuctionCrawlSettingExcludeKeyword.YahooAuctionCrawlSettingID == nil {
			break
		}

		return e.complexity.YahooAuctionCrawlSettingExcludeKeyword.YahooAuctionCrawlSettingID(childComplexity), true

	case "YahooAuctionCrawlSettingRequiredKeyword.createdAt":
		if e.complexity.YahooAuctionCrawlSettingRequiredKeyword.CreatedAt == nil {
			break
		}

		return e.complexity.YahooAuctionCrawlSettingRequiredKeyword.CreatedAt(childComplexity), true

	case "YahooAuctionCrawlSettingRequiredKeyword.id":
		if e.complexity.YahooAuctionCrawlSettingRequiredKeyword.ID == nil {
			break
		}

		return e.complexity.YahooAuctionCrawlSettingRequiredKeyword.ID(childComplexity), true

	case "YahooAuctionCrawlSettingRequiredKeyword.keyword":
		if e.complexity.YahooAuctionCrawlSettingRequiredKeyword.Keyword == nil {
			break
		}

		return e.complexity.YahooAuctionCrawlSettingRequiredKeyword.Keyword(childComplexity), true

	case "YahooAuctionCrawlSettingRequiredKeyword.updatedAt":
		if e.complexity.YahooAuctionCrawlSettingRequiredKeyword.UpdatedAt == nil {
			break
		}

		return e.complexity.YahooAuctionCrawlSettingRequiredKeyword.UpdatedAt(childComplexity), true

	case "YahooAuctionCrawlSettingRequiredKeyword.yahooAuctionCrawlSettingId":
		if e.complexity.YahooAuctionCrawlSettingRequiredKeyword.YahooAuctionCrawlSettingID == nil {
			break
		}

		return e.complexity.YahooAuctionCrawlSettingRequiredKeyword.YahooAuctionCrawlSettingID(childComplexity), true

	case "YahooAuctionDailyPurchaseSummary.averagePurchasePrice":
		if e.complexity.YahooAuctionDailyPurchaseSummary.AveragePurchasePrice == nil {
			break
		}

		return e.complexity.YahooAuctionDailyPurchaseSummary.AveragePurchasePrice(childComplexity), true

	case "YahooAuctionDailyPurchaseSummary.createdAt":
		if e.complexity.YahooAuctionDailyPurchaseSummary.CreatedAt == nil {
			break
		}

		return e.complexity.YahooAuctionDailyPurchaseSummary.CreatedAt(childComplexity), true

	case "YahooAuctionDailyPurchaseSummary.date":
		if e.complexity.YahooAuctionDailyPurchaseSummary.Date == nil {
			break
		}

		return e.complexity.YahooAuctionDailyPurchaseSummary.Date(childComplexity), true

	case "YahooAuctionDailyPurchaseSummary.id":
		if e.complexity.YahooAuctionDailyPurchaseSummary.ID == nil {
			break
		}

		return e.complexity.YahooAuctionDailyPurchaseSummary.ID(childComplexity), true

	case "YahooAuctionDailyPurchaseSummary.productId":
		if e.complexity.YahooAuctionDailyPurchaseSummary.ProductID == nil {
			break
		}

		return e.complexity.YahooAuctionDailyPurchaseSummary.ProductID(childComplexity), true

	case "YahooAuctionDailyPurchaseSummary.purchaseCount":
		if e.complexity.YahooAuctionDailyPurchaseSummary.PurchaseCount == nil {
			break
		}

		return e.complexity.YahooAuctionDailyPurchaseSummary.PurchaseCount(childComplexity), true

	case "YahooAuctionDailyPurchaseSummary.updatedAt":
		if e.complexity.YahooAuctionDailyPurchaseSummary.UpdatedAt == nil {
			break
		}

		return e.complexity.YahooAuctionDailyPurchaseSummary.UpdatedAt(childComplexity), true

	case "YahooAuctionProduct.boughtDate":
		if e.complexity.YahooAuctionProduct.BoughtDate == nil {
			break
		}

		return e.complexity.YahooAuctionProduct.BoughtDate(childComplexity), true

	case "YahooAuctionProduct.createdAt":
		if e.complexity.YahooAuctionProduct.CreatedAt == nil {
			break
		}

		return e.complexity.YahooAuctionProduct.CreatedAt(childComplexity), true

	case "YahooAuctionProduct.id":
		if e.complexity.YahooAuctionProduct.ID == nil {
			break
		}

		return e.complexity.YahooAuctionProduct.ID(childComplexity), true

	case "YahooAuctionProduct.name":
		if e.complexity.YahooAuctionProduct.Name == nil {
			break
		}

		return e.complexity.YahooAuctionProduct.Name(childComplexity), true

	case "YahooAuctionProduct.price":
		if e.complexity.YahooAuctionProduct.Price == nil {
			break
		}

		return e.complexity.YahooAuctionProduct.Price(childComplexity), true

	case "YahooAuctionProduct.productId":
		if e.complexity.YahooAuctionProduct.ProductID == nil {
			break
		}

		return e.complexity.YahooAuctionProduct.ProductID(childComplexity), true

	case "YahooAuctionProduct.published":
		if e.complexity.YahooAuctionProduct.Published == nil {
			break
		}

		return e.complexity.YahooAuctionProduct.Published(childComplexity), true

	case "YahooAuctionProduct.thumbnailUrl":
		if e.complexity.YahooAuctionProduct.ThumbnailURL == nil {
			break
		}

		return e.complexity.YahooAuctionProduct.ThumbnailURL(childComplexity), true

	case "YahooAuctionProduct.updatedAt":
		if e.complexity.YahooAuctionProduct.UpdatedAt == nil {
			break
		}

		return e.complexity.YahooAuctionProduct.UpdatedAt(childComplexity), true

	case "YahooAuctionProduct.yahooAuctionId":
		if e.complexity.YahooAuctionProduct.YahooAuctionID == nil {
			break
		}

		return e.complexity.YahooAuctionProduct.YahooAuctionID(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputCreateMercariCrawlSettingExcludeKeywordInput,
		ec.unmarshalInputCreateMercariCrawlSettingInput,
		ec.unmarshalInputCreateMercariCrawlSettingRequiredKeywordInput,
		ec.unmarshalInputCreateProductInput,
		ec.unmarshalInputCreateYahooAuctionCrawlSettingExcludeKeywordInput,
		ec.unmarshalInputCreateYahooAuctionCrawlSettingInput,
		ec.unmarshalInputCreateYahooAuctionCrawlSettingRequiredKeywordInput,
		ec.unmarshalInputUpdateMercariCrawlSettingExcludeKeywordInput,
		ec.unmarshalInputUpdateMercariCrawlSettingInput,
		ec.unmarshalInputUpdateMercariCrawlSettingRequiredKeywordInput,
		ec.unmarshalInputUpdateProductInput,
		ec.unmarshalInputUpdateYahooAuctionCrawlSettingExcludeKeywordInput,
		ec.unmarshalInputUpdateYahooAuctionCrawlSettingInput,
		ec.unmarshalInputUpdateYahooAuctionCrawlSettingRequiredKeywordInput,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, rc.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../graph/common.graphqls", Input: `interface Node {
  id: ID!
}
`, BuiltIn: false},
	{Name: "../graph/mutations.graphqls", Input: `type Mutation {
  createProduct(input: CreateProductInput!): CreateProductResult!
  updateProduct(id: ID!, input: UpdateProductInput!): UpdateProductResult!
  deleteProduct(id: ID!): DeleteProductResult!
  createYahooAuctionCrawlSettingExcludeKeyword(
    input: CreateYahooAuctionCrawlSettingExcludeKeywordInput!
  ): CreateYahooAuctionCrawlSettingExcludeKeywordResult!
  updateYahooAuctionCrawlSettingExcludeKeyword(
    input: UpdateYahooAuctionCrawlSettingExcludeKeywordInput!
  ): UpdateYahooAuctionCrawlSettingExcludeKeywordResult!
  deleteYahooAuctionCrawlSettingExcludeKeyword(
    id: ID!
    productId: ID!
  ): DeleteYahooAuctionCrawlSettingExcludeKeywordResult!
  createYahooAuctionCrawlSettingRequiredKeyword(
    input: CreateYahooAuctionCrawlSettingRequiredKeywordInput!
  ): CreateYahooAuctionCrawlSettingRequiredKeywordResult!
  updateYahooAuctionCrawlSettingRequiredKeyword(
    input: UpdateYahooAuctionCrawlSettingRequiredKeywordInput!
  ): UpdateYahooAuctionCrawlSettingRequiredKeywordResult!
  deleteYahooAuctionCrawlSettingRequiredKeyword(
    id: ID!
    productId: ID!
  ): DeleteYahooAuctionCrawlSettingRequiredKeywordResult!
  createMercariCrawlSettingExcludeKeyword(
    input: CreateMercariCrawlSettingExcludeKeywordInput!
  ): CreateMercariCrawlSettingExcludeKeywordResult!
  updateMercariCrawlSettingExcludeKeyword(
    input: UpdateMercariCrawlSettingExcludeKeywordInput!
  ): UpdateMercariCrawlSettingExcludeKeywordResult!
  deleteMercariCrawlSettingExcludeKeyword(
    id: ID!
    productId: ID!
  ): DeleteMercariCrawlSettingExcludeKeywordResult!
  createMercariCrawlSettingRequiredKeyword(
    input: CreateMercariCrawlSettingRequiredKeywordInput!
  ): CreateMercariCrawlSettingRequiredKeywordResult!
  updateMercariCrawlSettingRequiredKeyword(
    input: UpdateMercariCrawlSettingRequiredKeywordInput!
  ): UpdateMercariCrawlSettingRequiredKeywordResult!
  deleteMercariCrawlSettingRequiredKeyword(
    id: ID!
    productId: ID!
  ): DeleteMercariCrawlSettingRequiredKeywordResult!
}

## common ##

interface ResultBase {
  ok: Boolean!
}

interface UserError {
  code: String!
  message: String!
}

type ErrorDetail {
  field: String!
  message: String!
}

## CreateProduct ##

input CreateProductInput {
  name: String!
  yahoo_auction_crawl_setting: CreateYahooAuctionCrawlSettingInput!
  mercari_crawl_setting: CreateMercariCrawlSettingInput!
}

input CreateYahooAuctionCrawlSettingInput {
  keyword: String!
  category_id: Int
  min_price: Int!
  max_price: Int!
  enabled: Boolean!
}

input CreateMercariCrawlSettingInput {
  keyword: String!
  category_id: Int
  min_price: Int!
  max_price: Int!
  enabled: Boolean!
}

union CreateProductResult =
    CreateProductResultSuccess
  | CreateProductResultError

type CreateProductResultSuccess implements ResultBase {
  ok: Boolean!
  product: Product!
}

type CreateProductResultError implements ResultBase {
  ok: Boolean!
  error: CreateProductResultErrors!
}

union CreateProductResultErrors = CreateProductResultValidationFailed

type CreateProductResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## UpdateProduct ##

input UpdateProductInput {
  name: String!
  yahoo_auction_crawl_setting: UpdateYahooAuctionCrawlSettingInput!
  mercari_crawl_setting: UpdateMercariCrawlSettingInput!
}

input UpdateYahooAuctionCrawlSettingInput {
  keyword: String!
  category_id: Int
  min_price: Int!
  max_price: Int!
  enabled: Boolean!
}

input UpdateMercariCrawlSettingInput {
  keyword: String!
  category_id: Int
  min_price: Int!
  max_price: Int!
  enabled: Boolean!
}

union UpdateProductResult =
    UpdateProductResultSuccess
  | UpdateProductResultError

type UpdateProductResultSuccess implements ResultBase {
  ok: Boolean!
  product: Product!
}

type UpdateProductResultError implements ResultBase {
  ok: Boolean!
  error: UpdateProductResultErrors!
}

union UpdateProductResultErrors = UpdateProductResultValidationFailed

type UpdateProductResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## DeleteProduct ##

union DeleteProductResult =
    DeleteProductResultSuccess
  | DeleteProductResultError

type DeleteProductResultSuccess implements ResultBase {
  ok: Boolean!
}

type DeleteProductResultError implements ResultBase {
  ok: Boolean!
  error: DeleteProductResultErrors!
}

union DeleteProductResultErrors = DeleteProductResultValidationFailed

type DeleteProductResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## CreateYahooAuctionCrawlSettingExcludeKeyword ##

input CreateYahooAuctionCrawlSettingExcludeKeywordInput {
  productId: ID!
  keyword: String
}

union CreateYahooAuctionCrawlSettingExcludeKeywordResult =
    CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess
  | CreateYahooAuctionCrawlSettingExcludeKeywordResultError

type CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess implements ResultBase {
  ok: Boolean!
  yahooAuctionCrawlSettingExcludeKeyword: YahooAuctionCrawlSettingExcludeKeyword!
}

type CreateYahooAuctionCrawlSettingExcludeKeywordResultError implements ResultBase {
  ok: Boolean!
  error: CreateYahooAuctionCrawlSettingExcludeKeywordResultErrors!
}

union CreateYahooAuctionCrawlSettingExcludeKeywordResultErrors =
    CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed

type CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## UpdateYahooAuctionCrawlSettingExcludeKeyword ##

input UpdateYahooAuctionCrawlSettingExcludeKeywordInput {
  id: ID!
  productId: ID!
  keyword: String
}

union UpdateYahooAuctionCrawlSettingExcludeKeywordResult =
    UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess
  | UpdateYahooAuctionCrawlSettingExcludeKeywordResultError

type UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess implements ResultBase {
  ok: Boolean!
  yahooAuctionCrawlSettingExcludeKeyword: YahooAuctionCrawlSettingExcludeKeyword!
}

type UpdateYahooAuctionCrawlSettingExcludeKeywordResultError implements ResultBase {
  ok: Boolean!
  error: UpdateYahooAuctionCrawlSettingExcludeKeywordResultErrors!
}

union UpdateYahooAuctionCrawlSettingExcludeKeywordResultErrors =
    UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed

type UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## DeleteYahooAuctionCrawlSettingExcludeKeyword ##

union DeleteYahooAuctionCrawlSettingExcludeKeywordResult =
    DeleteYahooAuctionCrawlSettingExcludeKeywordResultSuccess
  | DeleteYahooAuctionCrawlSettingExcludeKeywordResultError

type DeleteYahooAuctionCrawlSettingExcludeKeywordResultSuccess implements ResultBase {
  ok: Boolean!
}

type DeleteYahooAuctionCrawlSettingExcludeKeywordResultError implements ResultBase {
  ok: Boolean!
  error: DeleteYahooAuctionCrawlSettingExcludeKeywordResultErrors!
}

union DeleteYahooAuctionCrawlSettingExcludeKeywordResultErrors =
    DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed

type DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## CreateYahooAuctionCrawlSettingRequiredKeyword ##

input CreateYahooAuctionCrawlSettingRequiredKeywordInput {
  productId: ID!
  keyword: String
}

union CreateYahooAuctionCrawlSettingRequiredKeywordResult =
    CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess
  | CreateYahooAuctionCrawlSettingRequiredKeywordResultError

type CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess implements ResultBase {
  ok: Boolean!
  yahooAuctionCrawlSettingRequiredKeyword: YahooAuctionCrawlSettingRequiredKeyword!
}

type CreateYahooAuctionCrawlSettingRequiredKeywordResultError implements ResultBase {
  ok: Boolean!
  error: CreateYahooAuctionCrawlSettingRequiredKeywordResultErrors!
}

union CreateYahooAuctionCrawlSettingRequiredKeywordResultErrors =
    CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed

type CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## UpdateYahooAuctionCrawlSettingRequiredKeyword ##

input UpdateYahooAuctionCrawlSettingRequiredKeywordInput {
  id: ID!
  productId: ID!
  keyword: String
}

union UpdateYahooAuctionCrawlSettingRequiredKeywordResult =
    UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess
  | UpdateYahooAuctionCrawlSettingRequiredKeywordResultError

type UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess implements ResultBase {
  ok: Boolean!
  yahooAuctionCrawlSettingRequiredKeyword: YahooAuctionCrawlSettingRequiredKeyword!
}

type UpdateYahooAuctionCrawlSettingRequiredKeywordResultError implements ResultBase {
  ok: Boolean!
  error: UpdateYahooAuctionCrawlSettingRequiredKeywordResultErrors!
}

union UpdateYahooAuctionCrawlSettingRequiredKeywordResultErrors =
    UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed

type UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## DeleteYahooAuctionCrawlSettingRequiredKeyword ##

union DeleteYahooAuctionCrawlSettingRequiredKeywordResult =
    DeleteYahooAuctionCrawlSettingRequiredKeywordResultSuccess
  | DeleteYahooAuctionCrawlSettingRequiredKeywordResultError

type DeleteYahooAuctionCrawlSettingRequiredKeywordResultSuccess implements ResultBase {
  ok: Boolean!
}

type DeleteYahooAuctionCrawlSettingRequiredKeywordResultError implements ResultBase {
  ok: Boolean!
  error: DeleteYahooAuctionCrawlSettingRequiredKeywordResultErrors!
}

union DeleteYahooAuctionCrawlSettingRequiredKeywordResultErrors =
    DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed

type DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## CreateMercariCrawlSettingExcludeKeyword ##

input CreateMercariCrawlSettingExcludeKeywordInput {
  productId: ID!
  keyword: String
}

union CreateMercariCrawlSettingExcludeKeywordResult =
    CreateMercariCrawlSettingExcludeKeywordResultSuccess
  | CreateMercariCrawlSettingExcludeKeywordResultError

type CreateMercariCrawlSettingExcludeKeywordResultSuccess implements ResultBase {
  ok: Boolean!
  mercariCrawlSettingExcludeKeyword: MercariCrawlSettingExcludeKeyword!
}

type CreateMercariCrawlSettingExcludeKeywordResultError implements ResultBase {
  ok: Boolean!
  error: CreateMercariCrawlSettingExcludeKeywordResultErrors!
}

union CreateMercariCrawlSettingExcludeKeywordResultErrors =
    CreateMercariCrawlSettingExcludeKeywordResultValidationFailed

type CreateMercariCrawlSettingExcludeKeywordResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## UpdateMercariCrawlSettingExcludeKeyword ##

input UpdateMercariCrawlSettingExcludeKeywordInput {
  id: ID!
  productId: ID!
  keyword: String
}

union UpdateMercariCrawlSettingExcludeKeywordResult =
    UpdateMercariCrawlSettingExcludeKeywordResultSuccess
  | UpdateMercariCrawlSettingExcludeKeywordResultError

type UpdateMercariCrawlSettingExcludeKeywordResultSuccess implements ResultBase {
  ok: Boolean!
  mercariCrawlSettingExcludeKeyword: MercariCrawlSettingExcludeKeyword!
}

type UpdateMercariCrawlSettingExcludeKeywordResultError implements ResultBase {
  ok: Boolean!
  error: UpdateMercariCrawlSettingExcludeKeywordResultErrors!
}

union UpdateMercariCrawlSettingExcludeKeywordResultErrors =
    UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed

type UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## DeleteMercariCrawlSettingExcludeKeyword ##

union DeleteMercariCrawlSettingExcludeKeywordResult =
    DeleteMercariCrawlSettingExcludeKeywordResultSuccess
  | DeleteMercariCrawlSettingExcludeKeywordResultError

type DeleteMercariCrawlSettingExcludeKeywordResultSuccess implements ResultBase {
  ok: Boolean!
}

type DeleteMercariCrawlSettingExcludeKeywordResultError implements ResultBase {
  ok: Boolean!
  error: DeleteMercariCrawlSettingExcludeKeywordResultErrors!
}

union DeleteMercariCrawlSettingExcludeKeywordResultErrors =
    DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed

type DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}


## CreateMercariCrawlSettingRequiredKeyword ##

input CreateMercariCrawlSettingRequiredKeywordInput {
  productId: ID!
  keyword: String
}

union CreateMercariCrawlSettingRequiredKeywordResult =
    CreateMercariCrawlSettingRequiredKeywordResultSuccess
  | CreateMercariCrawlSettingRequiredKeywordResultError

type CreateMercariCrawlSettingRequiredKeywordResultSuccess implements ResultBase {
  ok: Boolean!
  mercariCrawlSettingRequiredKeyword: MercariCrawlSettingRequiredKeyword!
}

type CreateMercariCrawlSettingRequiredKeywordResultError implements ResultBase {
  ok: Boolean!
  error: CreateMercariCrawlSettingRequiredKeywordResultErrors!
}

union CreateMercariCrawlSettingRequiredKeywordResultErrors =
    CreateMercariCrawlSettingRequiredKeywordResultValidationFailed

type CreateMercariCrawlSettingRequiredKeywordResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## UpdateMercariCrawlSettingRequiredKeyword ##

input UpdateMercariCrawlSettingRequiredKeywordInput {
  id: ID!
  productId: ID!
  keyword: String
}

union UpdateMercariCrawlSettingRequiredKeywordResult =
    UpdateMercariCrawlSettingRequiredKeywordResultSuccess
  | UpdateMercariCrawlSettingRequiredKeywordResultError

type UpdateMercariCrawlSettingRequiredKeywordResultSuccess implements ResultBase {
  ok: Boolean!
  mercariCrawlSettingRequiredKeyword: MercariCrawlSettingRequiredKeyword!
}

type UpdateMercariCrawlSettingRequiredKeywordResultError implements ResultBase {
  ok: Boolean!
  error: UpdateMercariCrawlSettingRequiredKeywordResultErrors!
}

union UpdateMercariCrawlSettingRequiredKeywordResultErrors =
    UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed

type UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}

## DeleteMercariCrawlSettingRequiredKeyword ##

union DeleteMercariCrawlSettingRequiredKeywordResult =
    DeleteMercariCrawlSettingRequiredKeywordResultSuccess
  | DeleteMercariCrawlSettingRequiredKeywordResultError

type DeleteMercariCrawlSettingRequiredKeywordResultSuccess implements ResultBase {
  ok: Boolean!
}

type DeleteMercariCrawlSettingRequiredKeywordResultError implements ResultBase {
  ok: Boolean!
  error: DeleteMercariCrawlSettingRequiredKeywordResultErrors!
}

union DeleteMercariCrawlSettingRequiredKeywordResultErrors =
    DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed

type DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed implements UserError {
  code: String!
  message: String!
  details: [ErrorDetail!]!
}
`, BuiltIn: false},
	{Name: "../graph/product.graphqls", Input: `type Product implements Node {
  id: ID!
  name: String!
  yahooAuctionProducts(
    published: Boolean
    sort: String
    order: String
  ): [YahooAuctionProduct!]!
  yahooAuctionCrawlSetting: YahooAuctionCrawlSetting!
  yahooAuctionDailyPurchaseSummaries: [YahooAuctionDailyPurchaseSummary!]!
  mercariProducts(
    published: Boolean
    sort: String
    order: String
  ): [MercariProduct!]!
  mercariCrawlSetting: MercariCrawlSetting!
  mercariDailyPurchaseSummaries: [MercariDailyPurchaseSummary!]!
  relatedProducts(
    published: Boolean
    page: Int
    per: Int
    sort: String
    order: String
  ): [RelatedProduct!]!
}

type YahooAuctionProduct implements Node {
  id: ID!
  productId: Int!
  yahooAuctionId: String!
  name: String!
  thumbnailUrl: String!
  price: Int!
  published: Boolean!
  boughtDate: String
  createdAt: String!
  updatedAt: String!
}

type YahooAuctionCrawlSetting implements Node {
  id: ID!
  productId: Int!
  keyword: String!
  minPrice: Int!
  maxPrice: Int!
  categoryId: Int
  enabled: Boolean!
  createdAt: String!
  updatedAt: String!
  yahooAuctionCrawlSettingExcludeKeywords: [YahooAuctionCrawlSettingExcludeKeyword!]!
  yahooAuctionCrawlSettingRequiredKeywords: [YahooAuctionCrawlSettingRequiredKeyword!]!
}

type YahooAuctionCrawlSettingExcludeKeyword implements Node {
  id: ID!
  yahooAuctionCrawlSettingId: Int!
  keyword: String
  createdAt: String!
  updatedAt: String!
}

type YahooAuctionCrawlSettingRequiredKeyword implements Node {
  id: ID!
  yahooAuctionCrawlSettingId: Int!
  keyword: String
  createdAt: String!
  updatedAt: String!
}

type YahooAuctionDailyPurchaseSummary implements Node {
  id: ID!
  productId: Int!
  averagePurchasePrice: Int
  purchaseCount: Int!
  date: String!
  createdAt: String!
  updatedAt: String!
}

type MercariDailyPurchaseSummary implements Node {
  id: ID!
  productId: Int!
  averagePurchasePrice: Int
  purchaseCount: Int!
  date: String!
  createdAt: String!
  updatedAt: String!
}

type MercariProduct implements Node {
  id: ID!
  productId: Int!
  mercariId: String!
  name: String!
  thumbnailUrl: String!
  price: Int!
  published: Boolean!
  boughtDate: String
  createdAt: String!
  updatedAt: String!
}

type MercariCrawlSetting implements Node {
  id: ID!
  productId: Int!
  keyword: String!
  minPrice: Int!
  maxPrice: Int!
  categoryId: Int
  enabled: Boolean!
  createdAt: String!
  updatedAt: String!
  mercariCrawlSettingExcludeKeywords: [MercariCrawlSettingExcludeKeyword!]!
  mercariCrawlSettingRequiredKeywords: [MercariCrawlSettingRequiredKeyword!]!
}

type MercariCrawlSettingExcludeKeyword implements Node {
  id: ID!
  mercariCrawlSettingId: Int!
  keyword: String
  createdAt: String!
  updatedAt: String!
}

type MercariCrawlSettingRequiredKeyword implements Node {
  id: ID!
  mercariCrawlSettingId: Int!
  keyword: String
  createdAt: String!
  updatedAt: String!
}

type RelatedProduct {
  relatedType: String!
  productId: Int!
  externalId: String!
  name: String!
  thumbnailUrl: String!
  price: Int!
  published: Boolean!
  boughtDate: String
  createdAt: String!
  updatedAt: String!
}
`, BuiltIn: false},
	{Name: "../graph/query.graphqls", Input: `type Query {
  product(id: ID!): Product!
  products(id: ID, name: String): [Product!]!
  node(id: ID!): Node
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_createMercariCrawlSettingExcludeKeyword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateMercariCrawlSettingExcludeKeywordInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateMercariCrawlSettingExcludeKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateMercariCrawlSettingExcludeKeywordInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createMercariCrawlSettingRequiredKeyword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateMercariCrawlSettingRequiredKeywordInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateMercariCrawlSettingRequiredKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateMercariCrawlSettingRequiredKeywordInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createProduct_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateProductInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateProductInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateProductInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createYahooAuctionCrawlSettingExcludeKeyword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateYahooAuctionCrawlSettingExcludeKeywordInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateYahooAuctionCrawlSettingExcludeKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateYahooAuctionCrawlSettingExcludeKeywordInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createYahooAuctionCrawlSettingRequiredKeyword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateYahooAuctionCrawlSettingRequiredKeywordInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateYahooAuctionCrawlSettingRequiredKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateYahooAuctionCrawlSettingRequiredKeywordInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteMercariCrawlSettingExcludeKeyword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["productId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["productId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteMercariCrawlSettingRequiredKeyword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["productId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["productId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteProduct_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteYahooAuctionCrawlSettingExcludeKeyword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["productId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["productId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteYahooAuctionCrawlSettingRequiredKeyword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["productId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["productId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateMercariCrawlSettingExcludeKeyword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateMercariCrawlSettingExcludeKeywordInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateMercariCrawlSettingExcludeKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateMercariCrawlSettingExcludeKeywordInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateMercariCrawlSettingRequiredKeyword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateMercariCrawlSettingRequiredKeywordInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateMercariCrawlSettingRequiredKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateMercariCrawlSettingRequiredKeywordInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateProduct_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.UpdateProductInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateProductInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateProductInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateYahooAuctionCrawlSettingExcludeKeyword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateYahooAuctionCrawlSettingExcludeKeywordInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateYahooAuctionCrawlSettingExcludeKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateYahooAuctionCrawlSettingExcludeKeywordInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateYahooAuctionCrawlSettingRequiredKeyword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateYahooAuctionCrawlSettingRequiredKeywordInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateYahooAuctionCrawlSettingRequiredKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateYahooAuctionCrawlSettingRequiredKeywordInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Product_mercariProducts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *bool
	if tmp, ok := rawArgs["published"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published"))
		arg0, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["published"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg2
	return args, nil
}

func (ec *executionContext) field_Product_relatedProducts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *bool
	if tmp, ok := rawArgs["published"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published"))
		arg0, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["published"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["per"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("per"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["per"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg4
	return args, nil
}

func (ec *executionContext) field_Product_yahooAuctionProducts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *bool
	if tmp, ok := rawArgs["published"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("published"))
		arg0, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["published"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_node_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_product_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_products_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg1
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _CreateMercariCrawlSettingExcludeKeywordResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.CreateMercariCrawlSettingExcludeKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateMercariCrawlSettingExcludeKeywordResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateMercariCrawlSettingExcludeKeywordResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateMercariCrawlSettingExcludeKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateMercariCrawlSettingExcludeKeywordResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.CreateMercariCrawlSettingExcludeKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateMercariCrawlSettingExcludeKeywordResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CreateMercariCrawlSettingExcludeKeywordResultErrors)
	fc.Result = res
	return ec.marshalNCreateMercariCrawlSettingExcludeKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateMercariCrawlSettingExcludeKeywordResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateMercariCrawlSettingExcludeKeywordResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateMercariCrawlSettingExcludeKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CreateMercariCrawlSettingExcludeKeywordResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateMercariCrawlSettingExcludeKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.CreateMercariCrawlSettingExcludeKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateMercariCrawlSettingExcludeKeywordResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateMercariCrawlSettingExcludeKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateMercariCrawlSettingExcludeKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateMercariCrawlSettingExcludeKeywordResultSuccess_mercariCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField, obj *model.CreateMercariCrawlSettingExcludeKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateMercariCrawlSettingExcludeKeywordResultSuccess_mercariCrawlSettingExcludeKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MercariCrawlSettingExcludeKeyword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MercariCrawlSettingExcludeKeyword)
	fc.Result = res
	return ec.marshalNMercariCrawlSettingExcludeKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariCrawlSettingExcludeKeyword(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateMercariCrawlSettingExcludeKeywordResultSuccess_mercariCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateMercariCrawlSettingExcludeKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MercariCrawlSettingExcludeKeyword_id(ctx, field)
			case "mercariCrawlSettingId":
				return ec.fieldContext_MercariCrawlSettingExcludeKeyword_mercariCrawlSettingId(ctx, field)
			case "keyword":
				return ec.fieldContext_MercariCrawlSettingExcludeKeyword_keyword(ctx, field)
			case "createdAt":
				return ec.fieldContext_MercariCrawlSettingExcludeKeyword_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MercariCrawlSettingExcludeKeyword_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MercariCrawlSettingExcludeKeyword", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateMercariCrawlSettingExcludeKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.CreateMercariCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateMercariCrawlSettingExcludeKeywordResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateMercariCrawlSettingExcludeKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateMercariCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateMercariCrawlSettingExcludeKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.CreateMercariCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateMercariCrawlSettingExcludeKeywordResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateMercariCrawlSettingExcludeKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateMercariCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateMercariCrawlSettingExcludeKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.CreateMercariCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateMercariCrawlSettingExcludeKeywordResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateMercariCrawlSettingExcludeKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateMercariCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateMercariCrawlSettingRequiredKeywordResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.CreateMercariCrawlSettingRequiredKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateMercariCrawlSettingRequiredKeywordResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateMercariCrawlSettingRequiredKeywordResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateMercariCrawlSettingRequiredKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateMercariCrawlSettingRequiredKeywordResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.CreateMercariCrawlSettingRequiredKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateMercariCrawlSettingRequiredKeywordResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CreateMercariCrawlSettingRequiredKeywordResultErrors)
	fc.Result = res
	return ec.marshalNCreateMercariCrawlSettingRequiredKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateMercariCrawlSettingRequiredKeywordResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateMercariCrawlSettingRequiredKeywordResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateMercariCrawlSettingRequiredKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CreateMercariCrawlSettingRequiredKeywordResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateMercariCrawlSettingRequiredKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.CreateMercariCrawlSettingRequiredKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateMercariCrawlSettingRequiredKeywordResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateMercariCrawlSettingRequiredKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateMercariCrawlSettingRequiredKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateMercariCrawlSettingRequiredKeywordResultSuccess_mercariCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField, obj *model.CreateMercariCrawlSettingRequiredKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateMercariCrawlSettingRequiredKeywordResultSuccess_mercariCrawlSettingRequiredKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MercariCrawlSettingRequiredKeyword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MercariCrawlSettingRequiredKeyword)
	fc.Result = res
	return ec.marshalNMercariCrawlSettingRequiredKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariCrawlSettingRequiredKeyword(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateMercariCrawlSettingRequiredKeywordResultSuccess_mercariCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateMercariCrawlSettingRequiredKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MercariCrawlSettingRequiredKeyword_id(ctx, field)
			case "mercariCrawlSettingId":
				return ec.fieldContext_MercariCrawlSettingRequiredKeyword_mercariCrawlSettingId(ctx, field)
			case "keyword":
				return ec.fieldContext_MercariCrawlSettingRequiredKeyword_keyword(ctx, field)
			case "createdAt":
				return ec.fieldContext_MercariCrawlSettingRequiredKeyword_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MercariCrawlSettingRequiredKeyword_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MercariCrawlSettingRequiredKeyword", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateMercariCrawlSettingRequiredKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.CreateMercariCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateMercariCrawlSettingRequiredKeywordResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateMercariCrawlSettingRequiredKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateMercariCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateMercariCrawlSettingRequiredKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.CreateMercariCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateMercariCrawlSettingRequiredKeywordResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateMercariCrawlSettingRequiredKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateMercariCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateMercariCrawlSettingRequiredKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.CreateMercariCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateMercariCrawlSettingRequiredKeywordResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateMercariCrawlSettingRequiredKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateMercariCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateProductResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.CreateProductResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateProductResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateProductResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateProductResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateProductResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.CreateProductResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateProductResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CreateProductResultErrors)
	fc.Result = res
	return ec.marshalNCreateProductResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateProductResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateProductResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateProductResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CreateProductResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateProductResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.CreateProductResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateProductResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateProductResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateProductResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateProductResultSuccess_product(ctx context.Context, field graphql.CollectedField, obj *model.CreateProductResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateProductResultSuccess_product(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Product, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Product)
	fc.Result = res
	return ec.marshalNProduct2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐProduct(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateProductResultSuccess_product(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateProductResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Product_id(ctx, field)
			case "name":
				return ec.fieldContext_Product_name(ctx, field)
			case "yahooAuctionProducts":
				return ec.fieldContext_Product_yahooAuctionProducts(ctx, field)
			case "yahooAuctionCrawlSetting":
				return ec.fieldContext_Product_yahooAuctionCrawlSetting(ctx, field)
			case "yahooAuctionDailyPurchaseSummaries":
				return ec.fieldContext_Product_yahooAuctionDailyPurchaseSummaries(ctx, field)
			case "mercariProducts":
				return ec.fieldContext_Product_mercariProducts(ctx, field)
			case "mercariCrawlSetting":
				return ec.fieldContext_Product_mercariCrawlSetting(ctx, field)
			case "mercariDailyPurchaseSummaries":
				return ec.fieldContext_Product_mercariDailyPurchaseSummaries(ctx, field)
			case "relatedProducts":
				return ec.fieldContext_Product_relatedProducts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Product", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateProductResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.CreateProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateProductResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateProductResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateProductResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.CreateProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateProductResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateProductResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateProductResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.CreateProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateProductResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateProductResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingExcludeKeywordResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.CreateYahooAuctionCrawlSettingExcludeKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateYahooAuctionCrawlSettingExcludeKeywordResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateYahooAuctionCrawlSettingExcludeKeywordResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateYahooAuctionCrawlSettingExcludeKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingExcludeKeywordResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.CreateYahooAuctionCrawlSettingExcludeKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateYahooAuctionCrawlSettingExcludeKeywordResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CreateYahooAuctionCrawlSettingExcludeKeywordResultErrors)
	fc.Result = res
	return ec.marshalNCreateYahooAuctionCrawlSettingExcludeKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateYahooAuctionCrawlSettingExcludeKeywordResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateYahooAuctionCrawlSettingExcludeKeywordResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateYahooAuctionCrawlSettingExcludeKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CreateYahooAuctionCrawlSettingExcludeKeywordResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess_yahooAuctionCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField, obj *model.CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess_yahooAuctionCrawlSettingExcludeKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YahooAuctionCrawlSettingExcludeKeyword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.YahooAuctionCrawlSettingExcludeKeyword)
	fc.Result = res
	return ec.marshalNYahooAuctionCrawlSettingExcludeKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionCrawlSettingExcludeKeyword(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess_yahooAuctionCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_YahooAuctionCrawlSettingExcludeKeyword_id(ctx, field)
			case "yahooAuctionCrawlSettingId":
				return ec.fieldContext_YahooAuctionCrawlSettingExcludeKeyword_yahooAuctionCrawlSettingId(ctx, field)
			case "keyword":
				return ec.fieldContext_YahooAuctionCrawlSettingExcludeKeyword_keyword(ctx, field)
			case "createdAt":
				return ec.fieldContext_YahooAuctionCrawlSettingExcludeKeyword_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_YahooAuctionCrawlSettingExcludeKeyword_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type YahooAuctionCrawlSettingExcludeKeyword", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingRequiredKeywordResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.CreateYahooAuctionCrawlSettingRequiredKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateYahooAuctionCrawlSettingRequiredKeywordResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateYahooAuctionCrawlSettingRequiredKeywordResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateYahooAuctionCrawlSettingRequiredKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingRequiredKeywordResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.CreateYahooAuctionCrawlSettingRequiredKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateYahooAuctionCrawlSettingRequiredKeywordResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CreateYahooAuctionCrawlSettingRequiredKeywordResultErrors)
	fc.Result = res
	return ec.marshalNCreateYahooAuctionCrawlSettingRequiredKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateYahooAuctionCrawlSettingRequiredKeywordResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateYahooAuctionCrawlSettingRequiredKeywordResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateYahooAuctionCrawlSettingRequiredKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CreateYahooAuctionCrawlSettingRequiredKeywordResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess_yahooAuctionCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField, obj *model.CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess_yahooAuctionCrawlSettingRequiredKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YahooAuctionCrawlSettingRequiredKeyword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.YahooAuctionCrawlSettingRequiredKeyword)
	fc.Result = res
	return ec.marshalNYahooAuctionCrawlSettingRequiredKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionCrawlSettingRequiredKeyword(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess_yahooAuctionCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_YahooAuctionCrawlSettingRequiredKeyword_id(ctx, field)
			case "yahooAuctionCrawlSettingId":
				return ec.fieldContext_YahooAuctionCrawlSettingRequiredKeyword_yahooAuctionCrawlSettingId(ctx, field)
			case "keyword":
				return ec.fieldContext_YahooAuctionCrawlSettingRequiredKeyword_keyword(ctx, field)
			case "createdAt":
				return ec.fieldContext_YahooAuctionCrawlSettingRequiredKeyword_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_YahooAuctionCrawlSettingRequiredKeyword_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type YahooAuctionCrawlSettingRequiredKeyword", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteMercariCrawlSettingExcludeKeywordResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.DeleteMercariCrawlSettingExcludeKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteMercariCrawlSettingExcludeKeywordResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteMercariCrawlSettingExcludeKeywordResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteMercariCrawlSettingExcludeKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteMercariCrawlSettingExcludeKeywordResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.DeleteMercariCrawlSettingExcludeKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteMercariCrawlSettingExcludeKeywordResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DeleteMercariCrawlSettingExcludeKeywordResultErrors)
	fc.Result = res
	return ec.marshalNDeleteMercariCrawlSettingExcludeKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteMercariCrawlSettingExcludeKeywordResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteMercariCrawlSettingExcludeKeywordResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteMercariCrawlSettingExcludeKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeleteMercariCrawlSettingExcludeKeywordResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteMercariCrawlSettingExcludeKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.DeleteMercariCrawlSettingExcludeKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteMercariCrawlSettingExcludeKeywordResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteMercariCrawlSettingExcludeKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteMercariCrawlSettingExcludeKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteMercariCrawlSettingRequiredKeywordResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.DeleteMercariCrawlSettingRequiredKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteMercariCrawlSettingRequiredKeywordResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteMercariCrawlSettingRequiredKeywordResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteMercariCrawlSettingRequiredKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteMercariCrawlSettingRequiredKeywordResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.DeleteMercariCrawlSettingRequiredKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteMercariCrawlSettingRequiredKeywordResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DeleteMercariCrawlSettingRequiredKeywordResultErrors)
	fc.Result = res
	return ec.marshalNDeleteMercariCrawlSettingRequiredKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteMercariCrawlSettingRequiredKeywordResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteMercariCrawlSettingRequiredKeywordResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteMercariCrawlSettingRequiredKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeleteMercariCrawlSettingRequiredKeywordResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteMercariCrawlSettingRequiredKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.DeleteMercariCrawlSettingRequiredKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteMercariCrawlSettingRequiredKeywordResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteMercariCrawlSettingRequiredKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteMercariCrawlSettingRequiredKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteProductResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.DeleteProductResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteProductResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteProductResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteProductResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteProductResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.DeleteProductResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteProductResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DeleteProductResultErrors)
	fc.Result = res
	return ec.marshalNDeleteProductResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteProductResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteProductResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteProductResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeleteProductResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteProductResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.DeleteProductResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteProductResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteProductResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteProductResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteProductResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.DeleteProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteProductResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteProductResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteProductResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.DeleteProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteProductResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteProductResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteProductResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.DeleteProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteProductResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteProductResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingExcludeKeywordResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.DeleteYahooAuctionCrawlSettingExcludeKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteYahooAuctionCrawlSettingExcludeKeywordResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteYahooAuctionCrawlSettingExcludeKeywordResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteYahooAuctionCrawlSettingExcludeKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingExcludeKeywordResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.DeleteYahooAuctionCrawlSettingExcludeKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteYahooAuctionCrawlSettingExcludeKeywordResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DeleteYahooAuctionCrawlSettingExcludeKeywordResultErrors)
	fc.Result = res
	return ec.marshalNDeleteYahooAuctionCrawlSettingExcludeKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteYahooAuctionCrawlSettingExcludeKeywordResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteYahooAuctionCrawlSettingExcludeKeywordResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteYahooAuctionCrawlSettingExcludeKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeleteYahooAuctionCrawlSettingExcludeKeywordResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingExcludeKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.DeleteYahooAuctionCrawlSettingExcludeKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteYahooAuctionCrawlSettingExcludeKeywordResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteYahooAuctionCrawlSettingExcludeKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteYahooAuctionCrawlSettingExcludeKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingRequiredKeywordResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.DeleteYahooAuctionCrawlSettingRequiredKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteYahooAuctionCrawlSettingRequiredKeywordResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteYahooAuctionCrawlSettingRequiredKeywordResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteYahooAuctionCrawlSettingRequiredKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingRequiredKeywordResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.DeleteYahooAuctionCrawlSettingRequiredKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteYahooAuctionCrawlSettingRequiredKeywordResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DeleteYahooAuctionCrawlSettingRequiredKeywordResultErrors)
	fc.Result = res
	return ec.marshalNDeleteYahooAuctionCrawlSettingRequiredKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteYahooAuctionCrawlSettingRequiredKeywordResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteYahooAuctionCrawlSettingRequiredKeywordResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteYahooAuctionCrawlSettingRequiredKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeleteYahooAuctionCrawlSettingRequiredKeywordResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingRequiredKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.DeleteYahooAuctionCrawlSettingRequiredKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteYahooAuctionCrawlSettingRequiredKeywordResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteYahooAuctionCrawlSettingRequiredKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteYahooAuctionCrawlSettingRequiredKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ErrorDetail_field(ctx context.Context, field graphql.CollectedField, obj *model.ErrorDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ErrorDetail_field(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Field, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ErrorDetail_field(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ErrorDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ErrorDetail_message(ctx context.Context, field graphql.CollectedField, obj *model.ErrorDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ErrorDetail_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ErrorDetail_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ErrorDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariCrawlSetting_id(ctx context.Context, field graphql.CollectedField, obj *model.MercariCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariCrawlSetting_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariCrawlSetting_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariCrawlSetting_productId(ctx context.Context, field graphql.CollectedField, obj *model.MercariCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariCrawlSetting_productId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariCrawlSetting_productId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariCrawlSetting_keyword(ctx context.Context, field graphql.CollectedField, obj *model.MercariCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariCrawlSetting_keyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Keyword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariCrawlSetting_keyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariCrawlSetting_minPrice(ctx context.Context, field graphql.CollectedField, obj *model.MercariCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariCrawlSetting_minPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariCrawlSetting_minPrice(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariCrawlSetting_maxPrice(ctx context.Context, field graphql.CollectedField, obj *model.MercariCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariCrawlSetting_maxPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariCrawlSetting_maxPrice(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariCrawlSetting_categoryId(ctx context.Context, field graphql.CollectedField, obj *model.MercariCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariCrawlSetting_categoryId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CategoryID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariCrawlSetting_categoryId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariCrawlSetting_enabled(ctx context.Context, field graphql.CollectedField, obj *model.MercariCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariCrawlSetting_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariCrawlSetting_enabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariCrawlSetting_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.MercariCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariCrawlSetting_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariCrawlSetting_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariCrawlSetting_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.MercariCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariCrawlSetting_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariCrawlSetting_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariCrawlSetting_mercariCrawlSettingExcludeKeywords(ctx context.Context, field graphql.CollectedField, obj *model.MercariCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariCrawlSetting_mercariCrawlSettingExcludeKeywords(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MercariCrawlSetting().MercariCrawlSettingExcludeKeywords(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.MercariCrawlSettingExcludeKeyword)
	fc.Result = res
	return ec.marshalNMercariCrawlSettingExcludeKeyword2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariCrawlSettingExcludeKeywordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariCrawlSetting_mercariCrawlSettingExcludeKeywords(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariCrawlSetting",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MercariCrawlSettingExcludeKeyword_id(ctx, field)
			case "mercariCrawlSettingId":
				return ec.fieldContext_MercariCrawlSettingExcludeKeyword_mercariCrawlSettingId(ctx, field)
			case "keyword":
				return ec.fieldContext_MercariCrawlSettingExcludeKeyword_keyword(ctx, field)
			case "createdAt":
				return ec.fieldContext_MercariCrawlSettingExcludeKeyword_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MercariCrawlSettingExcludeKeyword_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MercariCrawlSettingExcludeKeyword", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariCrawlSetting_mercariCrawlSettingRequiredKeywords(ctx context.Context, field graphql.CollectedField, obj *model.MercariCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariCrawlSetting_mercariCrawlSettingRequiredKeywords(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MercariCrawlSetting().MercariCrawlSettingRequiredKeywords(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.MercariCrawlSettingRequiredKeyword)
	fc.Result = res
	return ec.marshalNMercariCrawlSettingRequiredKeyword2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariCrawlSettingRequiredKeywordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariCrawlSetting_mercariCrawlSettingRequiredKeywords(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariCrawlSetting",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MercariCrawlSettingRequiredKeyword_id(ctx, field)
			case "mercariCrawlSettingId":
				return ec.fieldContext_MercariCrawlSettingRequiredKeyword_mercariCrawlSettingId(ctx, field)
			case "keyword":
				return ec.fieldContext_MercariCrawlSettingRequiredKeyword_keyword(ctx, field)
			case "createdAt":
				return ec.fieldContext_MercariCrawlSettingRequiredKeyword_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MercariCrawlSettingRequiredKeyword_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MercariCrawlSettingRequiredKeyword", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariCrawlSettingExcludeKeyword_id(ctx context.Context, field graphql.CollectedField, obj *model.MercariCrawlSettingExcludeKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariCrawlSettingExcludeKeyword_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariCrawlSettingExcludeKeyword_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariCrawlSettingExcludeKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariCrawlSettingExcludeKeyword_mercariCrawlSettingId(ctx context.Context, field graphql.CollectedField, obj *model.MercariCrawlSettingExcludeKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariCrawlSettingExcludeKeyword_mercariCrawlSettingId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MercariCrawlSettingID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariCrawlSettingExcludeKeyword_mercariCrawlSettingId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariCrawlSettingExcludeKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariCrawlSettingExcludeKeyword_keyword(ctx context.Context, field graphql.CollectedField, obj *model.MercariCrawlSettingExcludeKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariCrawlSettingExcludeKeyword_keyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Keyword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariCrawlSettingExcludeKeyword_keyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariCrawlSettingExcludeKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariCrawlSettingExcludeKeyword_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.MercariCrawlSettingExcludeKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariCrawlSettingExcludeKeyword_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariCrawlSettingExcludeKeyword_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariCrawlSettingExcludeKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariCrawlSettingExcludeKeyword_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.MercariCrawlSettingExcludeKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariCrawlSettingExcludeKeyword_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariCrawlSettingExcludeKeyword_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariCrawlSettingExcludeKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariCrawlSettingRequiredKeyword_id(ctx context.Context, field graphql.CollectedField, obj *model.MercariCrawlSettingRequiredKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariCrawlSettingRequiredKeyword_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariCrawlSettingRequiredKeyword_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariCrawlSettingRequiredKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariCrawlSettingRequiredKeyword_mercariCrawlSettingId(ctx context.Context, field graphql.CollectedField, obj *model.MercariCrawlSettingRequiredKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariCrawlSettingRequiredKeyword_mercariCrawlSettingId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MercariCrawlSettingID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariCrawlSettingRequiredKeyword_mercariCrawlSettingId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariCrawlSettingRequiredKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariCrawlSettingRequiredKeyword_keyword(ctx context.Context, field graphql.CollectedField, obj *model.MercariCrawlSettingRequiredKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariCrawlSettingRequiredKeyword_keyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Keyword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariCrawlSettingRequiredKeyword_keyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariCrawlSettingRequiredKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariCrawlSettingRequiredKeyword_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.MercariCrawlSettingRequiredKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariCrawlSettingRequiredKeyword_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariCrawlSettingRequiredKeyword_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariCrawlSettingRequiredKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariCrawlSettingRequiredKeyword_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.MercariCrawlSettingRequiredKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariCrawlSettingRequiredKeyword_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariCrawlSettingRequiredKeyword_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariCrawlSettingRequiredKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariDailyPurchaseSummary_id(ctx context.Context, field graphql.CollectedField, obj *model.MercariDailyPurchaseSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariDailyPurchaseSummary_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariDailyPurchaseSummary_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariDailyPurchaseSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariDailyPurchaseSummary_productId(ctx context.Context, field graphql.CollectedField, obj *model.MercariDailyPurchaseSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariDailyPurchaseSummary_productId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariDailyPurchaseSummary_productId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariDailyPurchaseSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariDailyPurchaseSummary_averagePurchasePrice(ctx context.Context, field graphql.CollectedField, obj *model.MercariDailyPurchaseSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariDailyPurchaseSummary_averagePurchasePrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AveragePurchasePrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariDailyPurchaseSummary_averagePurchasePrice(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariDailyPurchaseSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariDailyPurchaseSummary_purchaseCount(ctx context.Context, field graphql.CollectedField, obj *model.MercariDailyPurchaseSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariDailyPurchaseSummary_purchaseCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PurchaseCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariDailyPurchaseSummary_purchaseCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariDailyPurchaseSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariDailyPurchaseSummary_date(ctx context.Context, field graphql.CollectedField, obj *model.MercariDailyPurchaseSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariDailyPurchaseSummary_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariDailyPurchaseSummary_date(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariDailyPurchaseSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariDailyPurchaseSummary_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.MercariDailyPurchaseSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariDailyPurchaseSummary_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariDailyPurchaseSummary_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariDailyPurchaseSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariDailyPurchaseSummary_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.MercariDailyPurchaseSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariDailyPurchaseSummary_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariDailyPurchaseSummary_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariDailyPurchaseSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariProduct_id(ctx context.Context, field graphql.CollectedField, obj *model.MercariProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariProduct_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariProduct_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariProduct_productId(ctx context.Context, field graphql.CollectedField, obj *model.MercariProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariProduct_productId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariProduct_productId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariProduct_mercariId(ctx context.Context, field graphql.CollectedField, obj *model.MercariProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariProduct_mercariId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MercariID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariProduct_mercariId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariProduct_name(ctx context.Context, field graphql.CollectedField, obj *model.MercariProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariProduct_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariProduct_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariProduct_thumbnailUrl(ctx context.Context, field graphql.CollectedField, obj *model.MercariProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariProduct_thumbnailUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThumbnailURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariProduct_thumbnailUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariProduct_price(ctx context.Context, field graphql.CollectedField, obj *model.MercariProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariProduct_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariProduct_price(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariProduct_published(ctx context.Context, field graphql.CollectedField, obj *model.MercariProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariProduct_published(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Published, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariProduct_published(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariProduct_boughtDate(ctx context.Context, field graphql.CollectedField, obj *model.MercariProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariProduct_boughtDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BoughtDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariProduct_boughtDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariProduct_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.MercariProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariProduct_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariProduct_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MercariProduct_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.MercariProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MercariProduct_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MercariProduct_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MercariProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createProduct(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createProduct(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateProduct(rctx, fc.Args["input"].(model.CreateProductInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CreateProductResult)
	fc.Result = res
	return ec.marshalNCreateProductResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateProductResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createProduct(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CreateProductResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createProduct_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateProduct(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateProduct(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateProduct(rctx, fc.Args["id"].(string), fc.Args["input"].(model.UpdateProductInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.UpdateProductResult)
	fc.Result = res
	return ec.marshalNUpdateProductResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateProductResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateProduct(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UpdateProductResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateProduct_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteProduct(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteProduct(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteProduct(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DeleteProductResult)
	fc.Result = res
	return ec.marshalNDeleteProductResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteProductResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteProduct(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeleteProductResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteProduct_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createYahooAuctionCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createYahooAuctionCrawlSettingExcludeKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateYahooAuctionCrawlSettingExcludeKeyword(rctx, fc.Args["input"].(model.CreateYahooAuctionCrawlSettingExcludeKeywordInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CreateYahooAuctionCrawlSettingExcludeKeywordResult)
	fc.Result = res
	return ec.marshalNCreateYahooAuctionCrawlSettingExcludeKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateYahooAuctionCrawlSettingExcludeKeywordResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createYahooAuctionCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CreateYahooAuctionCrawlSettingExcludeKeywordResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createYahooAuctionCrawlSettingExcludeKeyword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateYahooAuctionCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateYahooAuctionCrawlSettingExcludeKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateYahooAuctionCrawlSettingExcludeKeyword(rctx, fc.Args["input"].(model.UpdateYahooAuctionCrawlSettingExcludeKeywordInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.UpdateYahooAuctionCrawlSettingExcludeKeywordResult)
	fc.Result = res
	return ec.marshalNUpdateYahooAuctionCrawlSettingExcludeKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateYahooAuctionCrawlSettingExcludeKeywordResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateYahooAuctionCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UpdateYahooAuctionCrawlSettingExcludeKeywordResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateYahooAuctionCrawlSettingExcludeKeyword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteYahooAuctionCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteYahooAuctionCrawlSettingExcludeKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteYahooAuctionCrawlSettingExcludeKeyword(rctx, fc.Args["id"].(string), fc.Args["productId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DeleteYahooAuctionCrawlSettingExcludeKeywordResult)
	fc.Result = res
	return ec.marshalNDeleteYahooAuctionCrawlSettingExcludeKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteYahooAuctionCrawlSettingExcludeKeywordResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteYahooAuctionCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeleteYahooAuctionCrawlSettingExcludeKeywordResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteYahooAuctionCrawlSettingExcludeKeyword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createYahooAuctionCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createYahooAuctionCrawlSettingRequiredKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateYahooAuctionCrawlSettingRequiredKeyword(rctx, fc.Args["input"].(model.CreateYahooAuctionCrawlSettingRequiredKeywordInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CreateYahooAuctionCrawlSettingRequiredKeywordResult)
	fc.Result = res
	return ec.marshalNCreateYahooAuctionCrawlSettingRequiredKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateYahooAuctionCrawlSettingRequiredKeywordResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createYahooAuctionCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CreateYahooAuctionCrawlSettingRequiredKeywordResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createYahooAuctionCrawlSettingRequiredKeyword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateYahooAuctionCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateYahooAuctionCrawlSettingRequiredKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateYahooAuctionCrawlSettingRequiredKeyword(rctx, fc.Args["input"].(model.UpdateYahooAuctionCrawlSettingRequiredKeywordInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.UpdateYahooAuctionCrawlSettingRequiredKeywordResult)
	fc.Result = res
	return ec.marshalNUpdateYahooAuctionCrawlSettingRequiredKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateYahooAuctionCrawlSettingRequiredKeywordResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateYahooAuctionCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UpdateYahooAuctionCrawlSettingRequiredKeywordResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateYahooAuctionCrawlSettingRequiredKeyword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteYahooAuctionCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteYahooAuctionCrawlSettingRequiredKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteYahooAuctionCrawlSettingRequiredKeyword(rctx, fc.Args["id"].(string), fc.Args["productId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DeleteYahooAuctionCrawlSettingRequiredKeywordResult)
	fc.Result = res
	return ec.marshalNDeleteYahooAuctionCrawlSettingRequiredKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteYahooAuctionCrawlSettingRequiredKeywordResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteYahooAuctionCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeleteYahooAuctionCrawlSettingRequiredKeywordResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteYahooAuctionCrawlSettingRequiredKeyword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createMercariCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createMercariCrawlSettingExcludeKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateMercariCrawlSettingExcludeKeyword(rctx, fc.Args["input"].(model.CreateMercariCrawlSettingExcludeKeywordInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CreateMercariCrawlSettingExcludeKeywordResult)
	fc.Result = res
	return ec.marshalNCreateMercariCrawlSettingExcludeKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateMercariCrawlSettingExcludeKeywordResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createMercariCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CreateMercariCrawlSettingExcludeKeywordResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createMercariCrawlSettingExcludeKeyword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateMercariCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateMercariCrawlSettingExcludeKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateMercariCrawlSettingExcludeKeyword(rctx, fc.Args["input"].(model.UpdateMercariCrawlSettingExcludeKeywordInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.UpdateMercariCrawlSettingExcludeKeywordResult)
	fc.Result = res
	return ec.marshalNUpdateMercariCrawlSettingExcludeKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateMercariCrawlSettingExcludeKeywordResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateMercariCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UpdateMercariCrawlSettingExcludeKeywordResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateMercariCrawlSettingExcludeKeyword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteMercariCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteMercariCrawlSettingExcludeKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteMercariCrawlSettingExcludeKeyword(rctx, fc.Args["id"].(string), fc.Args["productId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DeleteMercariCrawlSettingExcludeKeywordResult)
	fc.Result = res
	return ec.marshalNDeleteMercariCrawlSettingExcludeKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteMercariCrawlSettingExcludeKeywordResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteMercariCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeleteMercariCrawlSettingExcludeKeywordResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteMercariCrawlSettingExcludeKeyword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createMercariCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createMercariCrawlSettingRequiredKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateMercariCrawlSettingRequiredKeyword(rctx, fc.Args["input"].(model.CreateMercariCrawlSettingRequiredKeywordInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CreateMercariCrawlSettingRequiredKeywordResult)
	fc.Result = res
	return ec.marshalNCreateMercariCrawlSettingRequiredKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateMercariCrawlSettingRequiredKeywordResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createMercariCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CreateMercariCrawlSettingRequiredKeywordResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createMercariCrawlSettingRequiredKeyword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateMercariCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateMercariCrawlSettingRequiredKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateMercariCrawlSettingRequiredKeyword(rctx, fc.Args["input"].(model.UpdateMercariCrawlSettingRequiredKeywordInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.UpdateMercariCrawlSettingRequiredKeywordResult)
	fc.Result = res
	return ec.marshalNUpdateMercariCrawlSettingRequiredKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateMercariCrawlSettingRequiredKeywordResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateMercariCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UpdateMercariCrawlSettingRequiredKeywordResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateMercariCrawlSettingRequiredKeyword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteMercariCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteMercariCrawlSettingRequiredKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteMercariCrawlSettingRequiredKeyword(rctx, fc.Args["id"].(string), fc.Args["productId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DeleteMercariCrawlSettingRequiredKeywordResult)
	fc.Result = res
	return ec.marshalNDeleteMercariCrawlSettingRequiredKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteMercariCrawlSettingRequiredKeywordResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteMercariCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeleteMercariCrawlSettingRequiredKeywordResult does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteMercariCrawlSettingRequiredKeyword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Product_id(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_name(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_yahooAuctionProducts(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_yahooAuctionProducts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Product().YahooAuctionProducts(rctx, obj, fc.Args["published"].(*bool), fc.Args["sort"].(*string), fc.Args["order"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.YahooAuctionProduct)
	fc.Result = res
	return ec.marshalNYahooAuctionProduct2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionProductᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_yahooAuctionProducts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_YahooAuctionProduct_id(ctx, field)
			case "productId":
				return ec.fieldContext_YahooAuctionProduct_productId(ctx, field)
			case "yahooAuctionId":
				return ec.fieldContext_YahooAuctionProduct_yahooAuctionId(ctx, field)
			case "name":
				return ec.fieldContext_YahooAuctionProduct_name(ctx, field)
			case "thumbnailUrl":
				return ec.fieldContext_YahooAuctionProduct_thumbnailUrl(ctx, field)
			case "price":
				return ec.fieldContext_YahooAuctionProduct_price(ctx, field)
			case "published":
				return ec.fieldContext_YahooAuctionProduct_published(ctx, field)
			case "boughtDate":
				return ec.fieldContext_YahooAuctionProduct_boughtDate(ctx, field)
			case "createdAt":
				return ec.fieldContext_YahooAuctionProduct_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_YahooAuctionProduct_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type YahooAuctionProduct", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Product_yahooAuctionProducts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Product_yahooAuctionCrawlSetting(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_yahooAuctionCrawlSetting(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Product().YahooAuctionCrawlSetting(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.YahooAuctionCrawlSetting)
	fc.Result = res
	return ec.marshalNYahooAuctionCrawlSetting2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionCrawlSetting(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_yahooAuctionCrawlSetting(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_YahooAuctionCrawlSetting_id(ctx, field)
			case "productId":
				return ec.fieldContext_YahooAuctionCrawlSetting_productId(ctx, field)
			case "keyword":
				return ec.fieldContext_YahooAuctionCrawlSetting_keyword(ctx, field)
			case "minPrice":
				return ec.fieldContext_YahooAuctionCrawlSetting_minPrice(ctx, field)
			case "maxPrice":
				return ec.fieldContext_YahooAuctionCrawlSetting_maxPrice(ctx, field)
			case "categoryId":
				return ec.fieldContext_YahooAuctionCrawlSetting_categoryId(ctx, field)
			case "enabled":
				return ec.fieldContext_YahooAuctionCrawlSetting_enabled(ctx, field)
			case "createdAt":
				return ec.fieldContext_YahooAuctionCrawlSetting_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_YahooAuctionCrawlSetting_updatedAt(ctx, field)
			case "yahooAuctionCrawlSettingExcludeKeywords":
				return ec.fieldContext_YahooAuctionCrawlSetting_yahooAuctionCrawlSettingExcludeKeywords(ctx, field)
			case "yahooAuctionCrawlSettingRequiredKeywords":
				return ec.fieldContext_YahooAuctionCrawlSetting_yahooAuctionCrawlSettingRequiredKeywords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type YahooAuctionCrawlSetting", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_yahooAuctionDailyPurchaseSummaries(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_yahooAuctionDailyPurchaseSummaries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Product().YahooAuctionDailyPurchaseSummaries(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.YahooAuctionDailyPurchaseSummary)
	fc.Result = res
	return ec.marshalNYahooAuctionDailyPurchaseSummary2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionDailyPurchaseSummaryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_yahooAuctionDailyPurchaseSummaries(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_YahooAuctionDailyPurchaseSummary_id(ctx, field)
			case "productId":
				return ec.fieldContext_YahooAuctionDailyPurchaseSummary_productId(ctx, field)
			case "averagePurchasePrice":
				return ec.fieldContext_YahooAuctionDailyPurchaseSummary_averagePurchasePrice(ctx, field)
			case "purchaseCount":
				return ec.fieldContext_YahooAuctionDailyPurchaseSummary_purchaseCount(ctx, field)
			case "date":
				return ec.fieldContext_YahooAuctionDailyPurchaseSummary_date(ctx, field)
			case "createdAt":
				return ec.fieldContext_YahooAuctionDailyPurchaseSummary_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_YahooAuctionDailyPurchaseSummary_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type YahooAuctionDailyPurchaseSummary", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_mercariProducts(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_mercariProducts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Product().MercariProducts(rctx, obj, fc.Args["published"].(*bool), fc.Args["sort"].(*string), fc.Args["order"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.MercariProduct)
	fc.Result = res
	return ec.marshalNMercariProduct2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariProductᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_mercariProducts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MercariProduct_id(ctx, field)
			case "productId":
				return ec.fieldContext_MercariProduct_productId(ctx, field)
			case "mercariId":
				return ec.fieldContext_MercariProduct_mercariId(ctx, field)
			case "name":
				return ec.fieldContext_MercariProduct_name(ctx, field)
			case "thumbnailUrl":
				return ec.fieldContext_MercariProduct_thumbnailUrl(ctx, field)
			case "price":
				return ec.fieldContext_MercariProduct_price(ctx, field)
			case "published":
				return ec.fieldContext_MercariProduct_published(ctx, field)
			case "boughtDate":
				return ec.fieldContext_MercariProduct_boughtDate(ctx, field)
			case "createdAt":
				return ec.fieldContext_MercariProduct_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MercariProduct_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MercariProduct", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Product_mercariProducts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Product_mercariCrawlSetting(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_mercariCrawlSetting(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Product().MercariCrawlSetting(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MercariCrawlSetting)
	fc.Result = res
	return ec.marshalNMercariCrawlSetting2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariCrawlSetting(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_mercariCrawlSetting(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MercariCrawlSetting_id(ctx, field)
			case "productId":
				return ec.fieldContext_MercariCrawlSetting_productId(ctx, field)
			case "keyword":
				return ec.fieldContext_MercariCrawlSetting_keyword(ctx, field)
			case "minPrice":
				return ec.fieldContext_MercariCrawlSetting_minPrice(ctx, field)
			case "maxPrice":
				return ec.fieldContext_MercariCrawlSetting_maxPrice(ctx, field)
			case "categoryId":
				return ec.fieldContext_MercariCrawlSetting_categoryId(ctx, field)
			case "enabled":
				return ec.fieldContext_MercariCrawlSetting_enabled(ctx, field)
			case "createdAt":
				return ec.fieldContext_MercariCrawlSetting_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MercariCrawlSetting_updatedAt(ctx, field)
			case "mercariCrawlSettingExcludeKeywords":
				return ec.fieldContext_MercariCrawlSetting_mercariCrawlSettingExcludeKeywords(ctx, field)
			case "mercariCrawlSettingRequiredKeywords":
				return ec.fieldContext_MercariCrawlSetting_mercariCrawlSettingRequiredKeywords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MercariCrawlSetting", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_mercariDailyPurchaseSummaries(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_mercariDailyPurchaseSummaries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Product().MercariDailyPurchaseSummaries(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.MercariDailyPurchaseSummary)
	fc.Result = res
	return ec.marshalNMercariDailyPurchaseSummary2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariDailyPurchaseSummaryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_mercariDailyPurchaseSummaries(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MercariDailyPurchaseSummary_id(ctx, field)
			case "productId":
				return ec.fieldContext_MercariDailyPurchaseSummary_productId(ctx, field)
			case "averagePurchasePrice":
				return ec.fieldContext_MercariDailyPurchaseSummary_averagePurchasePrice(ctx, field)
			case "purchaseCount":
				return ec.fieldContext_MercariDailyPurchaseSummary_purchaseCount(ctx, field)
			case "date":
				return ec.fieldContext_MercariDailyPurchaseSummary_date(ctx, field)
			case "createdAt":
				return ec.fieldContext_MercariDailyPurchaseSummary_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MercariDailyPurchaseSummary_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MercariDailyPurchaseSummary", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Product_relatedProducts(ctx context.Context, field graphql.CollectedField, obj *model.Product) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Product_relatedProducts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Product().RelatedProducts(rctx, obj, fc.Args["published"].(*bool), fc.Args["page"].(*int), fc.Args["per"].(*int), fc.Args["sort"].(*string), fc.Args["order"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.RelatedProduct)
	fc.Result = res
	return ec.marshalNRelatedProduct2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐRelatedProductᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Product_relatedProducts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Product",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "relatedType":
				return ec.fieldContext_RelatedProduct_relatedType(ctx, field)
			case "productId":
				return ec.fieldContext_RelatedProduct_productId(ctx, field)
			case "externalId":
				return ec.fieldContext_RelatedProduct_externalId(ctx, field)
			case "name":
				return ec.fieldContext_RelatedProduct_name(ctx, field)
			case "thumbnailUrl":
				return ec.fieldContext_RelatedProduct_thumbnailUrl(ctx, field)
			case "price":
				return ec.fieldContext_RelatedProduct_price(ctx, field)
			case "published":
				return ec.fieldContext_RelatedProduct_published(ctx, field)
			case "boughtDate":
				return ec.fieldContext_RelatedProduct_boughtDate(ctx, field)
			case "createdAt":
				return ec.fieldContext_RelatedProduct_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_RelatedProduct_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RelatedProduct", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Product_relatedProducts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_product(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_product(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Product(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Product)
	fc.Result = res
	return ec.marshalNProduct2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐProduct(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_product(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Product_id(ctx, field)
			case "name":
				return ec.fieldContext_Product_name(ctx, field)
			case "yahooAuctionProducts":
				return ec.fieldContext_Product_yahooAuctionProducts(ctx, field)
			case "yahooAuctionCrawlSetting":
				return ec.fieldContext_Product_yahooAuctionCrawlSetting(ctx, field)
			case "yahooAuctionDailyPurchaseSummaries":
				return ec.fieldContext_Product_yahooAuctionDailyPurchaseSummaries(ctx, field)
			case "mercariProducts":
				return ec.fieldContext_Product_mercariProducts(ctx, field)
			case "mercariCrawlSetting":
				return ec.fieldContext_Product_mercariCrawlSetting(ctx, field)
			case "mercariDailyPurchaseSummaries":
				return ec.fieldContext_Product_mercariDailyPurchaseSummaries(ctx, field)
			case "relatedProducts":
				return ec.fieldContext_Product_relatedProducts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Product", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_product_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_products(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_products(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Products(rctx, fc.Args["id"].(*string), fc.Args["name"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Product)
	fc.Result = res
	return ec.marshalNProduct2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐProductᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_products(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Product_id(ctx, field)
			case "name":
				return ec.fieldContext_Product_name(ctx, field)
			case "yahooAuctionProducts":
				return ec.fieldContext_Product_yahooAuctionProducts(ctx, field)
			case "yahooAuctionCrawlSetting":
				return ec.fieldContext_Product_yahooAuctionCrawlSetting(ctx, field)
			case "yahooAuctionDailyPurchaseSummaries":
				return ec.fieldContext_Product_yahooAuctionDailyPurchaseSummaries(ctx, field)
			case "mercariProducts":
				return ec.fieldContext_Product_mercariProducts(ctx, field)
			case "mercariCrawlSetting":
				return ec.fieldContext_Product_mercariCrawlSetting(ctx, field)
			case "mercariDailyPurchaseSummaries":
				return ec.fieldContext_Product_mercariDailyPurchaseSummaries(ctx, field)
			case "relatedProducts":
				return ec.fieldContext_Product_relatedProducts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Product", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_products_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_node(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Node(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(model.Node)
	fc.Result = res
	return ec.marshalONode2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐNode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_node_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RelatedProduct_relatedType(ctx context.Context, field graphql.CollectedField, obj *model.RelatedProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RelatedProduct_relatedType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RelatedType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RelatedProduct_relatedType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RelatedProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RelatedProduct_productId(ctx context.Context, field graphql.CollectedField, obj *model.RelatedProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RelatedProduct_productId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RelatedProduct_productId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RelatedProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RelatedProduct_externalId(ctx context.Context, field graphql.CollectedField, obj *model.RelatedProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RelatedProduct_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RelatedProduct_externalId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RelatedProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RelatedProduct_name(ctx context.Context, field graphql.CollectedField, obj *model.RelatedProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RelatedProduct_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RelatedProduct_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RelatedProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RelatedProduct_thumbnailUrl(ctx context.Context, field graphql.CollectedField, obj *model.RelatedProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RelatedProduct_thumbnailUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThumbnailURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RelatedProduct_thumbnailUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RelatedProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RelatedProduct_price(ctx context.Context, field graphql.CollectedField, obj *model.RelatedProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RelatedProduct_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RelatedProduct_price(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RelatedProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RelatedProduct_published(ctx context.Context, field graphql.CollectedField, obj *model.RelatedProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RelatedProduct_published(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Published, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RelatedProduct_published(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RelatedProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RelatedProduct_boughtDate(ctx context.Context, field graphql.CollectedField, obj *model.RelatedProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RelatedProduct_boughtDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BoughtDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RelatedProduct_boughtDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RelatedProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RelatedProduct_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.RelatedProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RelatedProduct_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RelatedProduct_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RelatedProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RelatedProduct_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.RelatedProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RelatedProduct_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RelatedProduct_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RelatedProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateMercariCrawlSettingExcludeKeywordResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.UpdateMercariCrawlSettingExcludeKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateMercariCrawlSettingExcludeKeywordResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateMercariCrawlSettingExcludeKeywordResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateMercariCrawlSettingExcludeKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateMercariCrawlSettingExcludeKeywordResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.UpdateMercariCrawlSettingExcludeKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateMercariCrawlSettingExcludeKeywordResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.UpdateMercariCrawlSettingExcludeKeywordResultErrors)
	fc.Result = res
	return ec.marshalNUpdateMercariCrawlSettingExcludeKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateMercariCrawlSettingExcludeKeywordResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateMercariCrawlSettingExcludeKeywordResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateMercariCrawlSettingExcludeKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UpdateMercariCrawlSettingExcludeKeywordResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateMercariCrawlSettingExcludeKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.UpdateMercariCrawlSettingExcludeKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateMercariCrawlSettingExcludeKeywordResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateMercariCrawlSettingExcludeKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateMercariCrawlSettingExcludeKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateMercariCrawlSettingExcludeKeywordResultSuccess_mercariCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField, obj *model.UpdateMercariCrawlSettingExcludeKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateMercariCrawlSettingExcludeKeywordResultSuccess_mercariCrawlSettingExcludeKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MercariCrawlSettingExcludeKeyword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MercariCrawlSettingExcludeKeyword)
	fc.Result = res
	return ec.marshalNMercariCrawlSettingExcludeKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariCrawlSettingExcludeKeyword(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateMercariCrawlSettingExcludeKeywordResultSuccess_mercariCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateMercariCrawlSettingExcludeKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MercariCrawlSettingExcludeKeyword_id(ctx, field)
			case "mercariCrawlSettingId":
				return ec.fieldContext_MercariCrawlSettingExcludeKeyword_mercariCrawlSettingId(ctx, field)
			case "keyword":
				return ec.fieldContext_MercariCrawlSettingExcludeKeyword_keyword(ctx, field)
			case "createdAt":
				return ec.fieldContext_MercariCrawlSettingExcludeKeyword_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MercariCrawlSettingExcludeKeyword_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MercariCrawlSettingExcludeKeyword", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateMercariCrawlSettingRequiredKeywordResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.UpdateMercariCrawlSettingRequiredKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateMercariCrawlSettingRequiredKeywordResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateMercariCrawlSettingRequiredKeywordResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateMercariCrawlSettingRequiredKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateMercariCrawlSettingRequiredKeywordResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.UpdateMercariCrawlSettingRequiredKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateMercariCrawlSettingRequiredKeywordResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.UpdateMercariCrawlSettingRequiredKeywordResultErrors)
	fc.Result = res
	return ec.marshalNUpdateMercariCrawlSettingRequiredKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateMercariCrawlSettingRequiredKeywordResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateMercariCrawlSettingRequiredKeywordResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateMercariCrawlSettingRequiredKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UpdateMercariCrawlSettingRequiredKeywordResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateMercariCrawlSettingRequiredKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.UpdateMercariCrawlSettingRequiredKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateMercariCrawlSettingRequiredKeywordResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateMercariCrawlSettingRequiredKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateMercariCrawlSettingRequiredKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateMercariCrawlSettingRequiredKeywordResultSuccess_mercariCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField, obj *model.UpdateMercariCrawlSettingRequiredKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateMercariCrawlSettingRequiredKeywordResultSuccess_mercariCrawlSettingRequiredKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MercariCrawlSettingRequiredKeyword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MercariCrawlSettingRequiredKeyword)
	fc.Result = res
	return ec.marshalNMercariCrawlSettingRequiredKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariCrawlSettingRequiredKeyword(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateMercariCrawlSettingRequiredKeywordResultSuccess_mercariCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateMercariCrawlSettingRequiredKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MercariCrawlSettingRequiredKeyword_id(ctx, field)
			case "mercariCrawlSettingId":
				return ec.fieldContext_MercariCrawlSettingRequiredKeyword_mercariCrawlSettingId(ctx, field)
			case "keyword":
				return ec.fieldContext_MercariCrawlSettingRequiredKeyword_keyword(ctx, field)
			case "createdAt":
				return ec.fieldContext_MercariCrawlSettingRequiredKeyword_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MercariCrawlSettingRequiredKeyword_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MercariCrawlSettingRequiredKeyword", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateProductResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.UpdateProductResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateProductResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateProductResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateProductResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateProductResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.UpdateProductResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateProductResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.UpdateProductResultErrors)
	fc.Result = res
	return ec.marshalNUpdateProductResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateProductResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateProductResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateProductResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UpdateProductResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateProductResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.UpdateProductResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateProductResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateProductResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateProductResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateProductResultSuccess_product(ctx context.Context, field graphql.CollectedField, obj *model.UpdateProductResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateProductResultSuccess_product(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Product, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Product)
	fc.Result = res
	return ec.marshalNProduct2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐProduct(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateProductResultSuccess_product(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateProductResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Product_id(ctx, field)
			case "name":
				return ec.fieldContext_Product_name(ctx, field)
			case "yahooAuctionProducts":
				return ec.fieldContext_Product_yahooAuctionProducts(ctx, field)
			case "yahooAuctionCrawlSetting":
				return ec.fieldContext_Product_yahooAuctionCrawlSetting(ctx, field)
			case "yahooAuctionDailyPurchaseSummaries":
				return ec.fieldContext_Product_yahooAuctionDailyPurchaseSummaries(ctx, field)
			case "mercariProducts":
				return ec.fieldContext_Product_mercariProducts(ctx, field)
			case "mercariCrawlSetting":
				return ec.fieldContext_Product_mercariCrawlSetting(ctx, field)
			case "mercariDailyPurchaseSummaries":
				return ec.fieldContext_Product_mercariDailyPurchaseSummaries(ctx, field)
			case "relatedProducts":
				return ec.fieldContext_Product_relatedProducts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Product", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateProductResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.UpdateProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateProductResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateProductResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateProductResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.UpdateProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateProductResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateProductResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateProductResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.UpdateProductResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateProductResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateProductResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateProductResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingExcludeKeywordResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.UpdateYahooAuctionCrawlSettingExcludeKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateYahooAuctionCrawlSettingExcludeKeywordResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateYahooAuctionCrawlSettingExcludeKeywordResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateYahooAuctionCrawlSettingExcludeKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingExcludeKeywordResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.UpdateYahooAuctionCrawlSettingExcludeKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateYahooAuctionCrawlSettingExcludeKeywordResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.UpdateYahooAuctionCrawlSettingExcludeKeywordResultErrors)
	fc.Result = res
	return ec.marshalNUpdateYahooAuctionCrawlSettingExcludeKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateYahooAuctionCrawlSettingExcludeKeywordResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateYahooAuctionCrawlSettingExcludeKeywordResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateYahooAuctionCrawlSettingExcludeKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UpdateYahooAuctionCrawlSettingExcludeKeywordResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess_yahooAuctionCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField, obj *model.UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess_yahooAuctionCrawlSettingExcludeKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YahooAuctionCrawlSettingExcludeKeyword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.YahooAuctionCrawlSettingExcludeKeyword)
	fc.Result = res
	return ec.marshalNYahooAuctionCrawlSettingExcludeKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionCrawlSettingExcludeKeyword(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess_yahooAuctionCrawlSettingExcludeKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_YahooAuctionCrawlSettingExcludeKeyword_id(ctx, field)
			case "yahooAuctionCrawlSettingId":
				return ec.fieldContext_YahooAuctionCrawlSettingExcludeKeyword_yahooAuctionCrawlSettingId(ctx, field)
			case "keyword":
				return ec.fieldContext_YahooAuctionCrawlSettingExcludeKeyword_keyword(ctx, field)
			case "createdAt":
				return ec.fieldContext_YahooAuctionCrawlSettingExcludeKeyword_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_YahooAuctionCrawlSettingExcludeKeyword_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type YahooAuctionCrawlSettingExcludeKeyword", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingRequiredKeywordResultError_ok(ctx context.Context, field graphql.CollectedField, obj *model.UpdateYahooAuctionCrawlSettingRequiredKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateYahooAuctionCrawlSettingRequiredKeywordResultError_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateYahooAuctionCrawlSettingRequiredKeywordResultError_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateYahooAuctionCrawlSettingRequiredKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingRequiredKeywordResultError_error(ctx context.Context, field graphql.CollectedField, obj *model.UpdateYahooAuctionCrawlSettingRequiredKeywordResultError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateYahooAuctionCrawlSettingRequiredKeywordResultError_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.UpdateYahooAuctionCrawlSettingRequiredKeywordResultErrors)
	fc.Result = res
	return ec.marshalNUpdateYahooAuctionCrawlSettingRequiredKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateYahooAuctionCrawlSettingRequiredKeywordResultErrors(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateYahooAuctionCrawlSettingRequiredKeywordResultError_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateYahooAuctionCrawlSettingRequiredKeywordResultError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UpdateYahooAuctionCrawlSettingRequiredKeywordResultErrors does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField, obj *model.UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess_yahooAuctionCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField, obj *model.UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess_yahooAuctionCrawlSettingRequiredKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YahooAuctionCrawlSettingRequiredKeyword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.YahooAuctionCrawlSettingRequiredKeyword)
	fc.Result = res
	return ec.marshalNYahooAuctionCrawlSettingRequiredKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionCrawlSettingRequiredKeyword(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess_yahooAuctionCrawlSettingRequiredKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_YahooAuctionCrawlSettingRequiredKeyword_id(ctx, field)
			case "yahooAuctionCrawlSettingId":
				return ec.fieldContext_YahooAuctionCrawlSettingRequiredKeyword_yahooAuctionCrawlSettingId(ctx, field)
			case "keyword":
				return ec.fieldContext_YahooAuctionCrawlSettingRequiredKeyword_keyword(ctx, field)
			case "createdAt":
				return ec.fieldContext_YahooAuctionCrawlSettingRequiredKeyword_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_YahooAuctionCrawlSettingRequiredKeyword_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type YahooAuctionCrawlSettingRequiredKeyword", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField, obj *model.UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField, obj *model.UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField, obj *model.UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ErrorDetail)
	fc.Result = res
	return ec.marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field":
				return ec.fieldContext_ErrorDetail_field(ctx, field)
			case "message":
				return ec.fieldContext_ErrorDetail_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ErrorDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionCrawlSetting_id(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionCrawlSetting_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionCrawlSetting_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionCrawlSetting_productId(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionCrawlSetting_productId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionCrawlSetting_productId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionCrawlSetting_keyword(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionCrawlSetting_keyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Keyword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionCrawlSetting_keyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionCrawlSetting_minPrice(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionCrawlSetting_minPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionCrawlSetting_minPrice(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionCrawlSetting_maxPrice(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionCrawlSetting_maxPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionCrawlSetting_maxPrice(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionCrawlSetting_categoryId(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionCrawlSetting_categoryId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CategoryID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionCrawlSetting_categoryId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionCrawlSetting_enabled(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionCrawlSetting_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionCrawlSetting_enabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionCrawlSetting_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionCrawlSetting_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionCrawlSetting_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionCrawlSetting_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionCrawlSetting_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionCrawlSetting_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionCrawlSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionCrawlSetting_yahooAuctionCrawlSettingExcludeKeywords(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionCrawlSetting_yahooAuctionCrawlSettingExcludeKeywords(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.YahooAuctionCrawlSetting().YahooAuctionCrawlSettingExcludeKeywords(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.YahooAuctionCrawlSettingExcludeKeyword)
	fc.Result = res
	return ec.marshalNYahooAuctionCrawlSettingExcludeKeyword2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionCrawlSettingExcludeKeywordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionCrawlSetting_yahooAuctionCrawlSettingExcludeKeywords(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionCrawlSetting",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_YahooAuctionCrawlSettingExcludeKeyword_id(ctx, field)
			case "yahooAuctionCrawlSettingId":
				return ec.fieldContext_YahooAuctionCrawlSettingExcludeKeyword_yahooAuctionCrawlSettingId(ctx, field)
			case "keyword":
				return ec.fieldContext_YahooAuctionCrawlSettingExcludeKeyword_keyword(ctx, field)
			case "createdAt":
				return ec.fieldContext_YahooAuctionCrawlSettingExcludeKeyword_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_YahooAuctionCrawlSettingExcludeKeyword_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type YahooAuctionCrawlSettingExcludeKeyword", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionCrawlSetting_yahooAuctionCrawlSettingRequiredKeywords(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionCrawlSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionCrawlSetting_yahooAuctionCrawlSettingRequiredKeywords(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.YahooAuctionCrawlSetting().YahooAuctionCrawlSettingRequiredKeywords(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.YahooAuctionCrawlSettingRequiredKeyword)
	fc.Result = res
	return ec.marshalNYahooAuctionCrawlSettingRequiredKeyword2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionCrawlSettingRequiredKeywordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionCrawlSetting_yahooAuctionCrawlSettingRequiredKeywords(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionCrawlSetting",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_YahooAuctionCrawlSettingRequiredKeyword_id(ctx, field)
			case "yahooAuctionCrawlSettingId":
				return ec.fieldContext_YahooAuctionCrawlSettingRequiredKeyword_yahooAuctionCrawlSettingId(ctx, field)
			case "keyword":
				return ec.fieldContext_YahooAuctionCrawlSettingRequiredKeyword_keyword(ctx, field)
			case "createdAt":
				return ec.fieldContext_YahooAuctionCrawlSettingRequiredKeyword_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_YahooAuctionCrawlSettingRequiredKeyword_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type YahooAuctionCrawlSettingRequiredKeyword", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionCrawlSettingExcludeKeyword_id(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionCrawlSettingExcludeKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionCrawlSettingExcludeKeyword_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionCrawlSettingExcludeKeyword_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionCrawlSettingExcludeKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionCrawlSettingExcludeKeyword_yahooAuctionCrawlSettingId(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionCrawlSettingExcludeKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionCrawlSettingExcludeKeyword_yahooAuctionCrawlSettingId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YahooAuctionCrawlSettingID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionCrawlSettingExcludeKeyword_yahooAuctionCrawlSettingId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionCrawlSettingExcludeKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionCrawlSettingExcludeKeyword_keyword(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionCrawlSettingExcludeKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionCrawlSettingExcludeKeyword_keyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Keyword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionCrawlSettingExcludeKeyword_keyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionCrawlSettingExcludeKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionCrawlSettingExcludeKeyword_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionCrawlSettingExcludeKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionCrawlSettingExcludeKeyword_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionCrawlSettingExcludeKeyword_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionCrawlSettingExcludeKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionCrawlSettingExcludeKeyword_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionCrawlSettingExcludeKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionCrawlSettingExcludeKeyword_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionCrawlSettingExcludeKeyword_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionCrawlSettingExcludeKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionCrawlSettingRequiredKeyword_id(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionCrawlSettingRequiredKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionCrawlSettingRequiredKeyword_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionCrawlSettingRequiredKeyword_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionCrawlSettingRequiredKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionCrawlSettingRequiredKeyword_yahooAuctionCrawlSettingId(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionCrawlSettingRequiredKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionCrawlSettingRequiredKeyword_yahooAuctionCrawlSettingId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YahooAuctionCrawlSettingID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionCrawlSettingRequiredKeyword_yahooAuctionCrawlSettingId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionCrawlSettingRequiredKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionCrawlSettingRequiredKeyword_keyword(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionCrawlSettingRequiredKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionCrawlSettingRequiredKeyword_keyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Keyword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionCrawlSettingRequiredKeyword_keyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionCrawlSettingRequiredKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionCrawlSettingRequiredKeyword_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionCrawlSettingRequiredKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionCrawlSettingRequiredKeyword_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionCrawlSettingRequiredKeyword_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionCrawlSettingRequiredKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionCrawlSettingRequiredKeyword_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionCrawlSettingRequiredKeyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionCrawlSettingRequiredKeyword_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionCrawlSettingRequiredKeyword_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionCrawlSettingRequiredKeyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionDailyPurchaseSummary_id(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionDailyPurchaseSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionDailyPurchaseSummary_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionDailyPurchaseSummary_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionDailyPurchaseSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionDailyPurchaseSummary_productId(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionDailyPurchaseSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionDailyPurchaseSummary_productId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionDailyPurchaseSummary_productId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionDailyPurchaseSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionDailyPurchaseSummary_averagePurchasePrice(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionDailyPurchaseSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionDailyPurchaseSummary_averagePurchasePrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AveragePurchasePrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionDailyPurchaseSummary_averagePurchasePrice(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionDailyPurchaseSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionDailyPurchaseSummary_purchaseCount(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionDailyPurchaseSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionDailyPurchaseSummary_purchaseCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PurchaseCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionDailyPurchaseSummary_purchaseCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionDailyPurchaseSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionDailyPurchaseSummary_date(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionDailyPurchaseSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionDailyPurchaseSummary_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionDailyPurchaseSummary_date(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionDailyPurchaseSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionDailyPurchaseSummary_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionDailyPurchaseSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionDailyPurchaseSummary_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionDailyPurchaseSummary_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionDailyPurchaseSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionDailyPurchaseSummary_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionDailyPurchaseSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionDailyPurchaseSummary_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionDailyPurchaseSummary_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionDailyPurchaseSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionProduct_id(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionProduct_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionProduct_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionProduct_productId(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionProduct_productId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionProduct_productId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionProduct_yahooAuctionId(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionProduct_yahooAuctionId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YahooAuctionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionProduct_yahooAuctionId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionProduct_name(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionProduct_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionProduct_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionProduct_thumbnailUrl(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionProduct_thumbnailUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThumbnailURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionProduct_thumbnailUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionProduct_price(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionProduct_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionProduct_price(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionProduct_published(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionProduct_published(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Published, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionProduct_published(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionProduct_boughtDate(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionProduct_boughtDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BoughtDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionProduct_boughtDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionProduct_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionProduct_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionProduct_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _YahooAuctionProduct_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.YahooAuctionProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_YahooAuctionProduct_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_YahooAuctionProduct_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "YahooAuctionProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputCreateMercariCrawlSettingExcludeKeywordInput(ctx context.Context, obj interface{}) (model.CreateMercariCrawlSettingExcludeKeywordInput, error) {
	var it model.CreateMercariCrawlSettingExcludeKeywordInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"productId", "keyword"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "productId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductID = data
		case "keyword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyword"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keyword = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateMercariCrawlSettingInput(ctx context.Context, obj interface{}) (model.CreateMercariCrawlSettingInput, error) {
	var it model.CreateMercariCrawlSettingInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"keyword", "category_id", "min_price", "max_price", "enabled"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "keyword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyword"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keyword = data
		case "category_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category_id"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CategoryID = data
		case "min_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min_price"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.MinPrice = data
		case "max_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max_price"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxPrice = data
		case "enabled":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateMercariCrawlSettingRequiredKeywordInput(ctx context.Context, obj interface{}) (model.CreateMercariCrawlSettingRequiredKeywordInput, error) {
	var it model.CreateMercariCrawlSettingRequiredKeywordInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"productId", "keyword"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "productId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductID = data
		case "keyword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyword"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keyword = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateProductInput(ctx context.Context, obj interface{}) (model.CreateProductInput, error) {
	var it model.CreateProductInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "yahoo_auction_crawl_setting", "mercari_crawl_setting"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "yahoo_auction_crawl_setting":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yahoo_auction_crawl_setting"))
			data, err := ec.unmarshalNCreateYahooAuctionCrawlSettingInput2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateYahooAuctionCrawlSettingInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.YahooAuctionCrawlSetting = data
		case "mercari_crawl_setting":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mercari_crawl_setting"))
			data, err := ec.unmarshalNCreateMercariCrawlSettingInput2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateMercariCrawlSettingInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.MercariCrawlSetting = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateYahooAuctionCrawlSettingExcludeKeywordInput(ctx context.Context, obj interface{}) (model.CreateYahooAuctionCrawlSettingExcludeKeywordInput, error) {
	var it model.CreateYahooAuctionCrawlSettingExcludeKeywordInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"productId", "keyword"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "productId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductID = data
		case "keyword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyword"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keyword = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateYahooAuctionCrawlSettingInput(ctx context.Context, obj interface{}) (model.CreateYahooAuctionCrawlSettingInput, error) {
	var it model.CreateYahooAuctionCrawlSettingInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"keyword", "category_id", "min_price", "max_price", "enabled"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "keyword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyword"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keyword = data
		case "category_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category_id"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CategoryID = data
		case "min_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min_price"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.MinPrice = data
		case "max_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max_price"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxPrice = data
		case "enabled":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateYahooAuctionCrawlSettingRequiredKeywordInput(ctx context.Context, obj interface{}) (model.CreateYahooAuctionCrawlSettingRequiredKeywordInput, error) {
	var it model.CreateYahooAuctionCrawlSettingRequiredKeywordInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"productId", "keyword"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "productId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductID = data
		case "keyword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyword"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keyword = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateMercariCrawlSettingExcludeKeywordInput(ctx context.Context, obj interface{}) (model.UpdateMercariCrawlSettingExcludeKeywordInput, error) {
	var it model.UpdateMercariCrawlSettingExcludeKeywordInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "productId", "keyword"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "productId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductID = data
		case "keyword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyword"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keyword = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateMercariCrawlSettingInput(ctx context.Context, obj interface{}) (model.UpdateMercariCrawlSettingInput, error) {
	var it model.UpdateMercariCrawlSettingInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"keyword", "category_id", "min_price", "max_price", "enabled"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "keyword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyword"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keyword = data
		case "category_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category_id"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CategoryID = data
		case "min_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min_price"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.MinPrice = data
		case "max_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max_price"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxPrice = data
		case "enabled":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateMercariCrawlSettingRequiredKeywordInput(ctx context.Context, obj interface{}) (model.UpdateMercariCrawlSettingRequiredKeywordInput, error) {
	var it model.UpdateMercariCrawlSettingRequiredKeywordInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "productId", "keyword"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "productId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductID = data
		case "keyword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyword"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keyword = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateProductInput(ctx context.Context, obj interface{}) (model.UpdateProductInput, error) {
	var it model.UpdateProductInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "yahoo_auction_crawl_setting", "mercari_crawl_setting"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "yahoo_auction_crawl_setting":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yahoo_auction_crawl_setting"))
			data, err := ec.unmarshalNUpdateYahooAuctionCrawlSettingInput2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateYahooAuctionCrawlSettingInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.YahooAuctionCrawlSetting = data
		case "mercari_crawl_setting":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mercari_crawl_setting"))
			data, err := ec.unmarshalNUpdateMercariCrawlSettingInput2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateMercariCrawlSettingInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.MercariCrawlSetting = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateYahooAuctionCrawlSettingExcludeKeywordInput(ctx context.Context, obj interface{}) (model.UpdateYahooAuctionCrawlSettingExcludeKeywordInput, error) {
	var it model.UpdateYahooAuctionCrawlSettingExcludeKeywordInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "productId", "keyword"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "productId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductID = data
		case "keyword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyword"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keyword = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateYahooAuctionCrawlSettingInput(ctx context.Context, obj interface{}) (model.UpdateYahooAuctionCrawlSettingInput, error) {
	var it model.UpdateYahooAuctionCrawlSettingInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"keyword", "category_id", "min_price", "max_price", "enabled"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "keyword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyword"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keyword = data
		case "category_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category_id"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.CategoryID = data
		case "min_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min_price"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.MinPrice = data
		case "max_price":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max_price"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxPrice = data
		case "enabled":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateYahooAuctionCrawlSettingRequiredKeywordInput(ctx context.Context, obj interface{}) (model.UpdateYahooAuctionCrawlSettingRequiredKeywordInput, error) {
	var it model.UpdateYahooAuctionCrawlSettingRequiredKeywordInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "productId", "keyword"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "productId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductID = data
		case "keyword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyword"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keyword = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _CreateMercariCrawlSettingExcludeKeywordResult(ctx context.Context, sel ast.SelectionSet, obj model.CreateMercariCrawlSettingExcludeKeywordResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CreateMercariCrawlSettingExcludeKeywordResultSuccess:
		return ec._CreateMercariCrawlSettingExcludeKeywordResultSuccess(ctx, sel, &obj)
	case *model.CreateMercariCrawlSettingExcludeKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateMercariCrawlSettingExcludeKeywordResultSuccess(ctx, sel, obj)
	case model.CreateMercariCrawlSettingExcludeKeywordResultError:
		return ec._CreateMercariCrawlSettingExcludeKeywordResultError(ctx, sel, &obj)
	case *model.CreateMercariCrawlSettingExcludeKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateMercariCrawlSettingExcludeKeywordResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _CreateMercariCrawlSettingExcludeKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.CreateMercariCrawlSettingExcludeKeywordResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CreateMercariCrawlSettingExcludeKeywordResultValidationFailed:
		return ec._CreateMercariCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.CreateMercariCrawlSettingExcludeKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateMercariCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _CreateMercariCrawlSettingRequiredKeywordResult(ctx context.Context, sel ast.SelectionSet, obj model.CreateMercariCrawlSettingRequiredKeywordResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CreateMercariCrawlSettingRequiredKeywordResultSuccess:
		return ec._CreateMercariCrawlSettingRequiredKeywordResultSuccess(ctx, sel, &obj)
	case *model.CreateMercariCrawlSettingRequiredKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateMercariCrawlSettingRequiredKeywordResultSuccess(ctx, sel, obj)
	case model.CreateMercariCrawlSettingRequiredKeywordResultError:
		return ec._CreateMercariCrawlSettingRequiredKeywordResultError(ctx, sel, &obj)
	case *model.CreateMercariCrawlSettingRequiredKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateMercariCrawlSettingRequiredKeywordResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _CreateMercariCrawlSettingRequiredKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.CreateMercariCrawlSettingRequiredKeywordResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CreateMercariCrawlSettingRequiredKeywordResultValidationFailed:
		return ec._CreateMercariCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.CreateMercariCrawlSettingRequiredKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateMercariCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _CreateProductResult(ctx context.Context, sel ast.SelectionSet, obj model.CreateProductResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CreateProductResultSuccess:
		return ec._CreateProductResultSuccess(ctx, sel, &obj)
	case *model.CreateProductResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateProductResultSuccess(ctx, sel, obj)
	case model.CreateProductResultError:
		return ec._CreateProductResultError(ctx, sel, &obj)
	case *model.CreateProductResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateProductResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _CreateProductResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.CreateProductResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CreateProductResultValidationFailed:
		return ec._CreateProductResultValidationFailed(ctx, sel, &obj)
	case *model.CreateProductResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateProductResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingExcludeKeywordResult(ctx context.Context, sel ast.SelectionSet, obj model.CreateYahooAuctionCrawlSettingExcludeKeywordResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess:
		return ec._CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess(ctx, sel, &obj)
	case *model.CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess(ctx, sel, obj)
	case model.CreateYahooAuctionCrawlSettingExcludeKeywordResultError:
		return ec._CreateYahooAuctionCrawlSettingExcludeKeywordResultError(ctx, sel, &obj)
	case *model.CreateYahooAuctionCrawlSettingExcludeKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateYahooAuctionCrawlSettingExcludeKeywordResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingExcludeKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.CreateYahooAuctionCrawlSettingExcludeKeywordResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed:
		return ec._CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingRequiredKeywordResult(ctx context.Context, sel ast.SelectionSet, obj model.CreateYahooAuctionCrawlSettingRequiredKeywordResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess:
		return ec._CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess(ctx, sel, &obj)
	case *model.CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess(ctx, sel, obj)
	case model.CreateYahooAuctionCrawlSettingRequiredKeywordResultError:
		return ec._CreateYahooAuctionCrawlSettingRequiredKeywordResultError(ctx, sel, &obj)
	case *model.CreateYahooAuctionCrawlSettingRequiredKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateYahooAuctionCrawlSettingRequiredKeywordResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingRequiredKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.CreateYahooAuctionCrawlSettingRequiredKeywordResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed:
		return ec._CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _DeleteMercariCrawlSettingExcludeKeywordResult(ctx context.Context, sel ast.SelectionSet, obj model.DeleteMercariCrawlSettingExcludeKeywordResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.DeleteMercariCrawlSettingExcludeKeywordResultSuccess:
		return ec._DeleteMercariCrawlSettingExcludeKeywordResultSuccess(ctx, sel, &obj)
	case *model.DeleteMercariCrawlSettingExcludeKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteMercariCrawlSettingExcludeKeywordResultSuccess(ctx, sel, obj)
	case model.DeleteMercariCrawlSettingExcludeKeywordResultError:
		return ec._DeleteMercariCrawlSettingExcludeKeywordResultError(ctx, sel, &obj)
	case *model.DeleteMercariCrawlSettingExcludeKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteMercariCrawlSettingExcludeKeywordResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _DeleteMercariCrawlSettingExcludeKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.DeleteMercariCrawlSettingExcludeKeywordResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed:
		return ec._DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _DeleteMercariCrawlSettingRequiredKeywordResult(ctx context.Context, sel ast.SelectionSet, obj model.DeleteMercariCrawlSettingRequiredKeywordResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.DeleteMercariCrawlSettingRequiredKeywordResultSuccess:
		return ec._DeleteMercariCrawlSettingRequiredKeywordResultSuccess(ctx, sel, &obj)
	case *model.DeleteMercariCrawlSettingRequiredKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteMercariCrawlSettingRequiredKeywordResultSuccess(ctx, sel, obj)
	case model.DeleteMercariCrawlSettingRequiredKeywordResultError:
		return ec._DeleteMercariCrawlSettingRequiredKeywordResultError(ctx, sel, &obj)
	case *model.DeleteMercariCrawlSettingRequiredKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteMercariCrawlSettingRequiredKeywordResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _DeleteMercariCrawlSettingRequiredKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.DeleteMercariCrawlSettingRequiredKeywordResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed:
		return ec._DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _DeleteProductResult(ctx context.Context, sel ast.SelectionSet, obj model.DeleteProductResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.DeleteProductResultSuccess:
		return ec._DeleteProductResultSuccess(ctx, sel, &obj)
	case *model.DeleteProductResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteProductResultSuccess(ctx, sel, obj)
	case model.DeleteProductResultError:
		return ec._DeleteProductResultError(ctx, sel, &obj)
	case *model.DeleteProductResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteProductResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _DeleteProductResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.DeleteProductResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.DeleteProductResultValidationFailed:
		return ec._DeleteProductResultValidationFailed(ctx, sel, &obj)
	case *model.DeleteProductResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteProductResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingExcludeKeywordResult(ctx context.Context, sel ast.SelectionSet, obj model.DeleteYahooAuctionCrawlSettingExcludeKeywordResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.DeleteYahooAuctionCrawlSettingExcludeKeywordResultSuccess:
		return ec._DeleteYahooAuctionCrawlSettingExcludeKeywordResultSuccess(ctx, sel, &obj)
	case *model.DeleteYahooAuctionCrawlSettingExcludeKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteYahooAuctionCrawlSettingExcludeKeywordResultSuccess(ctx, sel, obj)
	case model.DeleteYahooAuctionCrawlSettingExcludeKeywordResultError:
		return ec._DeleteYahooAuctionCrawlSettingExcludeKeywordResultError(ctx, sel, &obj)
	case *model.DeleteYahooAuctionCrawlSettingExcludeKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteYahooAuctionCrawlSettingExcludeKeywordResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingExcludeKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.DeleteYahooAuctionCrawlSettingExcludeKeywordResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed:
		return ec._DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingRequiredKeywordResult(ctx context.Context, sel ast.SelectionSet, obj model.DeleteYahooAuctionCrawlSettingRequiredKeywordResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.DeleteYahooAuctionCrawlSettingRequiredKeywordResultSuccess:
		return ec._DeleteYahooAuctionCrawlSettingRequiredKeywordResultSuccess(ctx, sel, &obj)
	case *model.DeleteYahooAuctionCrawlSettingRequiredKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteYahooAuctionCrawlSettingRequiredKeywordResultSuccess(ctx, sel, obj)
	case model.DeleteYahooAuctionCrawlSettingRequiredKeywordResultError:
		return ec._DeleteYahooAuctionCrawlSettingRequiredKeywordResultError(ctx, sel, &obj)
	case *model.DeleteYahooAuctionCrawlSettingRequiredKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteYahooAuctionCrawlSettingRequiredKeywordResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingRequiredKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.DeleteYahooAuctionCrawlSettingRequiredKeywordResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed:
		return ec._DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Node(ctx context.Context, sel ast.SelectionSet, obj model.Node) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.Product:
		return ec._Product(ctx, sel, &obj)
	case *model.Product:
		if obj == nil {
			return graphql.Null
		}
		return ec._Product(ctx, sel, obj)
	case model.YahooAuctionProduct:
		return ec._YahooAuctionProduct(ctx, sel, &obj)
	case *model.YahooAuctionProduct:
		if obj == nil {
			return graphql.Null
		}
		return ec._YahooAuctionProduct(ctx, sel, obj)
	case model.YahooAuctionCrawlSetting:
		return ec._YahooAuctionCrawlSetting(ctx, sel, &obj)
	case *model.YahooAuctionCrawlSetting:
		if obj == nil {
			return graphql.Null
		}
		return ec._YahooAuctionCrawlSetting(ctx, sel, obj)
	case model.YahooAuctionCrawlSettingExcludeKeyword:
		return ec._YahooAuctionCrawlSettingExcludeKeyword(ctx, sel, &obj)
	case *model.YahooAuctionCrawlSettingExcludeKeyword:
		if obj == nil {
			return graphql.Null
		}
		return ec._YahooAuctionCrawlSettingExcludeKeyword(ctx, sel, obj)
	case model.YahooAuctionCrawlSettingRequiredKeyword:
		return ec._YahooAuctionCrawlSettingRequiredKeyword(ctx, sel, &obj)
	case *model.YahooAuctionCrawlSettingRequiredKeyword:
		if obj == nil {
			return graphql.Null
		}
		return ec._YahooAuctionCrawlSettingRequiredKeyword(ctx, sel, obj)
	case model.YahooAuctionDailyPurchaseSummary:
		return ec._YahooAuctionDailyPurchaseSummary(ctx, sel, &obj)
	case *model.YahooAuctionDailyPurchaseSummary:
		if obj == nil {
			return graphql.Null
		}
		return ec._YahooAuctionDailyPurchaseSummary(ctx, sel, obj)
	case model.MercariDailyPurchaseSummary:
		return ec._MercariDailyPurchaseSummary(ctx, sel, &obj)
	case *model.MercariDailyPurchaseSummary:
		if obj == nil {
			return graphql.Null
		}
		return ec._MercariDailyPurchaseSummary(ctx, sel, obj)
	case model.MercariProduct:
		return ec._MercariProduct(ctx, sel, &obj)
	case *model.MercariProduct:
		if obj == nil {
			return graphql.Null
		}
		return ec._MercariProduct(ctx, sel, obj)
	case model.MercariCrawlSetting:
		return ec._MercariCrawlSetting(ctx, sel, &obj)
	case *model.MercariCrawlSetting:
		if obj == nil {
			return graphql.Null
		}
		return ec._MercariCrawlSetting(ctx, sel, obj)
	case model.MercariCrawlSettingExcludeKeyword:
		return ec._MercariCrawlSettingExcludeKeyword(ctx, sel, &obj)
	case *model.MercariCrawlSettingExcludeKeyword:
		if obj == nil {
			return graphql.Null
		}
		return ec._MercariCrawlSettingExcludeKeyword(ctx, sel, obj)
	case model.MercariCrawlSettingRequiredKeyword:
		return ec._MercariCrawlSettingRequiredKeyword(ctx, sel, &obj)
	case *model.MercariCrawlSettingRequiredKeyword:
		if obj == nil {
			return graphql.Null
		}
		return ec._MercariCrawlSettingRequiredKeyword(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _ResultBase(ctx context.Context, sel ast.SelectionSet, obj model.ResultBase) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CreateProductResultSuccess:
		return ec._CreateProductResultSuccess(ctx, sel, &obj)
	case *model.CreateProductResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateProductResultSuccess(ctx, sel, obj)
	case model.CreateProductResultError:
		return ec._CreateProductResultError(ctx, sel, &obj)
	case *model.CreateProductResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateProductResultError(ctx, sel, obj)
	case model.UpdateProductResultSuccess:
		return ec._UpdateProductResultSuccess(ctx, sel, &obj)
	case *model.UpdateProductResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateProductResultSuccess(ctx, sel, obj)
	case model.UpdateProductResultError:
		return ec._UpdateProductResultError(ctx, sel, &obj)
	case *model.UpdateProductResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateProductResultError(ctx, sel, obj)
	case model.DeleteProductResultSuccess:
		return ec._DeleteProductResultSuccess(ctx, sel, &obj)
	case *model.DeleteProductResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteProductResultSuccess(ctx, sel, obj)
	case model.DeleteProductResultError:
		return ec._DeleteProductResultError(ctx, sel, &obj)
	case *model.DeleteProductResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteProductResultError(ctx, sel, obj)
	case model.CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess:
		return ec._CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess(ctx, sel, &obj)
	case *model.CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess(ctx, sel, obj)
	case model.CreateYahooAuctionCrawlSettingExcludeKeywordResultError:
		return ec._CreateYahooAuctionCrawlSettingExcludeKeywordResultError(ctx, sel, &obj)
	case *model.CreateYahooAuctionCrawlSettingExcludeKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateYahooAuctionCrawlSettingExcludeKeywordResultError(ctx, sel, obj)
	case model.UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess:
		return ec._UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess(ctx, sel, &obj)
	case *model.UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess(ctx, sel, obj)
	case model.UpdateYahooAuctionCrawlSettingExcludeKeywordResultError:
		return ec._UpdateYahooAuctionCrawlSettingExcludeKeywordResultError(ctx, sel, &obj)
	case *model.UpdateYahooAuctionCrawlSettingExcludeKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateYahooAuctionCrawlSettingExcludeKeywordResultError(ctx, sel, obj)
	case model.DeleteYahooAuctionCrawlSettingExcludeKeywordResultSuccess:
		return ec._DeleteYahooAuctionCrawlSettingExcludeKeywordResultSuccess(ctx, sel, &obj)
	case *model.DeleteYahooAuctionCrawlSettingExcludeKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteYahooAuctionCrawlSettingExcludeKeywordResultSuccess(ctx, sel, obj)
	case model.DeleteYahooAuctionCrawlSettingExcludeKeywordResultError:
		return ec._DeleteYahooAuctionCrawlSettingExcludeKeywordResultError(ctx, sel, &obj)
	case *model.DeleteYahooAuctionCrawlSettingExcludeKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteYahooAuctionCrawlSettingExcludeKeywordResultError(ctx, sel, obj)
	case model.CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess:
		return ec._CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess(ctx, sel, &obj)
	case *model.CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess(ctx, sel, obj)
	case model.CreateYahooAuctionCrawlSettingRequiredKeywordResultError:
		return ec._CreateYahooAuctionCrawlSettingRequiredKeywordResultError(ctx, sel, &obj)
	case *model.CreateYahooAuctionCrawlSettingRequiredKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateYahooAuctionCrawlSettingRequiredKeywordResultError(ctx, sel, obj)
	case model.UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess:
		return ec._UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess(ctx, sel, &obj)
	case *model.UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess(ctx, sel, obj)
	case model.UpdateYahooAuctionCrawlSettingRequiredKeywordResultError:
		return ec._UpdateYahooAuctionCrawlSettingRequiredKeywordResultError(ctx, sel, &obj)
	case *model.UpdateYahooAuctionCrawlSettingRequiredKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateYahooAuctionCrawlSettingRequiredKeywordResultError(ctx, sel, obj)
	case model.DeleteYahooAuctionCrawlSettingRequiredKeywordResultSuccess:
		return ec._DeleteYahooAuctionCrawlSettingRequiredKeywordResultSuccess(ctx, sel, &obj)
	case *model.DeleteYahooAuctionCrawlSettingRequiredKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteYahooAuctionCrawlSettingRequiredKeywordResultSuccess(ctx, sel, obj)
	case model.DeleteYahooAuctionCrawlSettingRequiredKeywordResultError:
		return ec._DeleteYahooAuctionCrawlSettingRequiredKeywordResultError(ctx, sel, &obj)
	case *model.DeleteYahooAuctionCrawlSettingRequiredKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteYahooAuctionCrawlSettingRequiredKeywordResultError(ctx, sel, obj)
	case model.CreateMercariCrawlSettingExcludeKeywordResultSuccess:
		return ec._CreateMercariCrawlSettingExcludeKeywordResultSuccess(ctx, sel, &obj)
	case *model.CreateMercariCrawlSettingExcludeKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateMercariCrawlSettingExcludeKeywordResultSuccess(ctx, sel, obj)
	case model.CreateMercariCrawlSettingExcludeKeywordResultError:
		return ec._CreateMercariCrawlSettingExcludeKeywordResultError(ctx, sel, &obj)
	case *model.CreateMercariCrawlSettingExcludeKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateMercariCrawlSettingExcludeKeywordResultError(ctx, sel, obj)
	case model.UpdateMercariCrawlSettingExcludeKeywordResultSuccess:
		return ec._UpdateMercariCrawlSettingExcludeKeywordResultSuccess(ctx, sel, &obj)
	case *model.UpdateMercariCrawlSettingExcludeKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateMercariCrawlSettingExcludeKeywordResultSuccess(ctx, sel, obj)
	case model.UpdateMercariCrawlSettingExcludeKeywordResultError:
		return ec._UpdateMercariCrawlSettingExcludeKeywordResultError(ctx, sel, &obj)
	case *model.UpdateMercariCrawlSettingExcludeKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateMercariCrawlSettingExcludeKeywordResultError(ctx, sel, obj)
	case model.DeleteMercariCrawlSettingExcludeKeywordResultSuccess:
		return ec._DeleteMercariCrawlSettingExcludeKeywordResultSuccess(ctx, sel, &obj)
	case *model.DeleteMercariCrawlSettingExcludeKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteMercariCrawlSettingExcludeKeywordResultSuccess(ctx, sel, obj)
	case model.DeleteMercariCrawlSettingExcludeKeywordResultError:
		return ec._DeleteMercariCrawlSettingExcludeKeywordResultError(ctx, sel, &obj)
	case *model.DeleteMercariCrawlSettingExcludeKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteMercariCrawlSettingExcludeKeywordResultError(ctx, sel, obj)
	case model.CreateMercariCrawlSettingRequiredKeywordResultSuccess:
		return ec._CreateMercariCrawlSettingRequiredKeywordResultSuccess(ctx, sel, &obj)
	case *model.CreateMercariCrawlSettingRequiredKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateMercariCrawlSettingRequiredKeywordResultSuccess(ctx, sel, obj)
	case model.CreateMercariCrawlSettingRequiredKeywordResultError:
		return ec._CreateMercariCrawlSettingRequiredKeywordResultError(ctx, sel, &obj)
	case *model.CreateMercariCrawlSettingRequiredKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateMercariCrawlSettingRequiredKeywordResultError(ctx, sel, obj)
	case model.UpdateMercariCrawlSettingRequiredKeywordResultSuccess:
		return ec._UpdateMercariCrawlSettingRequiredKeywordResultSuccess(ctx, sel, &obj)
	case *model.UpdateMercariCrawlSettingRequiredKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateMercariCrawlSettingRequiredKeywordResultSuccess(ctx, sel, obj)
	case model.UpdateMercariCrawlSettingRequiredKeywordResultError:
		return ec._UpdateMercariCrawlSettingRequiredKeywordResultError(ctx, sel, &obj)
	case *model.UpdateMercariCrawlSettingRequiredKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateMercariCrawlSettingRequiredKeywordResultError(ctx, sel, obj)
	case model.DeleteMercariCrawlSettingRequiredKeywordResultSuccess:
		return ec._DeleteMercariCrawlSettingRequiredKeywordResultSuccess(ctx, sel, &obj)
	case *model.DeleteMercariCrawlSettingRequiredKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteMercariCrawlSettingRequiredKeywordResultSuccess(ctx, sel, obj)
	case model.DeleteMercariCrawlSettingRequiredKeywordResultError:
		return ec._DeleteMercariCrawlSettingRequiredKeywordResultError(ctx, sel, &obj)
	case *model.DeleteMercariCrawlSettingRequiredKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteMercariCrawlSettingRequiredKeywordResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _UpdateMercariCrawlSettingExcludeKeywordResult(ctx context.Context, sel ast.SelectionSet, obj model.UpdateMercariCrawlSettingExcludeKeywordResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.UpdateMercariCrawlSettingExcludeKeywordResultSuccess:
		return ec._UpdateMercariCrawlSettingExcludeKeywordResultSuccess(ctx, sel, &obj)
	case *model.UpdateMercariCrawlSettingExcludeKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateMercariCrawlSettingExcludeKeywordResultSuccess(ctx, sel, obj)
	case model.UpdateMercariCrawlSettingExcludeKeywordResultError:
		return ec._UpdateMercariCrawlSettingExcludeKeywordResultError(ctx, sel, &obj)
	case *model.UpdateMercariCrawlSettingExcludeKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateMercariCrawlSettingExcludeKeywordResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _UpdateMercariCrawlSettingExcludeKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.UpdateMercariCrawlSettingExcludeKeywordResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed:
		return ec._UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _UpdateMercariCrawlSettingRequiredKeywordResult(ctx context.Context, sel ast.SelectionSet, obj model.UpdateMercariCrawlSettingRequiredKeywordResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.UpdateMercariCrawlSettingRequiredKeywordResultSuccess:
		return ec._UpdateMercariCrawlSettingRequiredKeywordResultSuccess(ctx, sel, &obj)
	case *model.UpdateMercariCrawlSettingRequiredKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateMercariCrawlSettingRequiredKeywordResultSuccess(ctx, sel, obj)
	case model.UpdateMercariCrawlSettingRequiredKeywordResultError:
		return ec._UpdateMercariCrawlSettingRequiredKeywordResultError(ctx, sel, &obj)
	case *model.UpdateMercariCrawlSettingRequiredKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateMercariCrawlSettingRequiredKeywordResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _UpdateMercariCrawlSettingRequiredKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.UpdateMercariCrawlSettingRequiredKeywordResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed:
		return ec._UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _UpdateProductResult(ctx context.Context, sel ast.SelectionSet, obj model.UpdateProductResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.UpdateProductResultSuccess:
		return ec._UpdateProductResultSuccess(ctx, sel, &obj)
	case *model.UpdateProductResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateProductResultSuccess(ctx, sel, obj)
	case model.UpdateProductResultError:
		return ec._UpdateProductResultError(ctx, sel, &obj)
	case *model.UpdateProductResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateProductResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _UpdateProductResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.UpdateProductResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.UpdateProductResultValidationFailed:
		return ec._UpdateProductResultValidationFailed(ctx, sel, &obj)
	case *model.UpdateProductResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateProductResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingExcludeKeywordResult(ctx context.Context, sel ast.SelectionSet, obj model.UpdateYahooAuctionCrawlSettingExcludeKeywordResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess:
		return ec._UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess(ctx, sel, &obj)
	case *model.UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess(ctx, sel, obj)
	case model.UpdateYahooAuctionCrawlSettingExcludeKeywordResultError:
		return ec._UpdateYahooAuctionCrawlSettingExcludeKeywordResultError(ctx, sel, &obj)
	case *model.UpdateYahooAuctionCrawlSettingExcludeKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateYahooAuctionCrawlSettingExcludeKeywordResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingExcludeKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.UpdateYahooAuctionCrawlSettingExcludeKeywordResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed:
		return ec._UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingRequiredKeywordResult(ctx context.Context, sel ast.SelectionSet, obj model.UpdateYahooAuctionCrawlSettingRequiredKeywordResult) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess:
		return ec._UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess(ctx, sel, &obj)
	case *model.UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess(ctx, sel, obj)
	case model.UpdateYahooAuctionCrawlSettingRequiredKeywordResultError:
		return ec._UpdateYahooAuctionCrawlSettingRequiredKeywordResultError(ctx, sel, &obj)
	case *model.UpdateYahooAuctionCrawlSettingRequiredKeywordResultError:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateYahooAuctionCrawlSettingRequiredKeywordResultError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingRequiredKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, obj model.UpdateYahooAuctionCrawlSettingRequiredKeywordResultErrors) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed:
		return ec._UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _UserError(ctx context.Context, sel ast.SelectionSet, obj model.UserError) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.CreateProductResultValidationFailed:
		return ec._CreateProductResultValidationFailed(ctx, sel, &obj)
	case *model.CreateProductResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateProductResultValidationFailed(ctx, sel, obj)
	case model.UpdateProductResultValidationFailed:
		return ec._UpdateProductResultValidationFailed(ctx, sel, &obj)
	case *model.UpdateProductResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateProductResultValidationFailed(ctx, sel, obj)
	case model.DeleteProductResultValidationFailed:
		return ec._DeleteProductResultValidationFailed(ctx, sel, &obj)
	case *model.DeleteProductResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteProductResultValidationFailed(ctx, sel, obj)
	case model.CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed:
		return ec._CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, obj)
	case model.UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed:
		return ec._UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, obj)
	case model.DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed:
		return ec._DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, obj)
	case model.CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed:
		return ec._CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, obj)
	case model.UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed:
		return ec._UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, obj)
	case model.DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed:
		return ec._DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, obj)
	case model.CreateMercariCrawlSettingExcludeKeywordResultValidationFailed:
		return ec._CreateMercariCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.CreateMercariCrawlSettingExcludeKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateMercariCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, obj)
	case model.UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed:
		return ec._UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, obj)
	case model.DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed:
		return ec._DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed(ctx, sel, obj)
	case model.CreateMercariCrawlSettingRequiredKeywordResultValidationFailed:
		return ec._CreateMercariCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.CreateMercariCrawlSettingRequiredKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._CreateMercariCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, obj)
	case model.UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed:
		return ec._UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, obj)
	case model.DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed:
		return ec._DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, &obj)
	case *model.DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var createMercariCrawlSettingExcludeKeywordResultErrorImplementors = []string{"CreateMercariCrawlSettingExcludeKeywordResultError", "CreateMercariCrawlSettingExcludeKeywordResult", "ResultBase"}

func (ec *executionContext) _CreateMercariCrawlSettingExcludeKeywordResultError(ctx context.Context, sel ast.SelectionSet, obj *model.CreateMercariCrawlSettingExcludeKeywordResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createMercariCrawlSettingExcludeKeywordResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateMercariCrawlSettingExcludeKeywordResultError")
		case "ok":
			out.Values[i] = ec._CreateMercariCrawlSettingExcludeKeywordResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._CreateMercariCrawlSettingExcludeKeywordResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createMercariCrawlSettingExcludeKeywordResultSuccessImplementors = []string{"CreateMercariCrawlSettingExcludeKeywordResultSuccess", "CreateMercariCrawlSettingExcludeKeywordResult", "ResultBase"}

func (ec *executionContext) _CreateMercariCrawlSettingExcludeKeywordResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.CreateMercariCrawlSettingExcludeKeywordResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createMercariCrawlSettingExcludeKeywordResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateMercariCrawlSettingExcludeKeywordResultSuccess")
		case "ok":
			out.Values[i] = ec._CreateMercariCrawlSettingExcludeKeywordResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mercariCrawlSettingExcludeKeyword":
			out.Values[i] = ec._CreateMercariCrawlSettingExcludeKeywordResultSuccess_mercariCrawlSettingExcludeKeyword(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createMercariCrawlSettingExcludeKeywordResultValidationFailedImplementors = []string{"CreateMercariCrawlSettingExcludeKeywordResultValidationFailed", "CreateMercariCrawlSettingExcludeKeywordResultErrors", "UserError"}

func (ec *executionContext) _CreateMercariCrawlSettingExcludeKeywordResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.CreateMercariCrawlSettingExcludeKeywordResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createMercariCrawlSettingExcludeKeywordResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateMercariCrawlSettingExcludeKeywordResultValidationFailed")
		case "code":
			out.Values[i] = ec._CreateMercariCrawlSettingExcludeKeywordResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._CreateMercariCrawlSettingExcludeKeywordResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._CreateMercariCrawlSettingExcludeKeywordResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createMercariCrawlSettingRequiredKeywordResultErrorImplementors = []string{"CreateMercariCrawlSettingRequiredKeywordResultError", "CreateMercariCrawlSettingRequiredKeywordResult", "ResultBase"}

func (ec *executionContext) _CreateMercariCrawlSettingRequiredKeywordResultError(ctx context.Context, sel ast.SelectionSet, obj *model.CreateMercariCrawlSettingRequiredKeywordResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createMercariCrawlSettingRequiredKeywordResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateMercariCrawlSettingRequiredKeywordResultError")
		case "ok":
			out.Values[i] = ec._CreateMercariCrawlSettingRequiredKeywordResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._CreateMercariCrawlSettingRequiredKeywordResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createMercariCrawlSettingRequiredKeywordResultSuccessImplementors = []string{"CreateMercariCrawlSettingRequiredKeywordResultSuccess", "CreateMercariCrawlSettingRequiredKeywordResult", "ResultBase"}

func (ec *executionContext) _CreateMercariCrawlSettingRequiredKeywordResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.CreateMercariCrawlSettingRequiredKeywordResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createMercariCrawlSettingRequiredKeywordResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateMercariCrawlSettingRequiredKeywordResultSuccess")
		case "ok":
			out.Values[i] = ec._CreateMercariCrawlSettingRequiredKeywordResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mercariCrawlSettingRequiredKeyword":
			out.Values[i] = ec._CreateMercariCrawlSettingRequiredKeywordResultSuccess_mercariCrawlSettingRequiredKeyword(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createMercariCrawlSettingRequiredKeywordResultValidationFailedImplementors = []string{"CreateMercariCrawlSettingRequiredKeywordResultValidationFailed", "CreateMercariCrawlSettingRequiredKeywordResultErrors", "UserError"}

func (ec *executionContext) _CreateMercariCrawlSettingRequiredKeywordResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.CreateMercariCrawlSettingRequiredKeywordResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createMercariCrawlSettingRequiredKeywordResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateMercariCrawlSettingRequiredKeywordResultValidationFailed")
		case "code":
			out.Values[i] = ec._CreateMercariCrawlSettingRequiredKeywordResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._CreateMercariCrawlSettingRequiredKeywordResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._CreateMercariCrawlSettingRequiredKeywordResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createProductResultErrorImplementors = []string{"CreateProductResultError", "CreateProductResult", "ResultBase"}

func (ec *executionContext) _CreateProductResultError(ctx context.Context, sel ast.SelectionSet, obj *model.CreateProductResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createProductResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateProductResultError")
		case "ok":
			out.Values[i] = ec._CreateProductResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._CreateProductResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createProductResultSuccessImplementors = []string{"CreateProductResultSuccess", "CreateProductResult", "ResultBase"}

func (ec *executionContext) _CreateProductResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.CreateProductResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createProductResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateProductResultSuccess")
		case "ok":
			out.Values[i] = ec._CreateProductResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "product":
			out.Values[i] = ec._CreateProductResultSuccess_product(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createProductResultValidationFailedImplementors = []string{"CreateProductResultValidationFailed", "CreateProductResultErrors", "UserError"}

func (ec *executionContext) _CreateProductResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.CreateProductResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createProductResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateProductResultValidationFailed")
		case "code":
			out.Values[i] = ec._CreateProductResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._CreateProductResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._CreateProductResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createYahooAuctionCrawlSettingExcludeKeywordResultErrorImplementors = []string{"CreateYahooAuctionCrawlSettingExcludeKeywordResultError", "CreateYahooAuctionCrawlSettingExcludeKeywordResult", "ResultBase"}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingExcludeKeywordResultError(ctx context.Context, sel ast.SelectionSet, obj *model.CreateYahooAuctionCrawlSettingExcludeKeywordResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createYahooAuctionCrawlSettingExcludeKeywordResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateYahooAuctionCrawlSettingExcludeKeywordResultError")
		case "ok":
			out.Values[i] = ec._CreateYahooAuctionCrawlSettingExcludeKeywordResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._CreateYahooAuctionCrawlSettingExcludeKeywordResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createYahooAuctionCrawlSettingExcludeKeywordResultSuccessImplementors = []string{"CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess", "CreateYahooAuctionCrawlSettingExcludeKeywordResult", "ResultBase"}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createYahooAuctionCrawlSettingExcludeKeywordResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess")
		case "ok":
			out.Values[i] = ec._CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "yahooAuctionCrawlSettingExcludeKeyword":
			out.Values[i] = ec._CreateYahooAuctionCrawlSettingExcludeKeywordResultSuccess_yahooAuctionCrawlSettingExcludeKeyword(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createYahooAuctionCrawlSettingExcludeKeywordResultValidationFailedImplementors = []string{"CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed", "CreateYahooAuctionCrawlSettingExcludeKeywordResultErrors", "UserError"}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createYahooAuctionCrawlSettingExcludeKeywordResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed")
		case "code":
			out.Values[i] = ec._CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._CreateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createYahooAuctionCrawlSettingRequiredKeywordResultErrorImplementors = []string{"CreateYahooAuctionCrawlSettingRequiredKeywordResultError", "CreateYahooAuctionCrawlSettingRequiredKeywordResult", "ResultBase"}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingRequiredKeywordResultError(ctx context.Context, sel ast.SelectionSet, obj *model.CreateYahooAuctionCrawlSettingRequiredKeywordResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createYahooAuctionCrawlSettingRequiredKeywordResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateYahooAuctionCrawlSettingRequiredKeywordResultError")
		case "ok":
			out.Values[i] = ec._CreateYahooAuctionCrawlSettingRequiredKeywordResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._CreateYahooAuctionCrawlSettingRequiredKeywordResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createYahooAuctionCrawlSettingRequiredKeywordResultSuccessImplementors = []string{"CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess", "CreateYahooAuctionCrawlSettingRequiredKeywordResult", "ResultBase"}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createYahooAuctionCrawlSettingRequiredKeywordResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess")
		case "ok":
			out.Values[i] = ec._CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "yahooAuctionCrawlSettingRequiredKeyword":
			out.Values[i] = ec._CreateYahooAuctionCrawlSettingRequiredKeywordResultSuccess_yahooAuctionCrawlSettingRequiredKeyword(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createYahooAuctionCrawlSettingRequiredKeywordResultValidationFailedImplementors = []string{"CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed", "CreateYahooAuctionCrawlSettingRequiredKeywordResultErrors", "UserError"}

func (ec *executionContext) _CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createYahooAuctionCrawlSettingRequiredKeywordResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed")
		case "code":
			out.Values[i] = ec._CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._CreateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteMercariCrawlSettingExcludeKeywordResultErrorImplementors = []string{"DeleteMercariCrawlSettingExcludeKeywordResultError", "DeleteMercariCrawlSettingExcludeKeywordResult", "ResultBase"}

func (ec *executionContext) _DeleteMercariCrawlSettingExcludeKeywordResultError(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteMercariCrawlSettingExcludeKeywordResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteMercariCrawlSettingExcludeKeywordResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteMercariCrawlSettingExcludeKeywordResultError")
		case "ok":
			out.Values[i] = ec._DeleteMercariCrawlSettingExcludeKeywordResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._DeleteMercariCrawlSettingExcludeKeywordResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteMercariCrawlSettingExcludeKeywordResultSuccessImplementors = []string{"DeleteMercariCrawlSettingExcludeKeywordResultSuccess", "DeleteMercariCrawlSettingExcludeKeywordResult", "ResultBase"}

func (ec *executionContext) _DeleteMercariCrawlSettingExcludeKeywordResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteMercariCrawlSettingExcludeKeywordResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteMercariCrawlSettingExcludeKeywordResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteMercariCrawlSettingExcludeKeywordResultSuccess")
		case "ok":
			out.Values[i] = ec._DeleteMercariCrawlSettingExcludeKeywordResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteMercariCrawlSettingExcludeKeywordResultValidationFailedImplementors = []string{"DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed", "DeleteMercariCrawlSettingExcludeKeywordResultErrors", "UserError"}

func (ec *executionContext) _DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteMercariCrawlSettingExcludeKeywordResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed")
		case "code":
			out.Values[i] = ec._DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._DeleteMercariCrawlSettingExcludeKeywordResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteMercariCrawlSettingRequiredKeywordResultErrorImplementors = []string{"DeleteMercariCrawlSettingRequiredKeywordResultError", "DeleteMercariCrawlSettingRequiredKeywordResult", "ResultBase"}

func (ec *executionContext) _DeleteMercariCrawlSettingRequiredKeywordResultError(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteMercariCrawlSettingRequiredKeywordResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteMercariCrawlSettingRequiredKeywordResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteMercariCrawlSettingRequiredKeywordResultError")
		case "ok":
			out.Values[i] = ec._DeleteMercariCrawlSettingRequiredKeywordResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._DeleteMercariCrawlSettingRequiredKeywordResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteMercariCrawlSettingRequiredKeywordResultSuccessImplementors = []string{"DeleteMercariCrawlSettingRequiredKeywordResultSuccess", "DeleteMercariCrawlSettingRequiredKeywordResult", "ResultBase"}

func (ec *executionContext) _DeleteMercariCrawlSettingRequiredKeywordResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteMercariCrawlSettingRequiredKeywordResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteMercariCrawlSettingRequiredKeywordResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteMercariCrawlSettingRequiredKeywordResultSuccess")
		case "ok":
			out.Values[i] = ec._DeleteMercariCrawlSettingRequiredKeywordResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteMercariCrawlSettingRequiredKeywordResultValidationFailedImplementors = []string{"DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed", "DeleteMercariCrawlSettingRequiredKeywordResultErrors", "UserError"}

func (ec *executionContext) _DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteMercariCrawlSettingRequiredKeywordResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed")
		case "code":
			out.Values[i] = ec._DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._DeleteMercariCrawlSettingRequiredKeywordResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteProductResultErrorImplementors = []string{"DeleteProductResultError", "DeleteProductResult", "ResultBase"}

func (ec *executionContext) _DeleteProductResultError(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteProductResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteProductResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteProductResultError")
		case "ok":
			out.Values[i] = ec._DeleteProductResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._DeleteProductResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteProductResultSuccessImplementors = []string{"DeleteProductResultSuccess", "DeleteProductResult", "ResultBase"}

func (ec *executionContext) _DeleteProductResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteProductResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteProductResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteProductResultSuccess")
		case "ok":
			out.Values[i] = ec._DeleteProductResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteProductResultValidationFailedImplementors = []string{"DeleteProductResultValidationFailed", "DeleteProductResultErrors", "UserError"}

func (ec *executionContext) _DeleteProductResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteProductResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteProductResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteProductResultValidationFailed")
		case "code":
			out.Values[i] = ec._DeleteProductResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._DeleteProductResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._DeleteProductResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteYahooAuctionCrawlSettingExcludeKeywordResultErrorImplementors = []string{"DeleteYahooAuctionCrawlSettingExcludeKeywordResultError", "DeleteYahooAuctionCrawlSettingExcludeKeywordResult", "ResultBase"}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingExcludeKeywordResultError(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteYahooAuctionCrawlSettingExcludeKeywordResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteYahooAuctionCrawlSettingExcludeKeywordResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteYahooAuctionCrawlSettingExcludeKeywordResultError")
		case "ok":
			out.Values[i] = ec._DeleteYahooAuctionCrawlSettingExcludeKeywordResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._DeleteYahooAuctionCrawlSettingExcludeKeywordResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteYahooAuctionCrawlSettingExcludeKeywordResultSuccessImplementors = []string{"DeleteYahooAuctionCrawlSettingExcludeKeywordResultSuccess", "DeleteYahooAuctionCrawlSettingExcludeKeywordResult", "ResultBase"}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingExcludeKeywordResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteYahooAuctionCrawlSettingExcludeKeywordResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteYahooAuctionCrawlSettingExcludeKeywordResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteYahooAuctionCrawlSettingExcludeKeywordResultSuccess")
		case "ok":
			out.Values[i] = ec._DeleteYahooAuctionCrawlSettingExcludeKeywordResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailedImplementors = []string{"DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed", "DeleteYahooAuctionCrawlSettingExcludeKeywordResultErrors", "UserError"}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed")
		case "code":
			out.Values[i] = ec._DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._DeleteYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteYahooAuctionCrawlSettingRequiredKeywordResultErrorImplementors = []string{"DeleteYahooAuctionCrawlSettingRequiredKeywordResultError", "DeleteYahooAuctionCrawlSettingRequiredKeywordResult", "ResultBase"}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingRequiredKeywordResultError(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteYahooAuctionCrawlSettingRequiredKeywordResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteYahooAuctionCrawlSettingRequiredKeywordResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteYahooAuctionCrawlSettingRequiredKeywordResultError")
		case "ok":
			out.Values[i] = ec._DeleteYahooAuctionCrawlSettingRequiredKeywordResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._DeleteYahooAuctionCrawlSettingRequiredKeywordResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteYahooAuctionCrawlSettingRequiredKeywordResultSuccessImplementors = []string{"DeleteYahooAuctionCrawlSettingRequiredKeywordResultSuccess", "DeleteYahooAuctionCrawlSettingRequiredKeywordResult", "ResultBase"}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingRequiredKeywordResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteYahooAuctionCrawlSettingRequiredKeywordResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteYahooAuctionCrawlSettingRequiredKeywordResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteYahooAuctionCrawlSettingRequiredKeywordResultSuccess")
		case "ok":
			out.Values[i] = ec._DeleteYahooAuctionCrawlSettingRequiredKeywordResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailedImplementors = []string{"DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed", "DeleteYahooAuctionCrawlSettingRequiredKeywordResultErrors", "UserError"}

func (ec *executionContext) _DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed")
		case "code":
			out.Values[i] = ec._DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._DeleteYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var errorDetailImplementors = []string{"ErrorDetail"}

func (ec *executionContext) _ErrorDetail(ctx context.Context, sel ast.SelectionSet, obj *model.ErrorDetail) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, errorDetailImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ErrorDetail")
		case "field":
			out.Values[i] = ec._ErrorDetail_field(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._ErrorDetail_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mercariCrawlSettingImplementors = []string{"MercariCrawlSetting", "Node"}

func (ec *executionContext) _MercariCrawlSetting(ctx context.Context, sel ast.SelectionSet, obj *model.MercariCrawlSetting) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mercariCrawlSettingImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MercariCrawlSetting")
		case "id":
			out.Values[i] = ec._MercariCrawlSetting_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "productId":
			out.Values[i] = ec._MercariCrawlSetting_productId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "keyword":
			out.Values[i] = ec._MercariCrawlSetting_keyword(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "minPrice":
			out.Values[i] = ec._MercariCrawlSetting_minPrice(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "maxPrice":
			out.Values[i] = ec._MercariCrawlSetting_maxPrice(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "categoryId":
			out.Values[i] = ec._MercariCrawlSetting_categoryId(ctx, field, obj)
		case "enabled":
			out.Values[i] = ec._MercariCrawlSetting_enabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._MercariCrawlSetting_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._MercariCrawlSetting_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "mercariCrawlSettingExcludeKeywords":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MercariCrawlSetting_mercariCrawlSettingExcludeKeywords(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "mercariCrawlSettingRequiredKeywords":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MercariCrawlSetting_mercariCrawlSettingRequiredKeywords(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mercariCrawlSettingExcludeKeywordImplementors = []string{"MercariCrawlSettingExcludeKeyword", "Node"}

func (ec *executionContext) _MercariCrawlSettingExcludeKeyword(ctx context.Context, sel ast.SelectionSet, obj *model.MercariCrawlSettingExcludeKeyword) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mercariCrawlSettingExcludeKeywordImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MercariCrawlSettingExcludeKeyword")
		case "id":
			out.Values[i] = ec._MercariCrawlSettingExcludeKeyword_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mercariCrawlSettingId":
			out.Values[i] = ec._MercariCrawlSettingExcludeKeyword_mercariCrawlSettingId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "keyword":
			out.Values[i] = ec._MercariCrawlSettingExcludeKeyword_keyword(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._MercariCrawlSettingExcludeKeyword_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._MercariCrawlSettingExcludeKeyword_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mercariCrawlSettingRequiredKeywordImplementors = []string{"MercariCrawlSettingRequiredKeyword", "Node"}

func (ec *executionContext) _MercariCrawlSettingRequiredKeyword(ctx context.Context, sel ast.SelectionSet, obj *model.MercariCrawlSettingRequiredKeyword) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mercariCrawlSettingRequiredKeywordImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MercariCrawlSettingRequiredKeyword")
		case "id":
			out.Values[i] = ec._MercariCrawlSettingRequiredKeyword_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mercariCrawlSettingId":
			out.Values[i] = ec._MercariCrawlSettingRequiredKeyword_mercariCrawlSettingId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "keyword":
			out.Values[i] = ec._MercariCrawlSettingRequiredKeyword_keyword(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._MercariCrawlSettingRequiredKeyword_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._MercariCrawlSettingRequiredKeyword_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mercariDailyPurchaseSummaryImplementors = []string{"MercariDailyPurchaseSummary", "Node"}

func (ec *executionContext) _MercariDailyPurchaseSummary(ctx context.Context, sel ast.SelectionSet, obj *model.MercariDailyPurchaseSummary) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mercariDailyPurchaseSummaryImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MercariDailyPurchaseSummary")
		case "id":
			out.Values[i] = ec._MercariDailyPurchaseSummary_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "productId":
			out.Values[i] = ec._MercariDailyPurchaseSummary_productId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "averagePurchasePrice":
			out.Values[i] = ec._MercariDailyPurchaseSummary_averagePurchasePrice(ctx, field, obj)
		case "purchaseCount":
			out.Values[i] = ec._MercariDailyPurchaseSummary_purchaseCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "date":
			out.Values[i] = ec._MercariDailyPurchaseSummary_date(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._MercariDailyPurchaseSummary_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._MercariDailyPurchaseSummary_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mercariProductImplementors = []string{"MercariProduct", "Node"}

func (ec *executionContext) _MercariProduct(ctx context.Context, sel ast.SelectionSet, obj *model.MercariProduct) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mercariProductImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MercariProduct")
		case "id":
			out.Values[i] = ec._MercariProduct_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "productId":
			out.Values[i] = ec._MercariProduct_productId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mercariId":
			out.Values[i] = ec._MercariProduct_mercariId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._MercariProduct_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "thumbnailUrl":
			out.Values[i] = ec._MercariProduct_thumbnailUrl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "price":
			out.Values[i] = ec._MercariProduct_price(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "published":
			out.Values[i] = ec._MercariProduct_published(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "boughtDate":
			out.Values[i] = ec._MercariProduct_boughtDate(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._MercariProduct_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._MercariProduct_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createProduct":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createProduct(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateProduct":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateProduct(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteProduct":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteProduct(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createYahooAuctionCrawlSettingExcludeKeyword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createYahooAuctionCrawlSettingExcludeKeyword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateYahooAuctionCrawlSettingExcludeKeyword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateYahooAuctionCrawlSettingExcludeKeyword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteYahooAuctionCrawlSettingExcludeKeyword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteYahooAuctionCrawlSettingExcludeKeyword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createYahooAuctionCrawlSettingRequiredKeyword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createYahooAuctionCrawlSettingRequiredKeyword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateYahooAuctionCrawlSettingRequiredKeyword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateYahooAuctionCrawlSettingRequiredKeyword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteYahooAuctionCrawlSettingRequiredKeyword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteYahooAuctionCrawlSettingRequiredKeyword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createMercariCrawlSettingExcludeKeyword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createMercariCrawlSettingExcludeKeyword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateMercariCrawlSettingExcludeKeyword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateMercariCrawlSettingExcludeKeyword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteMercariCrawlSettingExcludeKeyword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteMercariCrawlSettingExcludeKeyword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createMercariCrawlSettingRequiredKeyword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createMercariCrawlSettingRequiredKeyword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateMercariCrawlSettingRequiredKeyword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateMercariCrawlSettingRequiredKeyword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteMercariCrawlSettingRequiredKeyword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteMercariCrawlSettingRequiredKeyword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var productImplementors = []string{"Product", "Node"}

func (ec *executionContext) _Product(ctx context.Context, sel ast.SelectionSet, obj *model.Product) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Product")
		case "id":
			out.Values[i] = ec._Product_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._Product_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "yahooAuctionProducts":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Product_yahooAuctionProducts(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "yahooAuctionCrawlSetting":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Product_yahooAuctionCrawlSetting(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "yahooAuctionDailyPurchaseSummaries":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Product_yahooAuctionDailyPurchaseSummaries(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "mercariProducts":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Product_mercariProducts(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "mercariCrawlSetting":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Product_mercariCrawlSetting(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "mercariDailyPurchaseSummaries":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Product_mercariDailyPurchaseSummaries(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "relatedProducts":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Product_relatedProducts(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "product":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_product(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "products":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_products(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "node":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_node(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var relatedProductImplementors = []string{"RelatedProduct"}

func (ec *executionContext) _RelatedProduct(ctx context.Context, sel ast.SelectionSet, obj *model.RelatedProduct) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, relatedProductImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RelatedProduct")
		case "relatedType":
			out.Values[i] = ec._RelatedProduct_relatedType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "productId":
			out.Values[i] = ec._RelatedProduct_productId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "externalId":
			out.Values[i] = ec._RelatedProduct_externalId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._RelatedProduct_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "thumbnailUrl":
			out.Values[i] = ec._RelatedProduct_thumbnailUrl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "price":
			out.Values[i] = ec._RelatedProduct_price(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "published":
			out.Values[i] = ec._RelatedProduct_published(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "boughtDate":
			out.Values[i] = ec._RelatedProduct_boughtDate(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._RelatedProduct_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._RelatedProduct_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateMercariCrawlSettingExcludeKeywordResultErrorImplementors = []string{"UpdateMercariCrawlSettingExcludeKeywordResultError", "UpdateMercariCrawlSettingExcludeKeywordResult", "ResultBase"}

func (ec *executionContext) _UpdateMercariCrawlSettingExcludeKeywordResultError(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateMercariCrawlSettingExcludeKeywordResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateMercariCrawlSettingExcludeKeywordResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateMercariCrawlSettingExcludeKeywordResultError")
		case "ok":
			out.Values[i] = ec._UpdateMercariCrawlSettingExcludeKeywordResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._UpdateMercariCrawlSettingExcludeKeywordResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateMercariCrawlSettingExcludeKeywordResultSuccessImplementors = []string{"UpdateMercariCrawlSettingExcludeKeywordResultSuccess", "UpdateMercariCrawlSettingExcludeKeywordResult", "ResultBase"}

func (ec *executionContext) _UpdateMercariCrawlSettingExcludeKeywordResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateMercariCrawlSettingExcludeKeywordResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateMercariCrawlSettingExcludeKeywordResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateMercariCrawlSettingExcludeKeywordResultSuccess")
		case "ok":
			out.Values[i] = ec._UpdateMercariCrawlSettingExcludeKeywordResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mercariCrawlSettingExcludeKeyword":
			out.Values[i] = ec._UpdateMercariCrawlSettingExcludeKeywordResultSuccess_mercariCrawlSettingExcludeKeyword(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateMercariCrawlSettingExcludeKeywordResultValidationFailedImplementors = []string{"UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed", "UpdateMercariCrawlSettingExcludeKeywordResultErrors", "UserError"}

func (ec *executionContext) _UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateMercariCrawlSettingExcludeKeywordResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed")
		case "code":
			out.Values[i] = ec._UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._UpdateMercariCrawlSettingExcludeKeywordResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateMercariCrawlSettingRequiredKeywordResultErrorImplementors = []string{"UpdateMercariCrawlSettingRequiredKeywordResultError", "UpdateMercariCrawlSettingRequiredKeywordResult", "ResultBase"}

func (ec *executionContext) _UpdateMercariCrawlSettingRequiredKeywordResultError(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateMercariCrawlSettingRequiredKeywordResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateMercariCrawlSettingRequiredKeywordResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateMercariCrawlSettingRequiredKeywordResultError")
		case "ok":
			out.Values[i] = ec._UpdateMercariCrawlSettingRequiredKeywordResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._UpdateMercariCrawlSettingRequiredKeywordResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateMercariCrawlSettingRequiredKeywordResultSuccessImplementors = []string{"UpdateMercariCrawlSettingRequiredKeywordResultSuccess", "UpdateMercariCrawlSettingRequiredKeywordResult", "ResultBase"}

func (ec *executionContext) _UpdateMercariCrawlSettingRequiredKeywordResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateMercariCrawlSettingRequiredKeywordResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateMercariCrawlSettingRequiredKeywordResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateMercariCrawlSettingRequiredKeywordResultSuccess")
		case "ok":
			out.Values[i] = ec._UpdateMercariCrawlSettingRequiredKeywordResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mercariCrawlSettingRequiredKeyword":
			out.Values[i] = ec._UpdateMercariCrawlSettingRequiredKeywordResultSuccess_mercariCrawlSettingRequiredKeyword(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateMercariCrawlSettingRequiredKeywordResultValidationFailedImplementors = []string{"UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed", "UpdateMercariCrawlSettingRequiredKeywordResultErrors", "UserError"}

func (ec *executionContext) _UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateMercariCrawlSettingRequiredKeywordResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed")
		case "code":
			out.Values[i] = ec._UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._UpdateMercariCrawlSettingRequiredKeywordResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateProductResultErrorImplementors = []string{"UpdateProductResultError", "UpdateProductResult", "ResultBase"}

func (ec *executionContext) _UpdateProductResultError(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateProductResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateProductResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateProductResultError")
		case "ok":
			out.Values[i] = ec._UpdateProductResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._UpdateProductResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateProductResultSuccessImplementors = []string{"UpdateProductResultSuccess", "UpdateProductResult", "ResultBase"}

func (ec *executionContext) _UpdateProductResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateProductResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateProductResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateProductResultSuccess")
		case "ok":
			out.Values[i] = ec._UpdateProductResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "product":
			out.Values[i] = ec._UpdateProductResultSuccess_product(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateProductResultValidationFailedImplementors = []string{"UpdateProductResultValidationFailed", "UpdateProductResultErrors", "UserError"}

func (ec *executionContext) _UpdateProductResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateProductResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateProductResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateProductResultValidationFailed")
		case "code":
			out.Values[i] = ec._UpdateProductResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._UpdateProductResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._UpdateProductResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateYahooAuctionCrawlSettingExcludeKeywordResultErrorImplementors = []string{"UpdateYahooAuctionCrawlSettingExcludeKeywordResultError", "UpdateYahooAuctionCrawlSettingExcludeKeywordResult", "ResultBase"}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingExcludeKeywordResultError(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateYahooAuctionCrawlSettingExcludeKeywordResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateYahooAuctionCrawlSettingExcludeKeywordResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateYahooAuctionCrawlSettingExcludeKeywordResultError")
		case "ok":
			out.Values[i] = ec._UpdateYahooAuctionCrawlSettingExcludeKeywordResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._UpdateYahooAuctionCrawlSettingExcludeKeywordResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateYahooAuctionCrawlSettingExcludeKeywordResultSuccessImplementors = []string{"UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess", "UpdateYahooAuctionCrawlSettingExcludeKeywordResult", "ResultBase"}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateYahooAuctionCrawlSettingExcludeKeywordResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess")
		case "ok":
			out.Values[i] = ec._UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "yahooAuctionCrawlSettingExcludeKeyword":
			out.Values[i] = ec._UpdateYahooAuctionCrawlSettingExcludeKeywordResultSuccess_yahooAuctionCrawlSettingExcludeKeyword(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailedImplementors = []string{"UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed", "UpdateYahooAuctionCrawlSettingExcludeKeywordResultErrors", "UserError"}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed")
		case "code":
			out.Values[i] = ec._UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._UpdateYahooAuctionCrawlSettingExcludeKeywordResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateYahooAuctionCrawlSettingRequiredKeywordResultErrorImplementors = []string{"UpdateYahooAuctionCrawlSettingRequiredKeywordResultError", "UpdateYahooAuctionCrawlSettingRequiredKeywordResult", "ResultBase"}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingRequiredKeywordResultError(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateYahooAuctionCrawlSettingRequiredKeywordResultError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateYahooAuctionCrawlSettingRequiredKeywordResultErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateYahooAuctionCrawlSettingRequiredKeywordResultError")
		case "ok":
			out.Values[i] = ec._UpdateYahooAuctionCrawlSettingRequiredKeywordResultError_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "error":
			out.Values[i] = ec._UpdateYahooAuctionCrawlSettingRequiredKeywordResultError_error(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateYahooAuctionCrawlSettingRequiredKeywordResultSuccessImplementors = []string{"UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess", "UpdateYahooAuctionCrawlSettingRequiredKeywordResult", "ResultBase"}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateYahooAuctionCrawlSettingRequiredKeywordResultSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess")
		case "ok":
			out.Values[i] = ec._UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "yahooAuctionCrawlSettingRequiredKeyword":
			out.Values[i] = ec._UpdateYahooAuctionCrawlSettingRequiredKeywordResultSuccess_yahooAuctionCrawlSettingRequiredKeyword(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailedImplementors = []string{"UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed", "UpdateYahooAuctionCrawlSettingRequiredKeywordResultErrors", "UserError"}

func (ec *executionContext) _UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed")
		case "code":
			out.Values[i] = ec._UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._UpdateYahooAuctionCrawlSettingRequiredKeywordResultValidationFailed_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var yahooAuctionCrawlSettingImplementors = []string{"YahooAuctionCrawlSetting", "Node"}

func (ec *executionContext) _YahooAuctionCrawlSetting(ctx context.Context, sel ast.SelectionSet, obj *model.YahooAuctionCrawlSetting) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, yahooAuctionCrawlSettingImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("YahooAuctionCrawlSetting")
		case "id":
			out.Values[i] = ec._YahooAuctionCrawlSetting_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "productId":
			out.Values[i] = ec._YahooAuctionCrawlSetting_productId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "keyword":
			out.Values[i] = ec._YahooAuctionCrawlSetting_keyword(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "minPrice":
			out.Values[i] = ec._YahooAuctionCrawlSetting_minPrice(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "maxPrice":
			out.Values[i] = ec._YahooAuctionCrawlSetting_maxPrice(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "categoryId":
			out.Values[i] = ec._YahooAuctionCrawlSetting_categoryId(ctx, field, obj)
		case "enabled":
			out.Values[i] = ec._YahooAuctionCrawlSetting_enabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._YahooAuctionCrawlSetting_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._YahooAuctionCrawlSetting_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "yahooAuctionCrawlSettingExcludeKeywords":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._YahooAuctionCrawlSetting_yahooAuctionCrawlSettingExcludeKeywords(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "yahooAuctionCrawlSettingRequiredKeywords":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._YahooAuctionCrawlSetting_yahooAuctionCrawlSettingRequiredKeywords(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var yahooAuctionCrawlSettingExcludeKeywordImplementors = []string{"YahooAuctionCrawlSettingExcludeKeyword", "Node"}

func (ec *executionContext) _YahooAuctionCrawlSettingExcludeKeyword(ctx context.Context, sel ast.SelectionSet, obj *model.YahooAuctionCrawlSettingExcludeKeyword) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, yahooAuctionCrawlSettingExcludeKeywordImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("YahooAuctionCrawlSettingExcludeKeyword")
		case "id":
			out.Values[i] = ec._YahooAuctionCrawlSettingExcludeKeyword_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "yahooAuctionCrawlSettingId":
			out.Values[i] = ec._YahooAuctionCrawlSettingExcludeKeyword_yahooAuctionCrawlSettingId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "keyword":
			out.Values[i] = ec._YahooAuctionCrawlSettingExcludeKeyword_keyword(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._YahooAuctionCrawlSettingExcludeKeyword_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._YahooAuctionCrawlSettingExcludeKeyword_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var yahooAuctionCrawlSettingRequiredKeywordImplementors = []string{"YahooAuctionCrawlSettingRequiredKeyword", "Node"}

func (ec *executionContext) _YahooAuctionCrawlSettingRequiredKeyword(ctx context.Context, sel ast.SelectionSet, obj *model.YahooAuctionCrawlSettingRequiredKeyword) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, yahooAuctionCrawlSettingRequiredKeywordImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("YahooAuctionCrawlSettingRequiredKeyword")
		case "id":
			out.Values[i] = ec._YahooAuctionCrawlSettingRequiredKeyword_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "yahooAuctionCrawlSettingId":
			out.Values[i] = ec._YahooAuctionCrawlSettingRequiredKeyword_yahooAuctionCrawlSettingId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "keyword":
			out.Values[i] = ec._YahooAuctionCrawlSettingRequiredKeyword_keyword(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._YahooAuctionCrawlSettingRequiredKeyword_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._YahooAuctionCrawlSettingRequiredKeyword_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var yahooAuctionDailyPurchaseSummaryImplementors = []string{"YahooAuctionDailyPurchaseSummary", "Node"}

func (ec *executionContext) _YahooAuctionDailyPurchaseSummary(ctx context.Context, sel ast.SelectionSet, obj *model.YahooAuctionDailyPurchaseSummary) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, yahooAuctionDailyPurchaseSummaryImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("YahooAuctionDailyPurchaseSummary")
		case "id":
			out.Values[i] = ec._YahooAuctionDailyPurchaseSummary_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "productId":
			out.Values[i] = ec._YahooAuctionDailyPurchaseSummary_productId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "averagePurchasePrice":
			out.Values[i] = ec._YahooAuctionDailyPurchaseSummary_averagePurchasePrice(ctx, field, obj)
		case "purchaseCount":
			out.Values[i] = ec._YahooAuctionDailyPurchaseSummary_purchaseCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "date":
			out.Values[i] = ec._YahooAuctionDailyPurchaseSummary_date(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._YahooAuctionDailyPurchaseSummary_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._YahooAuctionDailyPurchaseSummary_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var yahooAuctionProductImplementors = []string{"YahooAuctionProduct", "Node"}

func (ec *executionContext) _YahooAuctionProduct(ctx context.Context, sel ast.SelectionSet, obj *model.YahooAuctionProduct) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, yahooAuctionProductImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("YahooAuctionProduct")
		case "id":
			out.Values[i] = ec._YahooAuctionProduct_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "productId":
			out.Values[i] = ec._YahooAuctionProduct_productId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "yahooAuctionId":
			out.Values[i] = ec._YahooAuctionProduct_yahooAuctionId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._YahooAuctionProduct_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "thumbnailUrl":
			out.Values[i] = ec._YahooAuctionProduct_thumbnailUrl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "price":
			out.Values[i] = ec._YahooAuctionProduct_price(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "published":
			out.Values[i] = ec._YahooAuctionProduct_published(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "boughtDate":
			out.Values[i] = ec._YahooAuctionProduct_boughtDate(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._YahooAuctionProduct_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._YahooAuctionProduct_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			out.Values[i] = ec.___Schema_description(ctx, field, obj)
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		case "specifiedByURL":
			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNCreateMercariCrawlSettingExcludeKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateMercariCrawlSettingExcludeKeywordInput(ctx context.Context, v interface{}) (model.CreateMercariCrawlSettingExcludeKeywordInput, error) {
	res, err := ec.unmarshalInputCreateMercariCrawlSettingExcludeKeywordInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCreateMercariCrawlSettingExcludeKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateMercariCrawlSettingExcludeKeywordResult(ctx context.Context, sel ast.SelectionSet, v model.CreateMercariCrawlSettingExcludeKeywordResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateMercariCrawlSettingExcludeKeywordResult(ctx, sel, v)
}

func (ec *executionContext) marshalNCreateMercariCrawlSettingExcludeKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateMercariCrawlSettingExcludeKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, v model.CreateMercariCrawlSettingExcludeKeywordResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateMercariCrawlSettingExcludeKeywordResultErrors(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateMercariCrawlSettingInput2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateMercariCrawlSettingInput(ctx context.Context, v interface{}) (*model.CreateMercariCrawlSettingInput, error) {
	res, err := ec.unmarshalInputCreateMercariCrawlSettingInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateMercariCrawlSettingRequiredKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateMercariCrawlSettingRequiredKeywordInput(ctx context.Context, v interface{}) (model.CreateMercariCrawlSettingRequiredKeywordInput, error) {
	res, err := ec.unmarshalInputCreateMercariCrawlSettingRequiredKeywordInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCreateMercariCrawlSettingRequiredKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateMercariCrawlSettingRequiredKeywordResult(ctx context.Context, sel ast.SelectionSet, v model.CreateMercariCrawlSettingRequiredKeywordResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateMercariCrawlSettingRequiredKeywordResult(ctx, sel, v)
}

func (ec *executionContext) marshalNCreateMercariCrawlSettingRequiredKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateMercariCrawlSettingRequiredKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, v model.CreateMercariCrawlSettingRequiredKeywordResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateMercariCrawlSettingRequiredKeywordResultErrors(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateProductInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateProductInput(ctx context.Context, v interface{}) (model.CreateProductInput, error) {
	res, err := ec.unmarshalInputCreateProductInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCreateProductResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateProductResult(ctx context.Context, sel ast.SelectionSet, v model.CreateProductResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateProductResult(ctx, sel, v)
}

func (ec *executionContext) marshalNCreateProductResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateProductResultErrors(ctx context.Context, sel ast.SelectionSet, v model.CreateProductResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateProductResultErrors(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateYahooAuctionCrawlSettingExcludeKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateYahooAuctionCrawlSettingExcludeKeywordInput(ctx context.Context, v interface{}) (model.CreateYahooAuctionCrawlSettingExcludeKeywordInput, error) {
	res, err := ec.unmarshalInputCreateYahooAuctionCrawlSettingExcludeKeywordInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCreateYahooAuctionCrawlSettingExcludeKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateYahooAuctionCrawlSettingExcludeKeywordResult(ctx context.Context, sel ast.SelectionSet, v model.CreateYahooAuctionCrawlSettingExcludeKeywordResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateYahooAuctionCrawlSettingExcludeKeywordResult(ctx, sel, v)
}

func (ec *executionContext) marshalNCreateYahooAuctionCrawlSettingExcludeKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateYahooAuctionCrawlSettingExcludeKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, v model.CreateYahooAuctionCrawlSettingExcludeKeywordResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateYahooAuctionCrawlSettingExcludeKeywordResultErrors(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateYahooAuctionCrawlSettingInput2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateYahooAuctionCrawlSettingInput(ctx context.Context, v interface{}) (*model.CreateYahooAuctionCrawlSettingInput, error) {
	res, err := ec.unmarshalInputCreateYahooAuctionCrawlSettingInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateYahooAuctionCrawlSettingRequiredKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateYahooAuctionCrawlSettingRequiredKeywordInput(ctx context.Context, v interface{}) (model.CreateYahooAuctionCrawlSettingRequiredKeywordInput, error) {
	res, err := ec.unmarshalInputCreateYahooAuctionCrawlSettingRequiredKeywordInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCreateYahooAuctionCrawlSettingRequiredKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateYahooAuctionCrawlSettingRequiredKeywordResult(ctx context.Context, sel ast.SelectionSet, v model.CreateYahooAuctionCrawlSettingRequiredKeywordResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateYahooAuctionCrawlSettingRequiredKeywordResult(ctx, sel, v)
}

func (ec *executionContext) marshalNCreateYahooAuctionCrawlSettingRequiredKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐCreateYahooAuctionCrawlSettingRequiredKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, v model.CreateYahooAuctionCrawlSettingRequiredKeywordResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateYahooAuctionCrawlSettingRequiredKeywordResultErrors(ctx, sel, v)
}

func (ec *executionContext) marshalNDeleteMercariCrawlSettingExcludeKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteMercariCrawlSettingExcludeKeywordResult(ctx context.Context, sel ast.SelectionSet, v model.DeleteMercariCrawlSettingExcludeKeywordResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeleteMercariCrawlSettingExcludeKeywordResult(ctx, sel, v)
}

func (ec *executionContext) marshalNDeleteMercariCrawlSettingExcludeKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteMercariCrawlSettingExcludeKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, v model.DeleteMercariCrawlSettingExcludeKeywordResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeleteMercariCrawlSettingExcludeKeywordResultErrors(ctx, sel, v)
}

func (ec *executionContext) marshalNDeleteMercariCrawlSettingRequiredKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteMercariCrawlSettingRequiredKeywordResult(ctx context.Context, sel ast.SelectionSet, v model.DeleteMercariCrawlSettingRequiredKeywordResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeleteMercariCrawlSettingRequiredKeywordResult(ctx, sel, v)
}

func (ec *executionContext) marshalNDeleteMercariCrawlSettingRequiredKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteMercariCrawlSettingRequiredKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, v model.DeleteMercariCrawlSettingRequiredKeywordResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeleteMercariCrawlSettingRequiredKeywordResultErrors(ctx, sel, v)
}

func (ec *executionContext) marshalNDeleteProductResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteProductResult(ctx context.Context, sel ast.SelectionSet, v model.DeleteProductResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeleteProductResult(ctx, sel, v)
}

func (ec *executionContext) marshalNDeleteProductResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteProductResultErrors(ctx context.Context, sel ast.SelectionSet, v model.DeleteProductResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeleteProductResultErrors(ctx, sel, v)
}

func (ec *executionContext) marshalNDeleteYahooAuctionCrawlSettingExcludeKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteYahooAuctionCrawlSettingExcludeKeywordResult(ctx context.Context, sel ast.SelectionSet, v model.DeleteYahooAuctionCrawlSettingExcludeKeywordResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeleteYahooAuctionCrawlSettingExcludeKeywordResult(ctx, sel, v)
}

func (ec *executionContext) marshalNDeleteYahooAuctionCrawlSettingExcludeKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteYahooAuctionCrawlSettingExcludeKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, v model.DeleteYahooAuctionCrawlSettingExcludeKeywordResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeleteYahooAuctionCrawlSettingExcludeKeywordResultErrors(ctx, sel, v)
}

func (ec *executionContext) marshalNDeleteYahooAuctionCrawlSettingRequiredKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteYahooAuctionCrawlSettingRequiredKeywordResult(ctx context.Context, sel ast.SelectionSet, v model.DeleteYahooAuctionCrawlSettingRequiredKeywordResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeleteYahooAuctionCrawlSettingRequiredKeywordResult(ctx, sel, v)
}

func (ec *executionContext) marshalNDeleteYahooAuctionCrawlSettingRequiredKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐDeleteYahooAuctionCrawlSettingRequiredKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, v model.DeleteYahooAuctionCrawlSettingRequiredKeywordResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeleteYahooAuctionCrawlSettingRequiredKeywordResultErrors(ctx, sel, v)
}

func (ec *executionContext) marshalNErrorDetail2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetailᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ErrorDetail) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNErrorDetail2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetail(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNErrorDetail2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐErrorDetail(ctx context.Context, sel ast.SelectionSet, v *model.ErrorDetail) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ErrorDetail(ctx, sel, v)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNMercariCrawlSetting2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariCrawlSetting(ctx context.Context, sel ast.SelectionSet, v model.MercariCrawlSetting) graphql.Marshaler {
	return ec._MercariCrawlSetting(ctx, sel, &v)
}

func (ec *executionContext) marshalNMercariCrawlSetting2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariCrawlSetting(ctx context.Context, sel ast.SelectionSet, v *model.MercariCrawlSetting) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MercariCrawlSetting(ctx, sel, v)
}

func (ec *executionContext) marshalNMercariCrawlSettingExcludeKeyword2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariCrawlSettingExcludeKeywordᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.MercariCrawlSettingExcludeKeyword) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMercariCrawlSettingExcludeKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariCrawlSettingExcludeKeyword(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMercariCrawlSettingExcludeKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariCrawlSettingExcludeKeyword(ctx context.Context, sel ast.SelectionSet, v *model.MercariCrawlSettingExcludeKeyword) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MercariCrawlSettingExcludeKeyword(ctx, sel, v)
}

func (ec *executionContext) marshalNMercariCrawlSettingRequiredKeyword2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariCrawlSettingRequiredKeywordᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.MercariCrawlSettingRequiredKeyword) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMercariCrawlSettingRequiredKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariCrawlSettingRequiredKeyword(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMercariCrawlSettingRequiredKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariCrawlSettingRequiredKeyword(ctx context.Context, sel ast.SelectionSet, v *model.MercariCrawlSettingRequiredKeyword) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MercariCrawlSettingRequiredKeyword(ctx, sel, v)
}

func (ec *executionContext) marshalNMercariDailyPurchaseSummary2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariDailyPurchaseSummaryᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.MercariDailyPurchaseSummary) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMercariDailyPurchaseSummary2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariDailyPurchaseSummary(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMercariDailyPurchaseSummary2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariDailyPurchaseSummary(ctx context.Context, sel ast.SelectionSet, v *model.MercariDailyPurchaseSummary) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MercariDailyPurchaseSummary(ctx, sel, v)
}

func (ec *executionContext) marshalNMercariProduct2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariProductᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.MercariProduct) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMercariProduct2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariProduct(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMercariProduct2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐMercariProduct(ctx context.Context, sel ast.SelectionSet, v *model.MercariProduct) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MercariProduct(ctx, sel, v)
}

func (ec *executionContext) marshalNProduct2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐProduct(ctx context.Context, sel ast.SelectionSet, v model.Product) graphql.Marshaler {
	return ec._Product(ctx, sel, &v)
}

func (ec *executionContext) marshalNProduct2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐProductᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Product) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProduct2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐProduct(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNProduct2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐProduct(ctx context.Context, sel ast.SelectionSet, v *model.Product) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Product(ctx, sel, v)
}

func (ec *executionContext) marshalNRelatedProduct2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐRelatedProductᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.RelatedProduct) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRelatedProduct2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐRelatedProduct(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNRelatedProduct2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐRelatedProduct(ctx context.Context, sel ast.SelectionSet, v *model.RelatedProduct) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RelatedProduct(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNUpdateMercariCrawlSettingExcludeKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateMercariCrawlSettingExcludeKeywordInput(ctx context.Context, v interface{}) (model.UpdateMercariCrawlSettingExcludeKeywordInput, error) {
	res, err := ec.unmarshalInputUpdateMercariCrawlSettingExcludeKeywordInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpdateMercariCrawlSettingExcludeKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateMercariCrawlSettingExcludeKeywordResult(ctx context.Context, sel ast.SelectionSet, v model.UpdateMercariCrawlSettingExcludeKeywordResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateMercariCrawlSettingExcludeKeywordResult(ctx, sel, v)
}

func (ec *executionContext) marshalNUpdateMercariCrawlSettingExcludeKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateMercariCrawlSettingExcludeKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, v model.UpdateMercariCrawlSettingExcludeKeywordResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateMercariCrawlSettingExcludeKeywordResultErrors(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateMercariCrawlSettingInput2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateMercariCrawlSettingInput(ctx context.Context, v interface{}) (*model.UpdateMercariCrawlSettingInput, error) {
	res, err := ec.unmarshalInputUpdateMercariCrawlSettingInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateMercariCrawlSettingRequiredKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateMercariCrawlSettingRequiredKeywordInput(ctx context.Context, v interface{}) (model.UpdateMercariCrawlSettingRequiredKeywordInput, error) {
	res, err := ec.unmarshalInputUpdateMercariCrawlSettingRequiredKeywordInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpdateMercariCrawlSettingRequiredKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateMercariCrawlSettingRequiredKeywordResult(ctx context.Context, sel ast.SelectionSet, v model.UpdateMercariCrawlSettingRequiredKeywordResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateMercariCrawlSettingRequiredKeywordResult(ctx, sel, v)
}

func (ec *executionContext) marshalNUpdateMercariCrawlSettingRequiredKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateMercariCrawlSettingRequiredKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, v model.UpdateMercariCrawlSettingRequiredKeywordResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateMercariCrawlSettingRequiredKeywordResultErrors(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateProductInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateProductInput(ctx context.Context, v interface{}) (model.UpdateProductInput, error) {
	res, err := ec.unmarshalInputUpdateProductInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpdateProductResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateProductResult(ctx context.Context, sel ast.SelectionSet, v model.UpdateProductResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateProductResult(ctx, sel, v)
}

func (ec *executionContext) marshalNUpdateProductResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateProductResultErrors(ctx context.Context, sel ast.SelectionSet, v model.UpdateProductResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateProductResultErrors(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateYahooAuctionCrawlSettingExcludeKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateYahooAuctionCrawlSettingExcludeKeywordInput(ctx context.Context, v interface{}) (model.UpdateYahooAuctionCrawlSettingExcludeKeywordInput, error) {
	res, err := ec.unmarshalInputUpdateYahooAuctionCrawlSettingExcludeKeywordInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpdateYahooAuctionCrawlSettingExcludeKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateYahooAuctionCrawlSettingExcludeKeywordResult(ctx context.Context, sel ast.SelectionSet, v model.UpdateYahooAuctionCrawlSettingExcludeKeywordResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateYahooAuctionCrawlSettingExcludeKeywordResult(ctx, sel, v)
}

func (ec *executionContext) marshalNUpdateYahooAuctionCrawlSettingExcludeKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateYahooAuctionCrawlSettingExcludeKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, v model.UpdateYahooAuctionCrawlSettingExcludeKeywordResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateYahooAuctionCrawlSettingExcludeKeywordResultErrors(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateYahooAuctionCrawlSettingInput2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateYahooAuctionCrawlSettingInput(ctx context.Context, v interface{}) (*model.UpdateYahooAuctionCrawlSettingInput, error) {
	res, err := ec.unmarshalInputUpdateYahooAuctionCrawlSettingInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateYahooAuctionCrawlSettingRequiredKeywordInput2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateYahooAuctionCrawlSettingRequiredKeywordInput(ctx context.Context, v interface{}) (model.UpdateYahooAuctionCrawlSettingRequiredKeywordInput, error) {
	res, err := ec.unmarshalInputUpdateYahooAuctionCrawlSettingRequiredKeywordInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpdateYahooAuctionCrawlSettingRequiredKeywordResult2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateYahooAuctionCrawlSettingRequiredKeywordResult(ctx context.Context, sel ast.SelectionSet, v model.UpdateYahooAuctionCrawlSettingRequiredKeywordResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateYahooAuctionCrawlSettingRequiredKeywordResult(ctx, sel, v)
}

func (ec *executionContext) marshalNUpdateYahooAuctionCrawlSettingRequiredKeywordResultErrors2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐUpdateYahooAuctionCrawlSettingRequiredKeywordResultErrors(ctx context.Context, sel ast.SelectionSet, v model.UpdateYahooAuctionCrawlSettingRequiredKeywordResultErrors) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateYahooAuctionCrawlSettingRequiredKeywordResultErrors(ctx, sel, v)
}

func (ec *executionContext) marshalNYahooAuctionCrawlSetting2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionCrawlSetting(ctx context.Context, sel ast.SelectionSet, v model.YahooAuctionCrawlSetting) graphql.Marshaler {
	return ec._YahooAuctionCrawlSetting(ctx, sel, &v)
}

func (ec *executionContext) marshalNYahooAuctionCrawlSetting2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionCrawlSetting(ctx context.Context, sel ast.SelectionSet, v *model.YahooAuctionCrawlSetting) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._YahooAuctionCrawlSetting(ctx, sel, v)
}

func (ec *executionContext) marshalNYahooAuctionCrawlSettingExcludeKeyword2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionCrawlSettingExcludeKeywordᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.YahooAuctionCrawlSettingExcludeKeyword) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNYahooAuctionCrawlSettingExcludeKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionCrawlSettingExcludeKeyword(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNYahooAuctionCrawlSettingExcludeKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionCrawlSettingExcludeKeyword(ctx context.Context, sel ast.SelectionSet, v *model.YahooAuctionCrawlSettingExcludeKeyword) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._YahooAuctionCrawlSettingExcludeKeyword(ctx, sel, v)
}

func (ec *executionContext) marshalNYahooAuctionCrawlSettingRequiredKeyword2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionCrawlSettingRequiredKeywordᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.YahooAuctionCrawlSettingRequiredKeyword) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNYahooAuctionCrawlSettingRequiredKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionCrawlSettingRequiredKeyword(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNYahooAuctionCrawlSettingRequiredKeyword2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionCrawlSettingRequiredKeyword(ctx context.Context, sel ast.SelectionSet, v *model.YahooAuctionCrawlSettingRequiredKeyword) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._YahooAuctionCrawlSettingRequiredKeyword(ctx, sel, v)
}

func (ec *executionContext) marshalNYahooAuctionDailyPurchaseSummary2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionDailyPurchaseSummaryᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.YahooAuctionDailyPurchaseSummary) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNYahooAuctionDailyPurchaseSummary2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionDailyPurchaseSummary(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNYahooAuctionDailyPurchaseSummary2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionDailyPurchaseSummary(ctx context.Context, sel ast.SelectionSet, v *model.YahooAuctionDailyPurchaseSummary) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._YahooAuctionDailyPurchaseSummary(ctx, sel, v)
}

func (ec *executionContext) marshalNYahooAuctionProduct2ᚕᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionProductᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.YahooAuctionProduct) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNYahooAuctionProduct2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionProduct(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNYahooAuctionProduct2ᚖgithubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐYahooAuctionProduct(ctx context.Context, sel ast.SelectionSet, v *model.YahooAuctionProduct) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._YahooAuctionProduct(ctx, sel, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalID(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) marshalONode2githubᚗcomᚋkurowebᚋpriceᚑmonitoringᚋvolumesᚋbffᚋgraphᚋmodelᚐNode(ctx context.Context, sel ast.SelectionSet, v model.Node) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Node(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
